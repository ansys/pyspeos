name: GitHub CI

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'
  DOCUMENTATION_CNAME: 'speos.docs.pyansys.com'
  PACKAGE_NAMESPACE: 'ansys.speos.core'
  PACKAGE_NAME: 'ansys-optics-speos'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  docs-build:
    name: Doc building
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false
          sphinxopts: -j auto --keep-going
  tests:
    name: "Unit testing"
    runs-on: ubuntu-latest
    needs: [style]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io/ansys-internal
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Unit testing
        run: |
          pip install .[tests]
          docker compose up -d
          cd tests  # so we're testing the install, not local
          pytest -vxs
          docker kill speos-rpc
          docker rm speos-rpc
        env:
          LICENSE_SERVER: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ansys-pyspeos-wheel
          path: dist/
          retention-days: 7

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [docs-build, tests]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  doc-deploy-development:
    name: "Doc dev version deploy"
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [build-library]
    steps:
      - name: "Deploy developers documentation"
        uses: ansys/actions/doc-deploy-dev@v6
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  release:

    name: "Release"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    steps:
    #  - name: "Release to the private PyPI repository"
    #    uses: ansys/actions/release-pypi-private@v1
    #    with:
    #      library-name: ${{ env.PACKAGE_NAME }}
    #      twine-username: "__token__"
    #      twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
#
    #  - name: "Release to the public PyPI repository"
    #    uses: ansys/actions/release-pypi-public@v1
    #    with:
    #      library-name: ${{ env.PACKAGE_NAME }}
    #      twine-username: "__token__"
    #      twine-token: ${{ secrets.PYPI_TOKEN }}
#
    - name: "Release to GitHub"
      uses: ansys/actions/release-github@v6
      with:
        library-name: ${{ env.PACKAGE_NAME }}