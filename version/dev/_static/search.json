[{"objectID":"Home","href":"api/ansys/speos/core/bsdf/AnisotropicBSDF.html#anisotropicbsdf","title":"AnisotropicBSDF","text":"AnisotropicBSDF\n\n\n\nclass ansys.speos.core.bsdf.AnisotropicBSDF(speos, file_path=None)\n\nBases: BaseBSDF\n\nBSDF - Bidirectional scattering distribution function.\n\nThis class contains the methods and functions to load and edit existing Speos bsdf datasets.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos Object to connect to speos rpc server\n\nfile_path\n\nUnion[Path, python:str]\n\nFile path to bsdf file\n\nParameters\n\nspeos (ansys.speos.core.speos.Speos)\n\nfile_path (Union[pathlib.Path, str])"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/AnisotropicBSDF.html#overview","title":"AnisotropicBSDF > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nRetrieve any information from the BSDF object.\n\nreset\n\nReset BSDF data to what was stored in file.\n\ncommit\n\nSent Data to gRPC interface.\n\nsave\n\nSave a Speos anistropic bsdf.\n\nProperties\n\n\n\n\n\nanisotropic_angles\n\nAnisotropic angles available in bsdf data.\n\nspectrum_incidence\n\nIncident angle (theta) of spectrum measurement.\n\nspectrum_anisotropy\n\nIncident angle (phi) of spectrum measurement.\n\nreflection_spectrum\n\nReflection Spectrum of the bsdf.\n\ntransmission_spectrum\n\nTransmission  Spectrum of the bsdf.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nCreate string representation of a BSDF."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/AnisotropicBSDF.html#import-detail","title":"AnisotropicBSDF > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/AnisotropicBSDF.html#property-detail","title":"AnisotropicBSDF > Property detail","text":"Property detail\n\n\n\nproperty AnisotropicBSDF.anisotropic_angles\n\nAnisotropic angles available in bsdf data.\n\n\n\nproperty AnisotropicBSDF.spectrum_incidence: list[float]\n\nIncident angle (theta) of spectrum measurement.\n\nFirst value is for reflection second for transmission\n\n\n\nproperty AnisotropicBSDF.spectrum_anisotropy: list[float]\n\nIncident angle (phi) of spectrum measurement.\n\nFirst value is for reflection second for transmission\n\n\n\nproperty AnisotropicBSDF.reflection_spectrum\n\nReflection Spectrum of the bsdf.\n\nThe spectrum is used to modulate the bsdf.\n\n\n\nproperty AnisotropicBSDF.transmission_spectrum\n\nTransmission  Spectrum of the bsdf.\n\nThe spectrum is used to modulate the bsdf."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/AnisotropicBSDF.html#method-detail","title":"AnisotropicBSDF > Method detail","text":"Method detail\n\n\n\nAnisotropicBSDF.get(key='')\n\nRetrieve any information from the BSDF object.\n\nParameters\n\nkey\n\npython:str\n\nName of the property.\n\nReturns\n\nproperty\n\nValues/content of the associated property.\n\n\n\nAnisotropicBSDF.__str__()\n\nCreate string representation of a BSDF.\n\n\n\nAnisotropicBSDF.reset()\n\nReset BSDF data to what was stored in file.\n\n\n\nAnisotropicBSDF.commit()\n\nSent Data to gRPC interface.\n\n\n\nAnisotropicBSDF.save(file_path, commit=True)\n\nSave a Speos anistropic bsdf.\n\nParameters\n\nfile_path\n\nUnion[Path, python:str]\n\nFilepath to save bsdf\n\ncommit\n\nbool\n\ncommit data before saving\n\nReturns\n\nPath\n\nFile location"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#balancemodedisplayprimaries","title":"BalanceModeDisplayPrimaries","text":"BalanceModeDisplayPrimaries\n\n\n\nclass ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries(balance_mode_display, default_values=True, stable_ctr=False)\n\nBalanceMode : DisplayPrimaries.\n\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display\ndevices into account.\nWith this method, displayed results are similar to what the camera really gets.\n\nParameters\n\nbalance_mode_display\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.\n\n\n\nSensorCameraBalanceModeDisplay\n\nSensorCameraBalanceModeDisplay protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nbalance_mode_display (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeDisplay)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_balance_mode_display_primaries\nmethod available in color class."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#overview","title":"BalanceModeDisplayPrimaries > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_red_display_file_uri\n\nSet the red display file.\n\nset_green_display_file_uri\n\nSet the green display file.\n\nset_blue_display_file_uri\n\nSet the blue display file."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#import-detail","title":"BalanceModeDisplayPrimaries > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#method-detail","title":"BalanceModeDisplayPrimaries > Method detail","text":"Method detail\n\n\n\nBalanceModeDisplayPrimaries.set_red_display_file_uri(uri)\n\nSet the red display file.\n\nParameters\n\nuri\n\npython:str\n\nRed display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries.\n\n\n\nBalanceModeDisplayPrimaries.set_green_display_file_uri(uri)\n\nSet the green display file.\n\nParameters\n\nuri\n\npython:str\n\nGreen display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries.\n\n\n\nBalanceModeDisplayPrimaries.set_blue_display_file_uri(uri)\n\nSet the blue display file.\n\nParameters\n\nuri\n\npython:str\n\nBlue display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#soptemplatelink","title":"SOPTemplateLink","text":"SOPTemplateLink\n\n\n\nclass ansys.speos.core.kernel.sop_template.SOPTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for Surface Optical Properties template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.sop_template.SOPTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the sop_template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.sop_template import ProtoSOPTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sop_t_db = speos.client.sop_templates()\n>>> sop_t_message = ProtoSOPTemplate(name=\"Mirror_50\")\n>>> sop_t_message.mirror.reflectance = 50\n>>> sop_t_link = sop_t_db.create(message=sop_t_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#overview","title":"SOPTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the sop_template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#import-detail","title":"SOPTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#method-detail","title":"SOPTemplateLink > Method detail","text":"Method detail\n\n\n\nSOPTemplateLink.__str__()\n\nReturn the string representation of the sop_template.\n\n\n\nSOPTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsop_template.SOPTemplate\n\nSOPTemplate datamodel.\n\n\n\nSOPTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsop_template.SOPTemplate\n\nNew SOPTemplate datamodel.\n\n\n\nSOPTemplateLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyLink.html#bodylink","title":"BodyLink","text":"BodyLink\n\n\n\nclass ansys.speos.core.kernel.body.BodyLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a body in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.body.BodyStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the body in the database.\n\nParameters\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyLink.html#overview","title":"BodyLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the body."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyLink.html#import-detail","title":"BodyLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyLink.html#method-detail","title":"BodyLink > Method detail","text":"Method detail\n\n\n\nBodyLink.__str__()\n\nReturn the string representation of the body.\n\n\n\nBodyLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nbody.Body\n\nBody datamodel.\n\n\n\nBodyLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nbody.Body\n\nNew body datamodel.\n\n\n\nBodyLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Gaussian.html#gaussian","title":"Gaussian","text":"Gaussian\n\n\n\nclass ansys.speos.core.intensity.Intensity.Gaussian(gaussian, gaussian_props, default_values=True)\n\nIntensity of type: Gaussian.\n\nBy default, full width at half maximum following x and y are set at 30 degrees, and total\nangle at 180 degrees.\nBy default, no axis system is chosen, that means normal to surface map.\n\nParameters\n\ngaussian\n\nansys.api.speos.intensity.v1.IntensityTemplate.Gaussian\n\nGaussian to complete.\n\ngaussian_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.GaussianProperties\n\nGaussian properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\ngaussian (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Gaussian)\n\ngaussian_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.GaussianProperties)\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Gaussian.html#overview","title":"Gaussian > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_FWHM_angle_x\n\nSet the full width following x at half maximum.\n\nset_FWHM_angle_y\n\nSet the full width following y at half maximum.\n\nset_total_angle\n\nSet the total angle of the emission of the light source.\n\nset_axis_system\n\nSet the intensity distribution orientation."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Gaussian.html#import-detail","title":"Gaussian > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Gaussian.html#method-detail","title":"Gaussian > Method detail","text":"Method detail\n\n\n\nGaussian.set_FWHM_angle_x(value=30)\n\nSet the full width following x at half maximum.\n\nParameters\n\nvalue\n\npython:float\n\nFull Width in degrees following x at Half Maximum.\nBy default, 30.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n\n\nGaussian.set_FWHM_angle_y(value=30)\n\nSet the full width following y at half maximum.\n\nParameters\n\nvalue\n\npython:float\n\nFull Width in degrees following y at Half Maximum.\nBy default, 30.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n\n\nGaussian.set_total_angle(value=180)\n\nSet the total angle of the emission of the light source.\n\nParameters\n\nvalue\n\npython:float\n\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n\n\nGaussian.set_axis_system(axis_system=None)\n\nSet the intensity distribution orientation.\n\nParameters\n\naxis_system\n\nList[python:float], optional\n\nOrientation of the intensity distribution [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, None : normal to surface map.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#color","title":"Color","text":"Color\n\n\n\n\n\nclass ansys.speos.core.sensor.SensorCamera.Photometric.Color(mode_color, default_values=True, stable_ctr=False)\n\nMode of camera sensor : Color.\n\nResults will be available in color according to the White Balance mode.\nBy default, a balance mode none is chosen (referred as the basic conversion).\n\nParameters\n\nmode_color\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor\n\nSensorCameraColorModeColor protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nmode_color (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_mode_color method available in\nphotometric class."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#overview","title":"Color > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_red_spectrum_file_uri\n\nSet the red spectrum.\n\nset_green_spectrum_file_uri\n\nSet the green spectrum.\n\nset_blue_spectrum_file_uri\n\nSet the blue spectrum.\n\nset_balance_mode_none\n\nSet the balance mode as none.\n\nset_balance_mode_grey_world\n\nSet the balance mode as grey world.\n\nset_balance_mode_user_white\n\nSet the balance mode as user white.\n\nset_balance_mode_display_primaries\n\nSet the balance mode as display primaries."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#import-detail","title":"Color > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#method-detail","title":"Color > Method detail","text":"Method detail\n\n\n\nColor.set_red_spectrum_file_uri(uri)\n\nSet the red spectrum.\n\nParameters\n\nuri\n\npython:str\n\nRed spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nColor.set_green_spectrum_file_uri(uri)\n\nSet the green spectrum.\n\nParameters\n\nuri\n\npython:str\n\nGreen spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nColor.set_blue_spectrum_file_uri(uri)\n\nSet the blue spectrum.\n\nParameters\n\nuri\n\npython:str\n\nBlue spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nColor.set_balance_mode_none()\n\nSet the balance mode as none.\n\nThe spectral transmittance of the optical system and the spectral sensitivity for\neach channel are applied to the detected spectral image before the conversion in\na three-channel result. This method is referred to as the basic conversion.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nColor.set_balance_mode_grey_world()\n\nSet the balance mode as grey world.\n\nThe grey world assumption states that the content of the image is grey on average.\nThis method converts spectral results in a three-channel result with the basic\nconversion. Then it computes and applies coefficients to the red, green and blue\nimages to make sure their averages are equal.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nColor.set_balance_mode_user_white()\n\nSet the balance mode as user white.\n\nIn addition to the basic treatment, it allows to apply specific coefficients to the\nred, green, blue images.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalance UserWhite mode.\n\n\n\nColor.set_balance_mode_display_primaries()\n\nSet the balance mode as display primaries.\n\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display\ndevices into account. With this method, displayed results are similar to what the\ncamera really gets.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalance DisplayPrimaries mode."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#classes","title":"Color > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#sourcesurface","title":"SourceSurface","text":"SourceSurface\n\n\n\n\n\nclass ansys.speos.core.source.SourceSurface(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nType of Source : Surface.\n\nBy default, a luminous flux and existence constant are chosen. With a monochromatic spectrum,\nand lambertian intensity (cos with N = 1).\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the source feature.\n\nsurface\n\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface\n\nSurface source to complete.\n\nsurface_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.SurfaceProperties\n\nSurface source properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceSurface.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#overview","title":"SourceSurface > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_flux_from_intensity_file\n\nTake flux from intensity file provided.\n\nset_flux_luminous\n\nSet luminous flux.\n\nset_flux_radiant\n\nSet radiant flux.\n\nset_flux_luminous_intensity\n\nSet luminous intensity flux.\n\nset_intensity\n\nSet intensity.\n\nset_exitance_constant\n\nSet existence constant.\n\nset_exitance_variable\n\nSet existence variable, taken from XMP map.\n\nset_spectrum_from_xmp_file\n\nTake spectrum from xmp file provided.\n\nset_spectrum\n\nSet spectrum of the Source.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing Surface source visualization data."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#import-detail","title":"SourceSurface > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#property-detail","title":"SourceSurface > Property detail","text":"Property detail\n\n\n\nproperty SourceSurface.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing Surface source visualization data.\n\nReturns\n\n_VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature rays, coordinate_systems."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#method-detail","title":"SourceSurface > Method detail","text":"Method detail\n\n\n\nSourceSurface.set_flux_from_intensity_file()\n\nTake flux from intensity file provided.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_flux_luminous_intensity(value=5)\n\nSet luminous intensity flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous intensity in candelas.\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_intensity()\n\nSet intensity.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity.\n\n\n\nSourceSurface.set_exitance_constant(geometries)\n\nSet existence constant.\n\nParameters\n\ngeometries\n\nList[python:tuple[ansys.speos.core.geo_ref.GeoRef, bool]]\n\nList of (face, reverseNormal).\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_exitance_variable()\n\nSet existence variable, taken from XMP map.\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface source.\n\n\n\nSourceSurface.set_spectrum_from_xmp_file()\n\nTake spectrum from xmp file provided.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n\n\nSourceSurface.set_spectrum()\n\nSet spectrum of the Source.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n\n\nSourceSurface.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature.\n\n\n\nSourceSurface.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature.\n\n\n\nSourceSurface.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.html#classes","title":"SourceSurface > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#basesensor","title":"BaseSensor","text":"BaseSensor\n\n\n\n\n\nclass ansys.speos.core.sensor.BaseSensor(project, name, description='', metadata=None, sensor_instance=None)\n\nBase class for Sensor.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nAttributes\n\nsensor_template_link\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object for the sensor template in database.\n\nParameters\n\nproject (BaseSensor.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#overview","title":"BaseSensor > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet dictionary corresponding to the project - read only.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nProperties\n\n\n\n\n\nlxp_path_number\n\nNumber of LXP rays simulated for the Sensor.\n\nAttributes\n\n\n\n\n\nsensor_template_link\n\nLink object for the sensor template in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the sensor."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#import-detail","title":"BaseSensor > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#property-detail","title":"BaseSensor > Property detail","text":"Property detail\n\n\n\nproperty BaseSensor.lxp_path_number\n\nNumber of LXP rays simulated for the Sensor."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#attribute-detail","title":"BaseSensor > Attribute detail","text":"Attribute detail\n\n\n\nBaseSensor.sensor_template_link = None\n\nLink object for the sensor template in database."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#method-detail","title":"BaseSensor > Method detail","text":"Method detail\n\n\n\nBaseSensor.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n\n\nBaseSensor.__str__()\n\nReturn the string representation of the sensor.\n\n\n\nBaseSensor.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature.\n\n\n\nBaseSensor.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature.\n\n\n\nBaseSensor.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.html#classes","title":"BaseSensor > Classes","text":"Classes\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#how-to-open-result-ms-windows-os-only","title":"Examples > How to open result (MS Windows OS only)","text":"How to open result (MS Windows OS only)\n\nThis tutorial demonstrates how to open and review results using workflow method."},{"objectID":"Examples","href":"examples/workflow/open-result.html#prerequisites","title":"Examples > How to open result (MS Windows OS only) > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/workflow/open-result.html#perform-imports","title":"Examples > How to open result (MS Windows OS only) > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#define-constants","title":"Examples > How to open result (MS Windows OS only) > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#model-setup","title":"Examples > How to open result (MS Windows OS only) > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/workflow/open-result.html#load-assets","title":"Examples > How to open result (MS Windows OS only) > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#connect-to-the-rpc-server","title":"Examples > How to open result (MS Windows OS only) > Connect to the RPC Server","text":"Connect to the RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#create-project-from-a-speos-file","title":"Examples > How to open result (MS Windows OS only) > Create project from a Speos file","text":"Create project from a Speos file\n\nThe Project class is instantiated by passing a Speos instance and the name of the Speos project file.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#retrieve-the-simulation-feature","title":"Examples > How to open result (MS Windows OS only) > Retrieve the simulation feature","text":"Retrieve the simulation feature\n\nUse the method Project.find() to retrieve an instance of the SimulationDirect feature.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#run-simulation","title":"Examples > How to open result (MS Windows OS only) > Run simulation","text":"Run simulation\n\nThe simulation can be run using either the CPU or with GPU acceleration. The following cell shows how Python is used to assign the appropriate method to run_sim.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#postprocessing","title":"Examples > How to open result (MS Windows OS only) > Postprocessing","text":"Postprocessing"},{"objectID":"Examples","href":"examples/workflow/open-result.html#open-the-results-ms-windows-os-only","title":"Examples > How to open result (MS Windows OS only) > Open the results (MS Windows OS only):","text":"Open the results (MS Windows OS only):\n\nDisplay one result as image.\n\nA full path can be given, or the name of the result.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/open-result.html#display-the-image","title":"Examples > How to open result (MS Windows OS only) > Display the image","text":"Display the image\n\nDisplay one result in a result viewer.\n\nA full path can be given, or the name of the result.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/index.html#the-spectrumpy-module","title":"The spectrum.py module","text":"The spectrum.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/index.html#summary","title":"The spectrum.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSpectrum\n\nSpeos feature : Spectrum.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/index.html#description","title":"The spectrum.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Spectrum."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosPercentStyle.html#pyspeospercentstyle","title":"PySpeosPercentStyle","text":"PySpeosPercentStyle\n\n\n\nclass ansys.speos.core.logger.PySpeosPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle\n\nCustomized PercentStyle class for overwriting default format styles."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosPercentStyle.html#import-detail","title":"PySpeosPercentStyle > Import detail","text":"Import detail"},{"objectID":"Examples","href":"examples/core/bsdf.html#how-to-create-a-anisotropic-bsdf-file","title":"Examples > How to create a anisotropic bsdf file","text":"How to create a anisotropic bsdf file\n\nThis tutorial demonstrates how to create bsdf file using pyspeos"},{"objectID":"Examples","href":"examples/core/bsdf.html#what-is-a-bsdf","title":"Examples > How to create a anisotropic bsdf file > What is a BSDF","text":"What is a BSDF\n\nBSDF stands for Bidirectional Scattering Distribution Function, which is a mathematical function that characterizes how light is scattered from a surface. In Speos we have two models to represent BSDF data: Spectral BSDF(.brdf) and Anisotropic BSDF (.anisotropicbsdf). The first allows for each wavelength to store a full bsdf description with this it allows for great color representation. the second uses spectral modulation to represent the color but allows for anisotropic behaviour by taking a\nBSDF for each anistropic angle. Both formats need an interpolation between incident/anistropic angles and wavelength In many cases the data comes from measurements and need coordinate transformations to be used"},{"objectID":"Examples","href":"examples/core/bsdf.html#prerequisites","title":"Examples > How to create a anisotropic bsdf file > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/bsdf.html#perform-imports","title":"Examples > How to create a anisotropic bsdf file > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#define-constants","title":"Examples > How to create a anisotropic bsdf file > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#define-helper-functions","title":"Examples > How to create a anisotropic bsdf file > Define helper functions","text":"Define helper functions\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#model-setup","title":"Examples > How to create a anisotropic bsdf file > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/bsdf.html#load-assets","title":"Examples > How to create a anisotropic bsdf file > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#create-anisotropic-bsdf-from-datapoints","title":"Examples > How to create a anisotropic bsdf file > Create Anisotropic BSDF from datapoints","text":"Create Anisotropic BSDF from datapoints\n\nTo create and save a bsdf we need to first create a connection to the SpeosRPC server ### Connect to the RPC Server This Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#create-a-bxdfdatapoint","title":"Examples > How to create a anisotropic bsdf file > Create a BXDFDatapoint","text":"Create a BXDFDatapoint\n\nto create a bsdf we need the bsdf for multiple incident angles. In this example we assume the color doesn’t change over the icnident angles so we can use anisotropic bsdf and we assume the data has no anisotropy\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#create-anistropic-bsdf-class-instance","title":"Examples > How to create a anisotropic bsdf file > Create Anistropic BSDF class instance","text":"Create Anistropic BSDF class instance\n\n\n\n\n\nCreate Spectrum with 80% reflectivity\n\n\n\n\n\nAssign reflection spectrum to bsdf\n\n\n\n\n\nAssign brdf data\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/bsdf.html#bsdf-interpolation-enhancement","title":"Examples > How to create a anisotropic bsdf file > BSDF Interpolation Enhancement","text":"BSDF Interpolation Enhancement\n\nThis section shows:\n\nHow to apply automatic interpolation settings and save a post-processed bsdf file.\n\nHow to change interpolation settings, apply the new settings to bsdf, and save the post-processed file\n\nHow to re-load a bsdf file has interpolation enhanced and retrieve the interpolation settings.\n\n\n\n\n\n\n\n\n\n\n\n\n\nApply user defined interpolation enhancement\n\n\n\n\n\n\n\n\n\nChange interpolation settings\n\n\n\n\n\nSet the changed interpolation settings back to bsdf file and save\n\n\n\n\n\n\n\n\n\nLoad a bsdf file with interpolation enhanced\n\n\n\n\n\n\n\n\n\nDefined new interpolation settings for an already enhanced bsdf file\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#how-to-create-a-simulation","title":"Examples > How to create a simulation","text":"How to create a simulation\n\nThis tutorial demonstrates how to create a simulation."},{"objectID":"Examples","href":"examples/core/simulation.html#what-is-a-simulation","title":"Examples > How to create a simulation > What is a simulation?","text":"What is a simulation?\n\nA simulation contains selected sensors, sources to model ray-trace in space."},{"objectID":"Examples","href":"examples/core/simulation.html#prerequisites","title":"Examples > How to create a simulation > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/simulation.html#perform-imports","title":"Examples > How to create a simulation > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#define-constants","title":"Examples > How to create a simulation > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#model-setup","title":"Examples > How to create a simulation > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/simulation.html#load-assets","title":"Examples > How to create a simulation > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#connect-to-the-rpc-server","title":"Examples > How to create a simulation > Connect to the RPC Server","text":"Connect to the RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service..\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#create-a-new-project","title":"Examples > How to create a simulation > Create a new project","text":"Create a new project\n\nThe only way to create a simulation using the core layer, is to create it from a project. The Project class is instantiated by passing a Speos instance.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#prepare-prerequisites","title":"Examples > How to create a simulation > Prepare prerequisites","text":"Prepare prerequisites\n\nCreate the necessary elements for a simulation: Sensor, source, root part, optical property are prerequisites."},{"objectID":"Examples","href":"examples/core/simulation.html#prepare-the-root-part","title":"Examples > How to create a simulation > Prepare the root part","text":"Prepare the root part\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#prepare-an-optical-property","title":"Examples > How to create a simulation > Prepare an optical property","text":"Prepare an optical property\n\nCreate Optical Property\n\n\n\n\n\n\n\n\n\nChoose the geometry for this optical property : Body.1\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#prepare-an-irradiance-sensor","title":"Examples > How to create a simulation > Prepare an irradiance sensor","text":"Prepare an irradiance sensor\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#prepare-a-surface-source","title":"Examples > How to create a simulation > Prepare a surface source","text":"Prepare a surface source\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#create-a-simulation","title":"Examples > How to create a simulation > Create a simulation","text":"Create a simulation\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#set-simulation-characteristics","title":"Examples > How to create a simulation > Set simulation characteristics","text":"Set simulation characteristics\n\nSimulation is defined with the same default values as the GUI speos.\n\nIf the user would like to modify the simulation characteristics, it is possible to do so by setting the simulation characteristics as below.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#read-information","title":"Examples > How to create a simulation > Read information","text":"Read information\n\nRead simulation information\n\n\n\n\n\n\n\n\n\nRead project information\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#update-simulation-settings","title":"Examples > How to create a simulation > Update simulation settings","text":"Update simulation settings\n\nIf you are manipulating a simulation already committed, remember to commit your changes.\n\nIf you don’t, you will still only watch what is committed on the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#reset","title":"Examples > How to create a simulation > Reset","text":"Reset\n\nPossibility to reset local values from the one available in the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#other-simulation-examples","title":"Examples > How to create a simulation > Other simulation examples","text":"Other simulation examples"},{"objectID":"Examples","href":"examples/core/simulation.html#inverse-simulation","title":"Examples > How to create a simulation > Inverse simulation","text":"Inverse simulation\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/simulation.html#interactive-simulation","title":"Examples > How to create a simulation > Interactive simulation","text":"Interactive simulation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/index.html#the-sourcepy-module","title":"The source.py module","text":"The source.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/index.html#summary","title":"The source.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBaseSource\n\nSuper Class for all sources.\n\nSourceLuminaire\n\nLuminaireSource.\n\nSourceRayFile\n\nRayFile Source.\n\nSourceSurface\n\nType of Source : Surface.\n\nBaseSourceAmbient\n\nSuper Class for ambient sources.\n\nSourceAmbientNaturalLight\n\nNatural light ambient source.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/index.html#description","title":"The source.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Source."},{"objectID":"Home","href":"api/ansys/speos/core/part/index.html#the-partpy-module","title":"The part.py module","text":"The part.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/part/index.html#summary","title":"The part.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPart\n\nFeature : Part.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/part/index.html#description","title":"The part.py module > Description","text":"Description\n\nProvides a way to interact with feature: Part."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#soptemplatestub","title":"SOPTemplateStub","text":"SOPTemplateStub\n\n\n\nclass ansys.speos.core.kernel.sop_template.SOPTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for Surface Optical Properties templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SOPTemplateStub is to retrieve it from SpeosClient via sop_templates()\nmethod. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sop_t_db = speos.client.sop_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#overview","title":"SOPTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#import-detail","title":"SOPTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#method-detail","title":"SOPTemplateStub > Method detail","text":"Method detail\n\n\n\nSOPTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsop_template.SOPTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object created.\n\n\n\nSOPTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to read.\n\nReturns\n\nsop_template.SOPTemplate\n\nDatamodel of the entry.\n\n\n\nSOPTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to update.\n\ndata\n\nsop_template.SOPTemplate\n\nNew datamodel for the entry.\n\n\n\nSOPTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to delete.\n\n\n\nSOPTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.sop_template.SOPTemplateLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/index.html#the-spectrumpy-module","title":"The spectrum.py module","text":"The spectrum.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/index.html#summary","title":"The spectrum.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSpectrumLink\n\nLink object for a spectrum in database.\n\nSpectrumStub\n\nDatabase interactions for spectrums.\n\nAttributes\n\n\n\n\n\nProtoSpectrum\n\nSpectrum protobuf class : ansys.api.speos.spectrum.v1.spectrum_pb2.Spectrum\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/index.html#description","title":"The spectrum.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/index.html#module-detail","title":"The spectrum.py module > Module detail","text":"Module detail\n\n\n\nspectrum.ProtoSpectrum\n\nSpectrum protobuf class : ansys.api.speos.spectrum.v1.spectrum_pb2.Spectrum"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/SpectralBRDF.html#spectralbrdf","title":"SpectralBRDF","text":"SpectralBRDF\n\n\n\nclass ansys.speos.core.bsdf.SpectralBRDF(speos, file_path=None)\n\nBases: BaseBSDF\n\nBSDF - Bidirectional scattering distribution function.\n\nThis class contains the methods and functions to load and edit existing Speos bsdf datasets.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos Object to connect to speos rpc server\n\nfile_path\n\nUnion[Path, python:str]\n\nFile path to bsdf file\n\nParameters\n\nspeos (ansys.speos.core.speos.Speos)\n\nfile_path (Union[pathlib.Path, str])"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/SpectralBRDF.html#overview","title":"SpectralBRDF > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nRetrieve any information from the BSDF object.\n\nreset\n\nReset BSDF data to what was stored in file.\n\nsanity_check\n\nVerify BSDF data is correctly defined.\n\ncommit\n\nSent Data to gRPC interface.\n\nsave\n\nSave a Speos anistropic bsdf.\n\nProperties\n\n\n\n\n\nwavelength\n\nList of all Wavelength in BRDF.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nCreate string representation of a BSDF."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/SpectralBRDF.html#import-detail","title":"SpectralBRDF > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/SpectralBRDF.html#property-detail","title":"SpectralBRDF > Property detail","text":"Property detail\n\n\n\nproperty SpectralBRDF.wavelength\n\nList of all Wavelength in BRDF."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/SpectralBRDF.html#method-detail","title":"SpectralBRDF > Method detail","text":"Method detail\n\n\n\nSpectralBRDF.get(key='')\n\nRetrieve any information from the BSDF object.\n\nParameters\n\nkey\n\npython:str\n\nName of the property.\n\nReturns\n\nproperty\n\nValues/content of the associated property.\n\n\n\nSpectralBRDF.__str__()\n\nCreate string representation of a BSDF.\n\n\n\nSpectralBRDF.reset()\n\nReset BSDF data to what was stored in file.\n\n\n\nSpectralBRDF.sanity_check(silent=True)\n\nVerify BSDF data is correctly defined.\n\nParameters\n\nsilent\n\nbool\n\nIf False Warnings will be raised else not, by Default True\n\nReturns\n\nWarningInformation\n\npython:str\n\nDescription of what data is missing or incorrect\n\n\n\nSpectralBRDF.commit()\n\nSent Data to gRPC interface.\n\n\n\nSpectralBRDF.save(file_path, commit=True)\n\nSave a Speos anistropic bsdf.\n\nParameters\n\nfile_path\n\nUnion[Path, python:str]\n\nFilepath to save bsdf\n\ncommit\n\nbool\n\ncommit data before saving\n\nReturns\n\nPath\n\nFile location"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/index.html#the-kernel-package","title":"The kernel package","text":"The kernel package\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/index.html#summary","title":"The kernel package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nbody\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nclient\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\ncrud\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nface\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nintensity_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\njob\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\npart\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nproto_message_utils\n\nModule with utility elements for protobuf messages from Speos RPC server.\n\nscene\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nsensor_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nsimulation_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nsop_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nsource_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nspectrum\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\nvop_template\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/index.html#description","title":"The kernel package > Description","text":"Description\n\nPySpeos Kernel module gathers low-level interactions and internal operations of the project."},{"objectID":"Home","href":"api/ansys/speos/core/generic/visualization_methods/index.html#the-visualization_methodspy-module","title":"The visualization_methods.py module","text":"The visualization_methods.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/generic/visualization_methods/index.html#summary","title":"The visualization_methods.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nlocal2absolute\n\nConvert local coordinate to global coordinate."},{"objectID":"Home","href":"api/ansys/speos/core/generic/visualization_methods/index.html#description","title":"The visualization_methods.py module > Description","text":"Description\n\nProvides the VisualData class."},{"objectID":"Home","href":"api/ansys/speos/core/generic/visualization_methods/index.html#module-detail","title":"The visualization_methods.py module > Module detail","text":"Module detail\n\n\n\nvisualization_methods.local2absolute(local_vertice, coordinates)\n\nConvert local coordinate to global coordinate.\n\nParameters\n\ncoordinates: list\n\nlocal coordinate in shape [1, 9],\ncoordinates[3:6] as x-axis,\ncoordinates[3:6] as y-axis,\ncoordinates[3:6] as z-axis.\n\nlocal_vertice: np.ndarray\n\nnumpy array includes x, y, z info.\n\nReturns\n\nnp.ndarray\n\nnumpy array includes x, y, z info"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#speosfileinstance","title":"SpeosFileInstance","text":"SpeosFileInstance\n\n\n\nclass ansys.speos.core.workflow.combine_speos.SpeosFileInstance(speos_file, axis_system=None, name='')\n\nRepresents a SPEOS file containing geometries and materials.\n\nGeometries are placed in the root part of a project, and oriented according to the axis_system\nargument.\n\nParameters\n\nspeos_file\n\npython:str\n\nSPEOS file to be loaded.\n\naxis_system\n\nOptional[List[python:float]]\n\nLocation and orientation to define for the geometry of the SPEOS file,\n[Ox, Oy, Oz, Xx, Xy, Xz, Yx, Yy, Yz, Zx, Zy, Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nname\n\npython:str\n\nName chosen for the imported geometry. This name is used as subpart name under the root part\nof the project.\nBy default, “” (meaning user has not defined a name), then the name of the SPEOS file\nwithout extension is taken.\nNote: Materials are named after the name. For instance name.material.1 representing the\nfirst material of the imported geometry.\n\nParameters\n\nspeos_file (str)\n\naxis_system (Optional[List[float]])\n\nname (str)"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#overview","title":"SpeosFileInstance > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nspeos_file\n\nSPEOS file.\n\naxis_system\n\nLocation and orientation to define for the geometry of the SPEOS file.\n\nname\n\nName for the imported geometry, and used to name the materials."},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#import-detail","title":"SpeosFileInstance > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#attribute-detail","title":"SpeosFileInstance > Attribute detail","text":"Attribute detail\n\n\n\nSpeosFileInstance.speos_file\n\nSPEOS file.\n\n\n\nSpeosFileInstance.axis_system = None\n\nLocation and orientation to define for the geometry of the SPEOS file.\n\n\n\nSpeosFileInstance.name = ''\n\nName for the imported geometry, and used to name the materials."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneStub.html#scenestub","title":"SceneStub","text":"SceneStub\n\n\n\nclass ansys.speos.core.kernel.scene.SceneStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for scenes.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SceneStub is to retrieve it from SpeosClient via scenes() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sce_db = speos.client.scenes()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneStub.html#overview","title":"SceneStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneStub.html#import-detail","title":"SceneStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneStub.html#method-detail","title":"SceneStub > Method detail","text":"Method detail\n\n\n\nSceneStub.create(message=None)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nscene.Scene, optional.\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object created.\n\n\n\nSceneStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to read.\n\nReturns\n\nscene.Scene\n\nDatamodel of the entry.\n\n\n\nSceneStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to update.\n\ndata\n\nscene.Scene\n\nNew datamodel for the entry.\n\n\n\nSceneStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to delete.\n\n\n\nSceneStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.scene.SceneLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#colorimetric","title":"Colorimetric","text":"Colorimetric\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.Colorimetric(sensor_type_colorimetric, default_values=True, stable_ctr=False)\n\nType of sensor : Colorimetric.\n\nThis kind of sensor will generate color results without any spectral data or layer\nseparation in lx or W//m2.\nBy default, it uses a default wavelengths range.\n\nParameters\n\nsensor_type_colorimetric\n\nansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_colorimetric (ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#overview","title":"Colorimetric > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_wavelengths_range\n\nSet the range of wavelengths."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#import-detail","title":"Colorimetric > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#method-detail","title":"Colorimetric > Method detail","text":"Method detail\n\n\n\nColorimetric.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range."},{"objectID":"Home","href":"api/ansys/speos/core/generic/general_methods/index.html#the-general_methodspy-module","title":"The general_methods.py module","text":"The general_methods.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/generic/general_methods/index.html#summary","title":"The general_methods.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ndeprecate_kwargs\n\nIssues deprecation warnings for arguments.\n\nrun_if_graphics_required\n\nCheck if graphics are available.\n\ngraphics_required\n\nDecorate a method as requiring graphics.\n\nmagnitude_vector\n\nCompute the magnitude (length) of a 2D or 3D vector using NumPy.\n\nnormalize_vector\n\nNormalize a 2D or 3D vector to have a length of 1 using NumPy.\n\nerror_no_install\n\nRaise error that installation was not found at a location.\n\nretrieve_speos_install_dir\n\nRetrieve Speos install location based on Path or Environment.\n\nwavelength_to_rgb\n\nConvert a given wavelength of light to an approximate RGB color value.\n\nmin_speos_version\n\nRaise version warning.\n\nConstants\n\n\n\n\n\nGRAPHICS_ERROR\n\n\n\nVERSION_ERROR\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/generic/general_methods/index.html#description","title":"The general_methods.py module > Description","text":"Description\n\nGeneral methods and helpers collection.\n\nthis includes decorator and methods"},{"objectID":"Home","href":"api/ansys/speos/core/generic/general_methods/index.html#module-detail","title":"The general_methods.py module > Module detail","text":"Module detail\n\n\n\ngeneral_methods.deprecate_kwargs(old_arguments, removed_version='0.3.0')\n\nIssues deprecation warnings for arguments.\n\nParameters\n\nold_arguments\n\npython:dict\n\nkey old argument value new argument name\n\nremoved_version\n\npython:str\n\nRelease version with which argument support will be removed\nBy Default, next major release\n\n\n\ngeneral_methods.run_if_graphics_required(warning=False)\n\nCheck if graphics are available.\n\n\n\ngeneral_methods.graphics_required(method)\n\nDecorate a method as requiring graphics.\n\nParameters\n\nmethod\n\npython:callable()\n\nMethod to decorate.\n\nReturns\n\npython:callable()\n\nDecorated method.\n\n\n\ngeneral_methods.magnitude_vector(vector)\n\nCompute the magnitude (length) of a 2D or 3D vector using NumPy.\n\nParameters\n\nvector: List[float]\n\nA 2D or 3D vector as a list [x, y] or [x, y, z].\n\nReturns\n\npython:float\n\nThe magnitude (length) of the vector.\n\n\n\ngeneral_methods.normalize_vector(vector)\n\nNormalize a 2D or 3D vector to have a length of 1 using NumPy.\n\nParameters\n\nvector: List[float]\n\nA vector as a list [x, y] for 2D or [x, y, z] for 3D.\n\nReturns\n\nList[python:float]\n\nThe normalized vector.\n\n\n\ngeneral_methods.error_no_install(install_path, version)\n\nRaise error that installation was not found at a location.\n\nParameters\n\ninstall_path\n\nUnion[Path, python:str]\n\nInstallation Path\n\nversion\n\nUnion[python:int, python:str]\n\nVersion\n\n\n\ngeneral_methods.retrieve_speos_install_dir(speos_rpc_path=None, version=DEFAULT_VERSION)\n\nRetrieve Speos install location based on Path or Environment.\n\nParameters\n\nspeos_rpc_path\n\nOptional[python:str, Path]\n\nlocation of Speos rpc executable\n\nversion\n\nUnion[python:str, python:int]\n\nThe Speos server version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen as\nansys.speos.core.kernel.client.LATEST_VERSION.\n\n\n\ngeneral_methods.wavelength_to_rgb(wavelength, gamma=0.8)\n\nConvert a given wavelength of light to an approximate RGB color value.\n\nThe wavelength must be given in nanometers in the range from 380 nm to 750 nm.\nBased on the code from http://www.physics.sfasu.edu/astro/color/spectra.html\n\nParameters\n\nwavelength\n\npython:float\n\nWavelength in nanometer between 380-750 nm\n\ngamma\n\npython:float\n\nGamma value.\nBy default : 0.8\n\n\n\ngeneral_methods.min_speos_version(major, minor, service_pack)\n\nRaise version warning.\n\nParameters\n\nmajor\n\npython:int\n\nMajor release version, e.g. 25\n\nminor\n\npython:int\n\nMinor release version e.g. 1\n\nservice_pack\n\npython:int\n\nService Pack version e.g. 3\n\n\n\ngeneral_methods.GRAPHICS_ERROR = \"Preview unsupported without 'ansys-tools-visualization_interface' installed. You can install...\n\n\n\n\n\ngeneral_methods.VERSION_ERROR = 'The pySpeos feature : {feature_name} needs a Speos Version of {version} or higher.'\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudStub.html#crudstub","title":"CrudStub","text":"CrudStub\n\n\n\nclass ansys.speos.core.kernel.crud.CrudStub(stub)\n\nWraps a speos gRPC CRUD connection.\n\nThis class is used as base class for all Speos databases interactions.\nBetter use directly those inherited classes like SOPTemplateStub, SpectrumStub, …"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudStub.html#overview","title":"CrudStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudStub.html#import-detail","title":"CrudStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudStub.html#method-detail","title":"CrudStub > Method detail","text":"Method detail\n\n\n\nCrudStub.create(request)\n\nCreate a new entry.\n\n\n\nCrudStub.read(request)\n\nGet an existing entry.\n\n\n\nCrudStub.update(request)\n\nChange an existing entry.\n\n\n\nCrudStub.delete(request)\n\nRemove an existing entry.\n\n\n\nCrudStub.list(request)\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/OptProp.html#optprop","title":"OptProp","text":"OptProp\n\n\n\nclass ansys.speos.core.opt_prop.OptProp(project, name, description='', metadata=None)\n\nSpeos feature: optical property.\n\nBy default, a mirror 100% is chosen as surface optical property,\nwithout any volume optical property.\nBy default, the optical property is applied to no geometry.\n\nParameters\n\nproject\n\nproject.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str, optional\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]], optional\n\nMetadata of the feature.\nBy default, None.\n\nParameters\n\nproject (OptProp.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])"},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/OptProp.html#overview","title":"OptProp > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_surface_mirror\n\nPerfect specular surface.\n\nset_surface_opticalpolished\n\nTransparent or perfectly polished material (glass, plastic).\n\nset_surface_library\n\nBased on surface optical properties file.\n\nset_volume_none\n\nNo volume optical property.\n\nset_volume_opaque\n\nNon transparent material.\n\nset_volume_optic\n\nTransparent colorless material without bulk scattering.\n\nset_volume_library\n\nBased on *.material file.\n\nset_geometries\n\nSelect geometries on which the optical properties will be applied.\n\nget\n\nGet dictionary corresponding to the project - read only.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nAttributes\n\n\n\n\n\nsop_template_link\n\nLink object for the sop template in database.\n\nvop_template_link\n\nLink object for the vop template in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the optical property."},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/OptProp.html#import-detail","title":"OptProp > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/OptProp.html#attribute-detail","title":"OptProp > Attribute detail","text":"Attribute detail\n\n\n\nOptProp.sop_template_link = None\n\nLink object for the sop template in database.\n\n\n\nOptProp.vop_template_link = None\n\nLink object for the vop template in database."},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/OptProp.html#method-detail","title":"OptProp > Method detail","text":"Method detail\n\n\n\nOptProp.set_surface_mirror(reflectance=100)\n\nPerfect specular surface.\n\nParameters\n\nreflectance\n\npython:float\n\nReflectance, expected from 0. to 100. in %.\nBy default, 100.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_surface_opticalpolished()\n\nTransparent or perfectly polished material (glass, plastic).\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_surface_library(path)\n\nBased on surface optical properties file.\n\nParameters\n\npath\n\npython:str\n\nSurface optical properties file, *.scattering, *.bsdf, *.brdf, *.coated, …\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_volume_none()\n\nNo volume optical property.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_volume_opaque()\n\nNon transparent material.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_volume_optic(index=1.5, absorption=0, constringence=None)\n\nTransparent colorless material without bulk scattering.\n\nParameters\n\nindex\n\npython:float\n\nRefractive index.\nBy default, 1.5.\n\nabsorption\n\npython:float\n\nAbsorption coefficient value. mm-1.\nBy default, 0.\n\nconstringence\n\npython:float, optional\n\nAbbe number.\nBy default, None, means no constringence.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_volume_library(path)\n\nBased on *.material file.\n\nParameters\n\npath\n\npython:str\n\n*.material file\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.set_geometries(geometries=None)\n\nSelect geometries on which the optical properties will be applied.\n\nParameters\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef], optional\n\nList of geometries. Giving an empty list means “All geometries”\nBy default, None, means “no geometry”.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n\n\nOptProp.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n\n\nOptProp.__str__()\n\nReturn the string representation of the optical property.\n\n\n\nOptProp.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical Property feature.\n\n\n\nOptProp.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature.\n\n\n\nOptProp.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature."},{"objectID":"Home","href":"api/ansys/speos/core/generic/constants/index.html#the-constantspy-module","title":"The constants.py module","text":"The constants.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/generic/constants/index.html#summary","title":"The constants.py module > Summary","text":"Summary\n\nConstants\n\n\n\n\n\nDEFAULT_HOST\n\nDefault host used by Speos RPC server and client\n\nDEFAULT_PORT\n\nDefault port used by Speos RPC server and client\n\nDEFAULT_VERSION\n\nLatest supported Speos version of the current PySpeos Package\n\nMAX_SERVER_MESSAGE_LENGTH\n\nMaximum message length value accepted by the Speos RPC server,\n\nMAX_CLIENT_MESSAGE_SIZE\n\nMaximum message Size accepted by grpc channel,"},{"objectID":"Home","href":"api/ansys/speos/core/generic/constants/index.html#description","title":"The constants.py module > Description","text":"Description\n\nCollection of all constants used in pySpeos."},{"objectID":"Home","href":"api/ansys/speos/core/generic/constants/index.html#module-detail","title":"The constants.py module > Module detail","text":"Module detail\n\n\n\nconstants.DEFAULT_HOST: str = 'localhost'\n\nDefault host used by Speos RPC server and client\n\n\n\nconstants.DEFAULT_PORT: str = '50098'\n\nDefault port used by Speos RPC server and client\n\n\n\nconstants.DEFAULT_VERSION: str = '252'\n\nLatest supported Speos version of the current PySpeos Package\n\n\n\nconstants.MAX_SERVER_MESSAGE_LENGTH: int\n\nMaximum message length value accepted by the Speos RPC server,\nBy default, value stored in environment variable SPEOS_MAX_MESSAGE_LENGTH or 268 435 456.\n\n\n\nconstants.MAX_CLIENT_MESSAGE_SIZE: int = 4194304\n\nMaximum message Size accepted by grpc channel,\nBy default, 4194304."},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/index.html#the-opt_proppy-module","title":"The opt_prop.py module","text":"The opt_prop.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/index.html#summary","title":"The opt_prop.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nOptProp\n\nSpeos feature: optical property.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/opt_prop/index.html#description","title":"The opt_prop.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Optical Property."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/index.html#the-scenepy-module","title":"The scene.py module","text":"The scene.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/index.html#summary","title":"The scene.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSceneLink\n\nLink object for a scene in database.\n\nSceneStub\n\nDatabase interactions for scenes.\n\nAttributes\n\n\n\n\n\nProtoScene\n\nScene protobuf class : ansys.api.speos.scene.v2.scene_pb2.Scene\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/index.html#description","title":"The scene.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/index.html#module-detail","title":"The scene.py module > Module detail","text":"Module detail\n\n\n\nscene.ProtoScene\n\nScene protobuf class : ansys.api.speos.scene.v2.scene_pb2.Scene"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/RayPath.html#raypath","title":"RayPath","text":"RayPath\n\n\n\nclass ansys.speos.core.lxp.RayPath(raypath, sensor_contribution=False)\n\nFramework representing a singular ray path.\n\nParameters\n\nraypath\n\nansys.api.speos.lpf.v2.lpf_file_reader__v2__pb2.RayPath\n\nRayPath object\n\nsensor_contribution\n\nbool\n\nDefines if sensor contributions are stored within the data.\nBy default False.\n\nParameters\n\nraypath (ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath)\n\nsensor_contribution (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/RayPath.html#overview","title":"RayPath > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nRetrieve any information from the RayPath object.\n\nProperties\n\n\n\n\n\nnb_impacts\n\nNumber of impacts contained in ray path.\n\nimpacts\n\nXYZ coordinates for each impact.\n\nwl\n\nWavelength of the ray.\n\nbody_ids\n\nBody ID of interacted body for each impact.\n\nface_ids\n\nFace ID of interacted body for each impact.\n\nlast_direction\n\nLast direction of the ray.\n\nintersection_type\n\nIntersection type of the ray for each impact.\n\nsensor_contribution\n\nProvide the sensor contribution information for each sensor.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nCreate string representation of a RayPath."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/RayPath.html#import-detail","title":"RayPath > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/RayPath.html#property-detail","title":"RayPath > Property detail","text":"Property detail\n\n\n\nproperty RayPath.nb_impacts: int\n\nNumber of impacts contained in ray path.\n\nReturns\n\npython:int\n\nNumber of impacts\n\n\n\nproperty RayPath.impacts: list[list[float]]\n\nXYZ coordinates for each impact.\n\nReturns\n\npython:list[python:list[python:float]]\n\nlist containing the impact coordinates [[x0,y0,z0],[x1,y1,z1],…]\n\n\n\nproperty RayPath.wl: float\n\nWavelength of the ray.\n\nReturns\n\npython:float\n\nWavelength in nm\n\n\n\nproperty RayPath.body_ids: list[int]\n\nBody ID of interacted body for each impact.\n\nReturns\n\npython:list[python:int]\n\nList of body IDs for each impact.\n\n\n\nproperty RayPath.face_ids: list[int]\n\nFace ID of interacted body for each impact.\n\nReturns\n\npython:list[python:int]\n\nList of face IDs for each impact.\n\n\n\nproperty RayPath.last_direction: list[float]\n\nLast direction of the ray.\n\nReturns\n\npython:list[python:float]\n\nLast direction of the rays as list[x,y,z].\n\n\n\nproperty RayPath.intersection_type: list[int]\n\nIntersection type of the ray for each impact.\n\nReturns\n\npython:list[python:int]\n\nIntersection type at each impact.\n\nNotes\n\nAvailable intersection types:\n\nStatusAbsorbed = 0\n\nStatusSpecularTransmitted = 1\n\nStatusGaussianTransmitted = 2\n\nStatusLambertianTransmitted = 3\n\nStatusVolumicDiffused = 4\n\nStatusJustEmitted = 5\n\nStatusDiracTransmitted = 6\n\nStatusError = 7\n\nStatusErrorVolumicBodyNotClosed = 8\n\nStatusErrorVolumeConflict = 9\n\nStatusError2DTangency = 10\n\nStatusError2DIntersect3DWarning = 11\n\nStatusErrorNonOpticalMaterial = 12\n\nStatusErrorIntersection = 13\n\nStatusErrorNonOpticalMaterialAtEmission = 14\n\nStatusError3DTextureSupportTangency = 15\n\nStatusLast = 16\n\nStatusFirst = -7\n\nStatusDiracReflected = -6\n\nStatusReserved = -5\n\nStatusGrinStep = -4\n\nStatusLambertianReflected = -3\n\nStatusGaussianReflected = -2\n\nStatusSpecularReflected = -1\n\n\n\nproperty RayPath.sensor_contribution: None | list[dict]\n\nProvide the sensor contribution information for each sensor.\n\nReturns\n\nUnion[python:None, python:list[python:dict]]\n\nIf no sensor contribution, None will be returned. If there is sensor contribution,             a dictionary with the following information is returned:            {“sensor_id”: sc.sensor_id,\n“position”: [sc.coordinates.x, sc.coordinates.y]}"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/RayPath.html#method-detail","title":"RayPath > Method detail","text":"Method detail\n\n\n\nRayPath.get(key='')\n\nRetrieve any information from the RayPath object.\n\nParameters\n\nkey\n\npython:str\n\nName of the property.\n\nReturns\n\nproperty\n\nValues/content of the associated property.\n\n\n\nRayPath.__str__()\n\nCreate string representation of a RayPath."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/index.html#the-lxppy-module","title":"The lxp.py module","text":"The lxp.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/index.html#summary","title":"The lxp.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nRayPath\n\nFramework representing a singular ray path.\n\nLightPathFinder\n\nDefine an interface to read LPF files.\n\nConstants\n\n\n\n\n\nERROR_IDS\n\nIntersection types indicating an error state.\n\nNO_ERROR_IDS\n\nIntersection types indicating a correct ray state.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/index.html#description","title":"The lxp.py module > Description","text":"Description\n\nThe lxp module contains classes and functions to simplify the interaction with ray data.\n\nRay data is provided as lpf file.\nLPF files contain a set of simulated rays with all their intersections and properties."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/index.html#module-detail","title":"The lxp.py module > Module detail","text":"Module detail\n\n\n\nlxp.ERROR_IDS = [7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nIntersection types indicating an error state.\n\n\n\nlxp.NO_ERROR_IDS\n\nIntersection types indicating a correct ray state."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceRayFile.html#sourcerayfile","title":"SourceRayFile","text":"SourceRayFile\n\n\n\nclass ansys.speos.core.source.SourceRayFile(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nRayFile Source.\n\nBy default, flux and spectrum from ray file are selected.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceRayFile.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceRayFile.html#overview","title":"SourceRayFile > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_ray_file_uri\n\nSet ray file.\n\nset_flux_from_ray_file\n\nTake flux from ray file provided.\n\nset_flux_luminous\n\nSet luminous flux.\n\nset_flux_radiant\n\nSet radiant flux.\n\nset_spectrum_from_ray_file\n\nTake spectrum from ray file provided.\n\nset_spectrum\n\nSet spectrum of the Source.\n\nset_axis_system\n\nSet position of the source.\n\nset_exit_geometries\n\nSet exit geometries.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing Rayfile source visualization data."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceRayFile.html#import-detail","title":"SourceRayFile > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceRayFile.html#property-detail","title":"SourceRayFile > Property detail","text":"Property detail\n\n\n\nproperty SourceRayFile.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing Rayfile source visualization data.\n\nReturns\n\n_VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature rays, coordinate_systems."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceRayFile.html#method-detail","title":"SourceRayFile > Method detail","text":"Method detail\n\n\n\nSourceRayFile.set_ray_file_uri(uri)\n\nSet ray file.\n\nParameters\n\nuri\n\npython:str\n\nRayfile format file uri (.ray or .tm25ray files expected).\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n\n\nSourceRayFile.set_flux_from_ray_file()\n\nTake flux from ray file provided.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n\n\nSourceRayFile.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n\n\nSourceRayFile.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n\n\nSourceRayFile.set_spectrum_from_ray_file()\n\nTake spectrum from ray file provided.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n\n\nSourceRayFile.set_spectrum()\n\nSet spectrum of the Source.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n\n\nSourceRayFile.set_axis_system(axis_system=None)\n\nSet position of the source.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile Source.\n\n\n\nSourceRayFile.set_exit_geometries(exit_geometries=None)\n\nSet exit geometries.\n\nParameters\n\nexit_geometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nExit Geometries that will use this rayfile source.\nBy default, [].\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile Source."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/index.html#the-sop_templatepy-module","title":"The sop_template.py module","text":"The sop_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/index.html#summary","title":"The sop_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSOPTemplateLink\n\nLink object for Surface Optical Properties template in database.\n\nSOPTemplateStub\n\nDatabase interactions for Surface Optical Properties templates.\n\nAttributes\n\n\n\n\n\nProtoSOPTemplate\n\nSOPTemplate protobuf class : ansys.api.speos.sop.v1.sop_pb2.SOPTemplate\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/index.html#description","title":"The sop_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sop_template/index.html#module-detail","title":"The sop_template.py module > Module detail","text":"Module detail\n\n\n\nsop_template.ProtoSOPTemplate\n\nSOPTemplate protobuf class : ansys.api.speos.sop.v1.sop_pb2.SOPTemplate"},{"objectID":"Home","href":"overview/index.html#overview","title":"Overview","text":"Overview\n\nThis section provides an overview of the PySpeos library,\nexplaining its key concepts."},{"objectID":"Home","href":"overview/index.html#pyspeos-overview","title":"Overview > PySpeos overview","text":"PySpeos overview\n\nPySpeos is a Python client to communicate with the Ansys SpeosRPC server.\n\nThe SpeosRPC server is based on gRPC and provides APIs to interact with Speos Solver.\n\nPlease be aware that the server is intended to work with a single user.\n\nThe server is under development, so all Speos features are not available yet."},{"objectID":"Home","href":"overview/index.html#why-speosrpc-server","title":"Overview > Why SpeosRPC server?","text":"Why SpeosRPC server?\n\nThis allows the user to use the Speos capabilities without starting any CAD.\n\nThis offers the possibility to manage Speos capabilities with more liberty:\n\nData preparation\n\nRunning jobs\n\nResult post processing"},{"objectID":"Home","href":"overview/index.html#grpc-usage-advantages","title":"Overview > gRPC usage advantages","text":"gRPC usage advantages\n\nThere are several advantages to using gRPC.\n\nLanguage independency between client and server. This means that the user has a large choice of languages to write the API calls. The user does not have to write the same language as the server.\n\nOS independency between client and server. The client does not have to run on the same OS as the server. The SpeosRPC server is provided for Linux and Windows.\n\nThe client and server can run on different machines."},{"objectID":"Home","href":"overview/index.html#schema","title":"Overview > Schema","text":"Schema\n\nThe schema shows different ways to use Speos capabilities:\n\nvia CADs / Labs / Viewers GUI\n\nvia SpeosRPC server APIs"},{"objectID":"Home","href":"overview/index.html#speos-solver","title":"Overview > Speos Solver","text":"Speos Solver\n\nThe Speos Solver represents the intelligence that is used to handle the light simulation."},{"objectID":"Home","href":"overview/index.html#speosrpc-server","title":"Overview > SpeosRPC server","text":"SpeosRPC server\n\nThe SpeosRPC server allows to translate the provided gRPC API calls into features understood by the Speos Solver."},{"objectID":"Home","href":"overview/index.html#pyspeos-layering","title":"Overview > PySpeos layering","text":"PySpeos layering\n\nPySpeos is composed of several code layers, each of them having a different level of complexity and range of capabilities:\n\ncore\n\nworkflow\n\nkernel\n\nExamples of usage for each layer are available in the Examples section.\n\nNew users should avoid using kernel layer at a first usage."},{"objectID":"Home","href":"overview/index.html#core","title":"Overview > Core","text":"Core\n\nThe Core layer is the entry point of PySpeos.\n\nIt is designed to be representative of a classic Speos UI usage.\n\nFor instance, users can create a project (from scratch or from SPEOS file), add/modify/delete sources, sensors, simulations, materials, geometries, and compute simulations."},{"objectID":"Home","href":"overview/index.html#workflow","title":"Overview > Workflow","text":"Workflow\n\nThe Workflow layer offers a list of user workflows combining several actions into simple usage.\n\nFor instance, users can access a workflow that combines several Speos files into a single project. Another workflow allows users to display a simulation result (on windows environment only)."},{"objectID":"Home","href":"overview/index.html#kernel","title":"Overview > Kernel","text":"Kernel\n\nThe Kernel layer offers more flexibility and capabilities than Core and Workflow.\n\nIt is designed to be a low level wrapper, and is close to the Speos gRPC APIs.\n\nWith the Kernel layer, users need to understand the notion about Template and Instances. Refer to the SpeosRPC server documentation on the Developer portal, Speos section to get a full understanding.\n\nThe Kernel layer is recommended for experienced users only."},{"objectID":"Home","href":"api/ansys/speos/core/workflow/index.html#the-workflow-package","title":"The workflow package","text":"The workflow package\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/index.html#summary","title":"The workflow package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ncombine_speos\n\nImport geometries and materials from several SPEOS files to a project.\n\nopen_result\n\nOpen one of the possible results generated out of the simulation.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/index.html#description","title":"The workflow package > Description","text":"Description\n\nPySpeos workflow gathers functionality to use Speos capabilities in advanced ways."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobStub.html#jobstub","title":"JobStub","text":"JobStub\n\n\n\nclass ansys.speos.core.kernel.job.JobStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for job.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a JobStub is to retrieve it from SpeosClient via jobs() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> job_db = speos.client.jobs()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobStub.html#overview","title":"JobStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobStub.html#import-detail","title":"JobStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobStub.html#method-detail","title":"JobStub > Method detail","text":"Method detail\n\n\n\nJobStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\njob.Job\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.job.JobLink\n\nLink object created.\n\n\n\nJobStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to read.\n\nReturns\n\njob.Job\n\nDatamodel of the entry.\n\n\n\nJobStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to update.\n\ndata\n\njob.Job\n\nNew datamodel for the entry.\n\n\n\nJobStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to delete.\n\n\n\nJobStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.job.JobLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Photometric.html#photometric","title":"Photometric","text":"Photometric\n\n\n\nclass ansys.speos.core.sensor.Sensor3DIrradiance.Photometric(sensor_type_photometric, default_values=True, stable_ctr=True)\n\nClass computing the luminous intensity (in cd).\n\nGenerate an extended map for Virtual Photometric Lab.\n\nParameters\n\nilluminance_type\n\nansys.api.speos.sensor.v1.sensor_pb2.TypePhotometric\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_photometric (ansys.api.speos.sensor.v1.sensor_pb2.TypePhotometric)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Photometric.html#overview","title":"Photometric > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_integration_planar\n\nSet integration planar.\n\nset_integration_radial\n\nSet integration radial."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Photometric.html#import-detail","title":"Photometric > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Photometric.html#method-detail","title":"Photometric > Method detail","text":"Method detail\n\n\n\nPhotometric.set_integration_planar()\n\nSet integration planar.\n\nReturns\n\nSensor3DIrradiance.Measures\n\nmeasured defines transmission, reflection, absorption\n\n\n\nPhotometric.set_integration_radial()\n\nSet integration radial."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#exitancevariable","title":"ExitanceVariable","text":"ExitanceVariable\n\n\n\nclass ansys.speos.core.source.SourceSurface.ExitanceVariable(exitance_variable, exitance_variable_props, default_values=True, stable_ctr=False)\n\nType of surface source existence : existence variable.\n\nParameters\n\nexitance_variable\n\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface.\n\n\n\nExitanceVariable\n\nExistence variable to complete.\n\nexitance_variable_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.\n\n\n\nSurfaceProperties.ExitanceVariableProperties\n\nExistence variable properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_exitance_variable method available in\nSource classes."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#overview","title":"ExitanceVariable > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_xmp_file_uri\n\nSet existence xmp file.\n\nset_axis_plane\n\nSet position of the existence map."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#import-detail","title":"ExitanceVariable > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#method-detail","title":"ExitanceVariable > Method detail","text":"Method detail\n\n\n\nExitanceVariable.set_xmp_file_uri(uri)\n\nSet existence xmp file.\n\nParameters\n\nuri\n\npython:str\n\nXMP file describing existence.\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface source.\n\n\n\nExitanceVariable.set_axis_plane(axis_plane=None)\n\nSet position of the existence map.\n\nParameters\n\naxis_plane\n\nOptional[List[python:float]]\n\nPosition of the existence map [Ox Oy Oz Xx Xy Xz Yx Yy Yz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0].\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface Source."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#bxdfdatapoint","title":"BxdfDatapoint","text":"BxdfDatapoint\n\n\n\nclass ansys.speos.core.bsdf.BxdfDatapoint(is_brdf, incident_angle, theta_values, phi_values, bxdf, tis=1, anisotropy=0, wavelength=555)\n\nClass to store a BxDF data point.\n\nParameters\n\nis_brdf\n\nbool\n\ntrue for transmittive date, False for reflective\n\nincident_angle\n\npython:float\n\nincident angle in radian\n\ntheta_values\n\nCollection[python:float]\n\nlist of theta values for the bxdf data matrix, in radian\n\nphi_values\n\nCollection[python:float]\n\nlist of phi values for the bxdf data matrix, in radian\n\nbxdf\n\nCollection[python:float]\n\nnested list of bxdf values in 1/sr\n\nanisotropy\n\npython:float\n\nAnisotropy angle in radian\n\nwavelength\n\npython:float\n\nWavelength in nm\n\nParameters\n\nis_brdf (bool)\n\nincident_angle (float)\n\ntheta_values (collections.abc.Collection[float])\n\nphi_values (collections.abc.Collection[float])\n\nbxdf (collections.abc.Collection[float])\n\ntis (float)\n\nanisotropy (float)\n\nwavelength (float)"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#overview","title":"BxdfDatapoint > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nRetrieve any information from the BxdfDatapoint object.\n\nset_incident_angle\n\nAllow to set an incident value in degree.\n\nProperties\n\n\n\n\n\nis_brdf\n\nType of bxdf data point eitehr reflective or transmittive.\n\nincident_angle\n\nIncident angle of the Datapoint in radian.\n\nanisotropy\n\nAnisotropy angels of Datapoint.\n\ntheta_values\n\nList of theta values for which values are stored in bxdf data.\n\nphi_values\n\nList of phi values  for which values are stored in bxdf data.\n\nbxdf\n\nBxDF data as np matrix in 1/sr.\n\nAttributes\n\n\n\n\n\ntis\n\n\n\nwavelength\n\n\n\nSpecial methods\n\n\n\n\n\n__str__\n\nCreate string representation of a RayPath."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#import-detail","title":"BxdfDatapoint > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#property-detail","title":"BxdfDatapoint > Property detail","text":"Property detail\n\n\n\nproperty BxdfDatapoint.is_brdf\n\nType of bxdf data point eitehr reflective or transmittive.\n\nReturns\n\nbool:\n\ntrue if reflective false if transmittive\n\n\n\nproperty BxdfDatapoint.incident_angle\n\nIncident angle of the Datapoint in radian.\n\nReturns\n\nfloat:\n\nIncidence angle in radian\n\n\n\nproperty BxdfDatapoint.anisotropy\n\nAnisotropy angels of Datapoint.\n\n\n\nproperty BxdfDatapoint.theta_values\n\nList of theta values for which values are stored in bxdf data.\n\n\n\nproperty BxdfDatapoint.phi_values\n\nList of phi values  for which values are stored in bxdf data.\n\n\n\nproperty BxdfDatapoint.bxdf: numpy.array\n\nBxDF data as np matrix in 1/sr.\n\nReturns\n\nnp.array:\n\nbxdf data in shape theta_values, phi_values"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#attribute-detail","title":"BxdfDatapoint > Attribute detail","text":"Attribute detail\n\n\n\nBxdfDatapoint.tis = 1\n\n\n\n\n\nBxdfDatapoint.wavelength = 555\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BxdfDatapoint.html#method-detail","title":"BxdfDatapoint > Method detail","text":"Method detail\n\n\n\nBxdfDatapoint.get(key='')\n\nRetrieve any information from the BxdfDatapoint object.\n\nParameters\n\nkey\n\npython:str\n\nName of the property.\n\nReturns\n\nproperty\n\nValues/content of the associated property.\n\n\n\nBxdfDatapoint.__str__()\n\nCreate string representation of a RayPath.\n\n\n\nBxdfDatapoint.set_incident_angle(value, is_deg=True)\n\nAllow to set an incident value in degree.\n\nParameters\n\nvalue\n\npython:float\n\nvalue to be set\n\nis_deg\n\nbool\n\nAllows to define if value is radian or degree"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorIrradiance.html#sensorirradiance","title":"SensorIrradiance","text":"SensorIrradiance\n\n\n\nclass ansys.speos.core.sensor.SensorIrradiance(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Irradiance.\n\nBy default, regarding inherent characteristics, an irradiance sensor of type photometric and\nilluminance type planar is chosen. By default, regarding properties, an axis system is\nselected to position the sensor, no layer separation and no ray file generation are chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorIrradiance.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorIrradiance.html#overview","title":"SensorIrradiance > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_dimensions\n\nSet the dimensions of the sensor.\n\nset_type_photometric\n\nSet type photometric.\n\nset_type_colorimetric\n\nSet type colorimetric.\n\nset_type_radiometric\n\nSet type radiometric.\n\nset_type_spectral\n\nSet type spectral.\n\nset_illuminance_type_planar\n\nSet illuminance type planar.\n\nset_illuminance_type_radial\n\nSet illuminance type radial.\n\nset_illuminance_type_hemispherical\n\nSet illuminance type hemispherical.\n\nset_illuminance_type_cylindrical\n\nSet illuminance type cylindrical.\n\nset_illuminance_type_semi_cylindrical\n\nSet illuminance type semi cylindrical.\n\nset_axis_system\n\nSet position of the sensor.\n\nset_ray_file_type_none\n\nSet no ray file generation.\n\nset_ray_file_type_classic\n\nSet ray file generation without polarization data.\n\nset_ray_file_type_polarization\n\nSet ray file generation with the polarization data for each ray.\n\nset_ray_file_type_tm25\n\nSet ray file generation: a .tm25ray file with polarization data for each ray.\n\nset_ray_file_type_tm25_no_polarization\n\nSet ray file generation: a .tm25ray file without polarization data.\n\nset_layer_type_none\n\nDefine layer separation type as None.\n\nset_layer_type_source\n\nDefine layer separation as by source.\n\nset_layer_type_face\n\nDefine layer separation as by face.\n\nset_layer_type_sequence\n\nDefine layer separation as by sequence.\n\nset_layer_type_polarization\n\nDefine layer separation as by polarization.\n\nset_layer_type_incidence_angle\n\nDefine layer separation as by incidence angle.\n\nset_output_face_geometries\n\nSelect output faces for inverse simulation optimization.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing irradiance sensor visualization data.\n\ndimensions\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\ntype\n\nType of sensor.\n\ncolorimetric\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nspectral\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nlayer\n\nProperty containing all options in regard to the layer separation properties."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorIrradiance.html#import-detail","title":"SensorIrradiance > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorIrradiance.html#property-detail","title":"SensorIrradiance > Property detail","text":"Property detail\n\n\n\nproperty SensorIrradiance.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing irradiance sensor visualization data.\n\nReturns\n\nBaseSensor.VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature faces, coordinate_systems.\n\n\n\nproperty SensorIrradiance.dimensions: BaseSensor\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nInstance of Dimensions Class for this sensor feature\n\n\n\nproperty SensorIrradiance.type: str\n\nType of sensor.\n\nReturns\n\npython:str\n\nSensor type as string\n\n\n\nproperty SensorIrradiance.colorimetric: None | BaseSensor\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nReturns\n\nUnion[python:None, ansys.speos.core.sensor.BaseSensor.Colorimetric]\n\nInstance of Colorimetric Class for this sensor feature\n\n\n\nproperty SensorIrradiance.spectral: None | BaseSensor\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nReturns\n\nUnion[python:None, ansys.speos.core.sensor.BaseSensor.Spectral]\n\nInstance of Spectral Class for this sensor feature\n\n\n\nproperty SensorIrradiance.layer: None | SensorIrradiance | BaseSensor | BaseSensor | BaseSensor\n\nProperty containing all options in regard to the layer separation properties.\n\nReturns\n\nUnion[            python:None,            ansys.speos.core.sensor.SensorIrradiance,            ansys.speos.core.sensor.BaseSensor.LayerTypeFace,            ansys.speos.core.sensor.BaseSensor.LayerTypeSequence,            ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle        ]\n\nInstance of Layertype Class for this sensor feature"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorIrradiance.html#method-detail","title":"SensorIrradiance > Method detail","text":"Method detail\n\n\n\nSensorIrradiance.set_dimensions()\n\nSet the dimensions of the sensor.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimension class\n\n\n\nSensorIrradiance.set_type_photometric()\n\nSet type photometric.\n\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor\n\n\n\nSensorIrradiance.set_type_colorimetric()\n\nSet type colorimetric.\n\nThe sensor will generate color results without any spectral data or layer separation\nin lx or W//m2.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nColorimetric type.\n\n\n\nSensorIrradiance.set_type_radiometric()\n\nSet type radiometric.\n\nThe sensor considers the entire spectrum and gets the results in W/m2.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_type_spectral()\n\nSet type spectral.\n\nThe sensor will generate color results and spectral data separated by wavelength\nin lx or W/m2.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nSpectral type.\n\n\n\nSensorIrradiance.set_illuminance_type_planar(integration_direction=None)\n\nSet illuminance type planar.\n\nParameters\n\nintegration_direction\n\nList[python:float], optional\n\nSensor global integration direction [x,y,z].\nThe integration direction must be set in the anti-rays direction to integrate their\nsignal.\nBy default, None. None means that the Z axis of axis_system is taken.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\nNotes\n\nContrary to any visualization of integration directions within Speos Software or its\ndocumentation, the integration direction must be set in the anti-rays direction to integrate\ntheir signal.\n\n\n\nSensorIrradiance.set_illuminance_type_radial()\n\nSet illuminance type radial.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_illuminance_type_hemispherical()\n\nSet illuminance type hemispherical.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_illuminance_type_cylindrical()\n\nSet illuminance type cylindrical.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_illuminance_type_semi_cylindrical(integration_direction=None)\n\nSet illuminance type semi cylindrical.\n\nParameters\n\nintegration_direction\n\nList[python:float], optional\n\nSensor global integration direction [x,y,z].\nBy default, None. None means that the Z axis of axis_system is taken.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_axis_system(axis_system=None)\n\nSet position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_ray_file_type_none()\n\nSet no ray file generation.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_ray_file_type_classic()\n\nSet ray file generation without polarization data.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_ray_file_type_polarization()\n\nSet ray file generation with the polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_ray_file_type_tm25()\n\nSet ray file generation: a .tm25ray file with polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_ray_file_type_tm25_no_polarization()\n\nSet ray file generation: a .tm25ray file without polarization data.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n\n\nSensorIrradiance.set_layer_type_none()\n\nDefine layer separation type as None.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nirradiance class instance\n\n\n\nSensorIrradiance.set_layer_type_source()\n\nDefine layer separation as by source.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nirradiance class instance\n\n\n\nSensorIrradiance.set_layer_type_face()\n\nDefine layer separation as by face.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace property instance\n\n\n\nSensorIrradiance.set_layer_type_sequence()\n\nDefine layer separation as by sequence.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence property instance\n\n\n\nSensorIrradiance.set_layer_type_polarization()\n\nDefine layer separation as by polarization.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance class instance\n\n\n\nSensorIrradiance.set_layer_type_incidence_angle()\n\nDefine layer separation as by incidence angle.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle property instance\n\n\n\nSensorIrradiance.set_output_face_geometries(geometries=None)\n\nSelect output faces for inverse simulation optimization.\n\nParameters\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nList of geometries that will be considered as output faces.\nBy default, [], ie no output faces.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor."},{"objectID":"Home","href":"api/ansys/speos/core/speos/index.html#the-speospy-module","title":"The speos.py module","text":"The speos.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/speos/index.html#summary","title":"The speos.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSpeos\n\nAllows the Speos session (client) to interact with the SpeosRPC server.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/speos/index.html#description","title":"The speos.py module > Description","text":"Description\n\nProvides the Speos class."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceLink.html#facelink","title":"FaceLink","text":"FaceLink\n\n\n\nclass ansys.speos.core.kernel.face.FaceLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for job in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.face.FaceStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the face in the database.\n\nParameters\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceLink.html#overview","title":"FaceLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the face."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceLink.html#import-detail","title":"FaceLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceLink.html#method-detail","title":"FaceLink > Method detail","text":"Method detail\n\n\n\nFaceLink.__str__()\n\nReturn the string representation of the face.\n\n\n\nFaceLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nface.Face\n\nFace datamodel.\n\n\n\nFaceLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nface.Face\n\nNew Face datamodel.\n\n\n\nFaceLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceLuminaire.html#sourceluminaire","title":"SourceLuminaire","text":"SourceLuminaire\n\n\n\nclass ansys.speos.core.source.SourceLuminaire(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nLuminaireSource.\n\nBy default, a flux from intensity file is chosen, with an incandescent spectrum.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceLuminaire.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceLuminaire.html#overview","title":"SourceLuminaire > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_flux_from_intensity_file\n\nTake flux from intensity file provided.\n\nset_flux_luminous\n\nSet luminous flux.\n\nset_flux_radiant\n\nSet radiant flux.\n\nset_intensity_file_uri\n\nSet intensity file.\n\nset_spectrum\n\nSet spectrum.\n\nset_axis_system\n\nSet the position of the source.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing Luminaire source visualization data."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceLuminaire.html#import-detail","title":"SourceLuminaire > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceLuminaire.html#property-detail","title":"SourceLuminaire > Property detail","text":"Property detail\n\n\n\nproperty SourceLuminaire.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing Luminaire source visualization data.\n\nReturns\n\n_VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature rays, coordinate_systems."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceLuminaire.html#method-detail","title":"SourceLuminaire > Method detail","text":"Method detail\n\n\n\nSourceLuminaire.set_flux_from_intensity_file()\n\nTake flux from intensity file provided.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n\n\nSourceLuminaire.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n\n\nSourceLuminaire.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n\n\nSourceLuminaire.set_intensity_file_uri(uri)\n\nSet intensity file.\n\nParameters\n\nuri\n\npython:str\n\nIES or EULUMDAT format file uri.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n\n\nSourceLuminaire.set_spectrum()\n\nSet spectrum.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n\n\nSourceLuminaire.set_axis_system(axis_system=None)\n\nSet the position of the source.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source."},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/GeoRef.html#georef","title":"GeoRef","text":"GeoRef\n\n\n\nclass ansys.speos.core.geo_ref.GeoRef(name, description, metadata)\n\nRepresent a CAD object.\n\nParameters\n\nname (str)\n\ndescription (str)\n\nmetadata (Mapping[str, str])"},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/GeoRef.html#overview","title":"GeoRef > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_native_link\n\nConvert to a native link.\n\nAttributes\n\n\n\n\n\nname\n\n\n\ndescription\n\n\n\nmetadata\n\n\n\nStatic methods\n\n\n\n\n\nfrom_native_link\n\nConvert a native link to a GeoRef."},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/GeoRef.html#import-detail","title":"GeoRef > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/GeoRef.html#attribute-detail","title":"GeoRef > Attribute detail","text":"Attribute detail\n\n\n\nGeoRef.name\n\n\n\n\n\nGeoRef.description\n\n\n\n\n\nGeoRef.metadata\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/GeoRef.html#method-detail","title":"GeoRef > Method detail","text":"Method detail\n\n\n\nstatic GeoRef.from_native_link(geopath)\n\nConvert a native link to a GeoRef.\n\nParameters\n\ngeopath\n\npython:str\n\nGeometry path.\n\nReturns\n\nGeoRef\n\n\n\n\n\nGeoRef.to_native_link()\n\nConvert to a native link.\n\nReturns\n\npython:str\n\nGeometry path."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/index.html#the-bodypy-module","title":"The body.py module","text":"The body.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/index.html#summary","title":"The body.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBodyLink\n\nLink object for a body in database.\n\nBodyStub\n\nDatabase interactions for body.\n\nAttributes\n\n\n\n\n\nProtoBody\n\nBody protobuf class : ansys.api.speos.part.v1.body_pb2.Body\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/index.html#description","title":"The body.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/index.html#module-detail","title":"The body.py module > Module detail","text":"Module detail\n\n\n\nbody.ProtoBody\n\nBody protobuf class : ansys.api.speos.part.v1.body_pb2.Body"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the PySpeos project."},{"objectID":"Release notes","href":"changelog.html#063---september-18-2025","title":"Release notes > 0.6.3 - September 18, 2025","text":"0.6.3 - September 18, 2025\n\nFixed\n\n\n\n\n\nAppend not supported scene data instance\n\n#727\n\nAppend not supported scene data instance (#727)\n\n#730\n\nMaintenance\n\n\n\n\n\nAdapt docker run command for 25R2 sp2\n\n#722\n\nAdapt docker run 25 r2sp2\n\n#729\n\nAdapt docker run 25 r2sp2 (#729)\n\n#731"},{"objectID":"Release notes","href":"changelog.html#062---september-11-2025","title":"Release notes > 0.6.2 - September 11, 2025","text":"0.6.2 - September 11, 2025\n\nDocumentation\n\n\n\n\n\nAdd HTML context metadata\n\n#718\n\nMaintenance\n\n\n\n\n\nPre-commit autoupdate\n\n#716\n\nUpdate CHANGELOG for v0.6.1\n\n#720"},{"objectID":"Release notes","href":"changelog.html#061---september-11-2025","title":"Release notes > 0.6.1 - September 11, 2025","text":"0.6.1 - September 11, 2025\n\nDependencies\n\n\n\n\n\nUpdate grpcio requirement from <1.71,>=1.50.0 to >=1.50.0,<1.73 in the grpc-deps group\n\n#617\n\nBump the jupyter-deps group across 1 directory with 2 updates\n\n#659, #700\n\nUpdate pyvista requirement from <0.46,>=0.40.0 to >=0.40.0,<0.47 in the graphics-deps group\n\n#695\n\nUpdate pyvista[jupyter] requirement from <0.46,>=0.43 to >=0.43,<0.47\n\n#697\n\nUpdate grpcio requirement from <1.73,>=1.50.0 to >=1.50.0,<1.75 in the grpc-deps group\n\n#698\n\nInstall comtypes only for windows\n\n#704\n\nBump the test-deps group with 2 updates\n\n#714\n\nBump the doc-deps group across 1 directory with 5 updates\n\n#715\n\nDocumentation\n\n\n\n\n\nUpdate readme, support features info\n\n#670\n\nFixed\n\n\n\n\n\nSubpart commit modified to work when updating an existing subpart\n\n#664\n\nChange default version to 252\n\n#687\n\nHandle specificities of new server 25R2 SP1 and backward compatibility with previous servers.\n\n#717\n\nMaintenance\n\n\n\n\n\nPre-commit autoupdate\n\n#638, #689, #707\n\nUpdate changelog for v0.6.0\n\n#665\n\nUpdate docker tag to 252 for doc stage\n\n#668\n\nBump ansys/actions from 10.0.12 to 10.0.13\n\n#674\n\nPin vtk-osmesa version\n\n#675\n\nBump docker/login-action from 3.4.0 to 3.5.0\n\n#692\n\nBump ansys/actions from 10.0.13 to 10.0.14\n\n#693\n\nBump actions/download-artifact from 4.3.0 to 5.0.0\n\n#694\n\nBump actions/checkout from 4.2.2 to 5.0.0\n\n#701\n\nBump codecov/codecov-action from 5.4.3 to 5.5.0\n\n#702\n\nBump pypa/gh-action-pypi-publish from 1.12.4 to 1.13.0\n\n#709\n\nBump actions/labeler from 5.0.0 to 6.0.1\n\n#710\n\nBump actions/setup-python from 5.6.0 to 6.0.0\n\n#711\n\nBump codecov/codecov-action from 5.5.0 to 5.5.1\n\n#712\n\nBump ansys/actions from 10.0.14 to 10.0.20\n\n#713\n\nTest\n\n\n\n\n\nCore - sub part - check that modifying sub part’s axis system i…\n\n#671"},{"objectID":"Release notes","href":"changelog.html#060---july-15-2025","title":"Release notes > 0.6.0 - July 15, 2025","text":"0.6.0 - July 15, 2025\n\nAdded\n\n\n\n\n\nKernel - facestub - add create_batch and read_batch methods\n\n#369\n\nenhance the project preview: luminaire, surface, rayfile\n\n#561\n\nlightexpert\n\n#592\n\nAdd 3d irradiance\n\n#595\n\nAdd version warnings\n\n#608\n\nSpectralbsdf\n\n#614\n\nAdd method to export simulation\n\n#629\n\nAdd natural light\n\n#633\n\nAdd export result as vtp files\n\n#643\n\nAdd cad visual data property\n\n#661\n\nDependencies\n\n\n\n\n\nbump ansys-api-speos from 0.14.2 to 0.15.2\n\n#589\n\nbump the doc-deps group with 3 updates\n\n#604\n\nbump notebook from 7.4.2 to 7.4.3 in the jupyter-deps group across 1 directory\n\n#609\n\nBump ansys-sphinx-theme from 1.5.0 to 1.5.2 in the doc-deps group\n\n#616\n\nBump pytest from 8.3.5 to 8.4.0 in the test-deps group\n\n#618\n\nBump pytest-cov from 6.1.1 to 6.2.1 in the test-deps group\n\n#623\n\nBump pytest from 8.4.0 to 8.4.1 in the test-deps group\n\n#637\n\nDocumentation\n\n\n\n\n\nAdd badges into readme.rst\n\n#610\n\nAdjust missing examples\n\n#612\n\nFixed\n\n\n\n\n\nadd message size to nighly ci\n\n#600\n\nOnly reset the _visual_data when graphics_available is true\n\n#621\n\nRead empty mesh when no body at root and subpart.1\n\n#632\n\nDuplicated feature that is already inside the _features list\n\n#636\n\n640 camera with distortion v2 to v4\n\n#644\n\nSim export_unittest for windows\n\n#655\n\nKernel - faceactions - check if batch is available on server - if available use batch project _fill_bodies\n\n#656\n\nPrint of protobuf messages containing special characters\n\n#663\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.5.0\n\n#597\n\nbump dev version into v0.6.dev0\n\n#598\n\npre-commit autoupdate\n\n#599\n\nupdate CHANGELOG for v0.5.1\n\n#602\n\nbump ansys/actions from 9.0.11 to 9.0.13\n\n#606\n\nPre-commit autoupdate\n\n#611, #619\n\nBump ansys/actions into v10.0.3\n\n#613\n\nBump ansys/actions from 10.0.3 to 10.0.8\n\n#615\n\nBump ansys/actions from 10.0.8 to 10.0.11\n\n#622\n\nUpdate dependabot cfg and code owners\n\n#627\n\nBump ansys/actions from 10.0.11 to 10.0.12\n\n#649\n\nTest\n\n\n\n\n\nAdd several tests for file transfer api\n\n#652"},{"objectID":"Release notes","href":"changelog.html#051---may-28-2025","title":"Release notes > 0.5.1 - May 28, 2025","text":"0.5.1 - May 28, 2025\n\nFixed\n\n\n\n\n\ncoding error, switch to correct order\n\n#601"},{"objectID":"Release notes","href":"changelog.html#050---may-26-2025","title":"Release notes > 0.5.0 - May 26, 2025","text":"0.5.0 - May 26, 2025\n\nAdded\n\n\n\n\n\ngeopath property\n\n#551\n\nbsdf\n\n#581\n\nDependencies\n\n\n\n\n\nupdate protobuf requirement from <6,>=3.20 to >=3.20,<7 in the grpc-deps group\n\n#500\n\nupdate pyvista requirement from <0.45,>=0.40.0 to >=0.40.0,<0.46\n\n#562\n\nupdate pyvista[jupyter] requirement from <0.45,>=0.43 to >=0.43,<0.46\n\n#563\n\nbump notebook from 7.3.3 to 7.4.1\n\n#566\n\nbump the doc-deps group across 1 directory with 2 updates\n\n#571\n\nbump notebook from 7.4.1 to 7.4.2 in the jupyter-deps group\n\n#584\n\nbump the doc-deps group across 1 directory with 3 updates\n\n#587\n\nDocumentation\n\n\n\n\n\nUpdate CONTRIBUTORS.md with the latest contributors\n\n#568\n\nimprove project example\n\n#572\n\nAdjust prism example to new style\n\n#576\n\nadjust part.py example to match new style\n\n#580\n\nFixed\n\n\n\n\n\nIntegration direction display and adjust docstrings\n\n#570\n\nunittest update based on bug 1229712\n\n#579\n\nMaintenance\n\n\n\n\n\npre-commit autoupdate\n\n#552, #578, #585, #591\n\nupdate CHANGELOG for v0.4.0\n\n#558\n\nbump dev version\n\n#559\n\nbump ansys/actions from 9.0.2 to 9.0.6 in the actions group\n\n#560\n\nbump the actions group with 2 updates\n\n#567\n\nbump ansys action version with quarto fix\n\n#573\n\nupdate dependabot configuration\n\n#574\n\nupdate code owners\n\n#577\n\nbump ansys/actions from 9.0.7 to 9.0.9\n\n#582\n\nbump codecov/codecov-action from 5.4.2 to 5.4.3\n\n#590\n\nbump ansys/actions from 9.0.9 to 9.0.11\n\n#596\n\nMiscellaneous\n\n\n\n\n\nimprove type hints\n\n#564"},{"objectID":"Release notes","href":"changelog.html#040---april-17-2025","title":"Release notes > 0.4.0 - April 17, 2025","text":"0.4.0 - April 17, 2025\n\nAdded\n\n\n\n\n\nFeat/add local launcher\n\n#454\n\nadd screenshot in pyvista related methods\n\n#521\n\nenhance the project preview: irrad, rad, camera sensor features\n\n#528\n\nswitch to ansys tools and decouple requirements\n\n#532\n\nDependencies\n\n\n\n\n\nbump ansys-sphinx-theme from 1.3.3 to 1.4.2 in the doc-deps group\n\n#524\n\nbump pytest-cov from 6.0.0 to 6.1.0\n\n#533\n\nbump pytest-cov from 6.1.0 to 6.1.1\n\n#542\n\nbump psutil from 6.1.1 to 7.0.0\n\n#555\n\nDocumentation\n\n\n\n\n\nUpdate example combine-speos.py\n\n#499\n\nopen-results adjustments\n\n#538\n\nadjust source example\n\n#543\n\nadjust simulation example\n\n#545\n\nremote instance\n\n#553\n\nadjust sensor.py example\n\n#554\n\nFixed\n\n\n\n\n\nissue with nightly pipeline\n\n#534\n\nGraphs not showing with Ansys visualizer\n\n#537\n\nimprove examples and tests due to more errors raised by the new SpeosRPC server\n\n#546\n\nMaintenance\n\n\n\n\n\nremove code-style job to use precommit.ci\n\n#523\n\nupdate CHANGELOG for v0.3.0\n\n#525\n\nbump dev version into v0.4.dev0\n\n#526\n\npre-commit autoupdate\n\n#529, #541\n\nbump ansys/actions from 8 to 9 in the actions group\n\n#544\n\nRename CONTRUBUTORS.md to CONTRIBUTORS.md\n\n#548\n\nremove strong upper bound on build dep\n\n#549\n\npin actions version with full commit hash\n\n#557"},{"objectID":"Release notes","href":"changelog.html#030---march-28-2025","title":"Release notes > 0.3.0 - March 28, 2025","text":"0.3.0 - March 28, 2025\n\nAdded\n\n\n\n\n\nprovide a way for the user to limit number of threads\n\n#508\n\nDependencies\n\n\n\n\n\nbump pytest from 8.3.4 to 8.3.5\n\n#484\n\nbump the doc-deps group across 1 directory with 4 updates\n\n#509\n\nbump notebook from 7.3.2 to 7.3.3\n\n#510\n\nDocumentation\n\n\n\n\n\nfix 404 page when download example as python script\n\n#514\n\nadd example assets button\n\n#518\n\nfix path to download assets\n\n#522\n\nFixed\n\n\n\n\n\ncore layer loading a camera sensor\n\n#503\n\ndoc: Adjust server launch command\n\n#505\n\nMaintenance\n\n\n\n\n\nupdate CHANGELOG for v0.2.0\n\n#490\n\nupdate CHANGELOG for v0.2.1\n\n#492\n\nMiscellaneous\n\n\n\n\n\nremove ruff E ignores\n\n#495\n\nremove ruff ignores F\n\n#506\n\nruff n\n\n#507\n\nruff TD002, TD003\n\n#512"},{"objectID":"Release notes","href":"changelog.html#021---march-06-2025","title":"Release notes > 0.2.1 - March 06, 2025","text":"0.2.1 - March 06, 2025\n\nFixed\n\n\n\n\n\nadd mandatory token to release-github\n\n#491"},{"objectID":"Release notes","href":"changelog.html#020---march-06-2025","title":"Release notes > 0.2.0 - March 06, 2025","text":"0.2.0 - March 06, 2025\n\nDocumentation\n\n\n\n\n\ndocumentation review changes\n\n#483\n\nFixed\n\n\n\n\n\nadd missing notebook dependency\n\n#488\n\nMaintenance\n\n\n\n\n\nadd project required info\n\n#470\n\nupdate CHANGELOG for v0.1.1\n\n#473\n\nupdate organization name\n\n#486\n\nMiscellaneous\n\n\n\n\n\nremove ignores for PTH\n\n#474\n\nRemove ruff ignore for “D”, pydocstyle\n\n#482"},{"objectID":"Release notes","href":"changelog.html#011---2025-02-25","title":"Release notes > 0.1.1 - 2025-02-25","text":"0.1.1 - 2025-02-25"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nupdate CHANGELOG for v0.1.0 #471\n\nbump dev version into v0.2.dev0 #472"},{"objectID":"Release notes","href":"changelog.html#010---2025-02-24","title":"Release notes > 0.1.0 - 2025-02-24","text":"0.1.0 - 2025-02-24"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbump the doc-deps group across 1 directory with 4 updates #452"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nDocumentation review #455\n\nfix broken inner links #465\n\nfix make.bat clean call #466"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nmissing get method for optical properties #434\n\nexamples local run path was incorrect #451"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nadd new jobs and cleanup workflows #425\n\ngeneral update/addition of files at project root level #427\n\nupdate python versions and dependencies #443\n\nadd nightly workflow #444\n\nupdate code owners #448\n\nupdate labeler #456\n\ncleanup repo #459"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\navoid mutable value as default value in function #436\n\nupdate architecture #445\n\nremove docker compose and update doc #449\n\nuse __getitem__ in SpeosClient #461\n\nthe core sensor, source, simulation class name #462"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/SpeosClient.html#speosclient","title":"SpeosClient","text":"SpeosClient\n\n\n\nclass ansys.speos.core.kernel.client.SpeosClient(host=DEFAULT_HOST, port=DEFAULT_PORT, version=DEFAULT_VERSION, channel=None, message_size=MAX_CLIENT_MESSAGE_SIZE, remote_instance=None, timeout=60, logging_level=logging.INFO, logging_file=None, speos_install_path=None)\n\nWraps a speos gRPC connection.\n\nParameters\n\nhost\n\npython:str, optional\n\nHost where the server is running.\nBy default, DEFAULT_HOST.\n\nport\n\nUnion[python:str, python:int], optional\n\nPort number where the server is running.\nBy default, DEFAULT_PORT.\n\nchannel\n\nChannel, optional\n\ngRPC channel for server communication.\nBy default, None.\n\nmessage_size: int\n\nMaximum Message size of a newly generated channel\nBy default, MAX_CLIENT_MESSAGE_SIZE.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance\n\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\n\ntimeout\n\nReal, optional\n\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\n\nlogging_level\n\npython:int, optional\n\nThe logging level to be applied to the client.\nBy default, INFO.\n\nlogging_file\n\nOptional[python:str, Path]\n\nThe file to output the log, if requested. By default, None.\n\nspeos_install_path\n\nOptional[python:str, Path]\n\nlocation of Speos rpc executable\n\nParameters\n\nhost (Optional[str])\n\nport (Union[str, int])\n\nversion (str)\n\nchannel (Optional[grpc.Channel])\n\nmessage_size (int)\n\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\n\ntimeout (Optional[int])\n\nlogging_level (Optional[int])\n\nlogging_file (Optional[Union[pathlib.Path, str]])\n\nspeos_install_path (Optional[Union[pathlib.Path, str]])"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/SpeosClient.html#overview","title":"SpeosClient > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ntarget\n\nGet the target of the channel.\n\nfaces\n\nGet face database access.\n\nbodies\n\nGet body database access.\n\nparts\n\nGet part database access.\n\nsop_templates\n\nGet sop template database access.\n\nvop_templates\n\nGet vop template database access.\n\nspectrums\n\nGet spectrum database access.\n\nintensity_templates\n\nGet intensity template database access.\n\nsource_templates\n\nGet source template database access.\n\nsensor_templates\n\nGet sensor template database access.\n\nsimulation_templates\n\nGet simulation template database access.\n\nscenes\n\nGet scene database access.\n\njobs\n\nGet job database access.\n\nget_items\n\nGet items from keys.\n\nclose\n\nClose the channel.\n\nProperties\n\n\n\n\n\nchannel\n\nThe gRPC channel of this client.\n\nlog\n\nThe specific instance logger.\n\nhealthy\n\nReturn if the client channel if healthy.\n\nSpecial methods\n\n\n\n\n\n__getitem__\n\nGet item from key.\n\n__repr__\n\nRepresent the client as a string."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/SpeosClient.html#import-detail","title":"SpeosClient > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/SpeosClient.html#property-detail","title":"SpeosClient > Property detail","text":"Property detail\n\n\n\nproperty SpeosClient.channel: grpc.Channel\n\nThe gRPC channel of this client.\n\n\n\nproperty SpeosClient.log: ansys.speos.core.logger.PySpeosCustomAdapter\n\nThe specific instance logger.\n\n\n\nproperty SpeosClient.healthy: bool\n\nReturn if the client channel if healthy."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/SpeosClient.html#method-detail","title":"SpeosClient > Method detail","text":"Method detail\n\n\n\nSpeosClient.target()\n\nGet the target of the channel.\n\n\n\nSpeosClient.faces()\n\nGet face database access.\n\n\n\nSpeosClient.bodies()\n\nGet body database access.\n\n\n\nSpeosClient.parts()\n\nGet part database access.\n\n\n\nSpeosClient.sop_templates()\n\nGet sop template database access.\n\n\n\nSpeosClient.vop_templates()\n\nGet vop template database access.\n\n\n\nSpeosClient.spectrums()\n\nGet spectrum database access.\n\n\n\nSpeosClient.intensity_templates()\n\nGet intensity template database access.\n\n\n\nSpeosClient.source_templates()\n\nGet source template database access.\n\n\n\nSpeosClient.sensor_templates()\n\nGet sensor template database access.\n\n\n\nSpeosClient.simulation_templates()\n\nGet simulation template database access.\n\n\n\nSpeosClient.scenes()\n\nGet scene database access.\n\n\n\nSpeosClient.jobs()\n\nGet job database access.\n\n\n\nSpeosClient.__getitem__(key)\n\nGet item from key.\n\nParameters\n\nkey\n\npython:str\n\nKey of the item (also named guid).\n\nReturns\n\nUnion[ansys.speos.core.kernel.sop_template.SOPTemplateLink, ansys.speos.core.kernel.vop_template.VOPTemplateLink, ansys.speos.core.kernel.spectrum.SpectrumLink, ansys.speos.core.kernel.intensity_template.IntensityTemplateLink, ansys.speos.core.kernel.source_template.SourceTemplateLink, ansys.speos.core.kernel.sensor_template.SensorTemplateLink, ansys.speos.core.kernel.simulation_template.SimulationTemplateLink, ansys.speos.core.kernel.scene.SceneLink, ansys.speos.core.kernel.job.JobLink, ansys.speos.core.kernel.part.PartLink, ansys.speos.core.kernel.body.BodyLink, ansys.speos.core.kernel.face.FaceLink, python:None]\n\nLink object corresponding to the key - None if no objects corresponds to the key.\n\n\n\nSpeosClient.get_items(keys, item_type)\n\nGet items from keys.\n\nParameters\n\nkeys\n\nList[python:str]\n\nKeys of the items (also named guids).\n\nitem_type\n\ntype\n\nType of items expected\n\nReturns\n\nUnion[List[ansys.speos.core.kernel.sop_template.SOPTemplateLink], List[ansys.speos.core.kernel.vop_template.VOPTemplateLink], List[ansys.speos.core.kernel.spectrum.SpectrumLink], List[ansys.speos.core.kernel.intensity_template.IntensityTemplateLink], List[ansys.speos.core.kernel.source_template.SourceTemplateLink], List[ansys.speos.core.kernel.sensor_template.SensorTemplateLink], List[ansys.speos.core.kernel.simulation_template.SimulationTemplateLink], List[ansys.speos.core.kernel.scene.SceneLink], List[ansys.speos.core.kernel.job.JobLink], List[ansys.speos.core.kernel.part.PartLink], List[ansys.speos.core.kernel.body.BodyLink], List[ansys.speos.core.kernel.face.FaceLink]]\n\nList of Link objects corresponding to the keys - Empty if no objects corresponds to the\nkeys.\n\n\n\nSpeosClient.__repr__()\n\nRepresent the client as a string.\n\n\n\nSpeosClient.close()\n\nClose the channel.\n\nDo not execute this function with untrusted environment variables.\nSee the security guide for details.\n\nReturns\n\nbool\n\nInformation if the server instance was terminated.\n\nNotes\n\nIf an instance of the Speos Service was started using\nPyPIM, this instance will be deleted."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Spectral.html#spectral","title":"Spectral","text":"Spectral\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.Spectral(sensor_type_spectral, default_values=True, stable_ctr=False)\n\nType of sensor : Spectral.\n\nThis kind of sensor will generate color results and spectral data separated by wavelength\nin lx or W/m2.\nBy default, it uses a default wavelengths range.\n\nParameters\n\nsensor_type_spectral\n\nansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral\n\nSensorTypeSpectral protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_spectral (ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_spectral method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Spectral.html#overview","title":"Spectral > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_wavelengths_range\n\nSet the range of wavelengths."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Spectral.html#import-detail","title":"Spectral > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Spectral.html#method-detail","title":"Spectral > Method detail","text":"Method detail\n\n\n\nSpectral.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range."},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#moving-car-example-by-combining-speos-files","title":"Examples > Moving car example by combining Speos files","text":"Moving car example by combining Speos files\n\nThis tutorial demonstrates how to run moving car workflow use case. ## Prerequisites"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#perform-imports","title":"Examples > Moving car example by combining Speos files > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#define-constants","title":"Examples > Moving car example by combining Speos files > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#coordinate-systems","title":"Examples > Moving car example by combining Speos files > Coordinate systems","text":"Coordinate systems\n\nDefine the global coordinate systems for each of the assets.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#load-assets","title":"Examples > Moving car example by combining Speos files > Load assets","text":"Load assets\n\nAssets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#create-connection-with-speos-rpc-server","title":"Examples > Moving car example by combining Speos files > Create connection with speos rpc server","text":"Create connection with speos rpc server\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#combine-several-speos-files-into-one-project","title":"Examples > Moving car example by combining Speos files > Combine several speos files into one project","text":"Combine several speos files into one project\n\nHere we are building a project with:\n\nAn environment which is a road\n\nA blue car\n\nA red car\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#preview-the-project","title":"Examples > Moving car example by combining Speos files > Preview the project","text":"Preview the project\n\nUser can review the created/loaded project using preview method.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#complete-the-project-with-sensorsourcesimulation","title":"Examples > Moving car example by combining Speos files > Complete the project with sensor/source/simulation","text":"Complete the project with sensor/source/simulation\n\nWe are adding a camera sensor to have output results, a luminaire to have a light source.\n\nAnd, we gather the source and the sensor into a simulation (we will compute it just after)."},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#create-a-sensor","title":"Examples > Moving car example by combining Speos files > Create a sensor","text":"Create a sensor\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#create-a-source","title":"Examples > Moving car example by combining Speos files > Create a source","text":"Create a source\n\nIn this example, a luminaire source is created with an IES file.\n\nMore details on creating/editing source examples can be found in core examples.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#create-a-simulation","title":"Examples > Moving car example by combining Speos files > Create a simulation","text":"Create a simulation\n\nMore details on creating/editing simulation examples can be found in core examples.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#run-the-simulation","title":"Examples > Moving car example by combining Speos files > Run the simulation","text":"Run the simulation\n\nSimulation can be run using CPU via compute_CPU method or using GPU via compute_GPU method.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#check-and-review-result","title":"Examples > Moving car example by combining Speos files > Check and review result","text":"Check and review result\n\nOpen result (only windows)\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#modify-part","title":"Examples > Moving car example by combining Speos files > Modify part","text":"Modify part\n\nMove the part via changing the axis_system of a part.\n\naxis_system is a list of 12 float values: x, y, z, x_vect_x, x_vect_y, x_vect_z, y_vect_x, y_vect_y, y_vect_z, z_vect_x, z_vect_y, z_vect_z.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#re-run-simulation-with-the-modified-part-position","title":"Examples > Moving car example by combining Speos files > Re-run simulation with the modified part position","text":"Re-run simulation with the modified part position\n\n\n\n\n\n\n\n\n\nReview result:\n\n\n\n"},{"objectID":"Examples","href":"examples/workflow/combine-speos.html#modify-camera-property","title":"Examples > Moving car example by combining Speos files > Modify camera property","text":"Modify camera property\n\nModify the camera, e.g. focal length to 10\n\n\n\n\n\n\n\n\n\nRe-run the simulation and review result\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartLink.html#partlink","title":"PartLink","text":"PartLink\n\n\n\nclass ansys.speos.core.kernel.part.PartLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a part in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.part.PartStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the part in the database.\n\nParameters\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartLink.html#overview","title":"PartLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the part."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartLink.html#import-detail","title":"PartLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartLink.html#method-detail","title":"PartLink > Method detail","text":"Method detail\n\n\n\nPartLink.__str__()\n\nReturn the string representation of the part.\n\n\n\nPartLink.get()\n\nGet the datamodel from database.\n\nReturns\n\npart.Part\n\nPart datamodel.\n\n\n\nPartLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\npart.Part\n\nNew part datamodel.\n\n\n\nPartLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#the-loggerpy-module","title":"The logger.py module","text":"The logger.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#summary","title":"The logger.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPySpeosCustomAdapter\n\nKeeps the reference to the speos instance name dynamic.\n\nPySpeosPercentStyle\n\nCustomized PercentStyle class for overwriting default format styles.\n\nPySpeosFormatter\n\nProvides the customized Formatter class for overwriting default format styles.\n\nInstanceFilter\n\nEnsures that the instance_name record always exists.\n\nLogger\n\nProvides the logger used for each PySpeos session.\n\nFunctions\n\n\n\n\n\naddfile_handler\n\nAdd a file handler to the input.\n\nadd_stdout_handler\n\nAdd a standout handler to the logger.\n\nAttributes\n\n\n\n\n\nstring_to_loglevel\n\n\n\nConstants\n\n\n\n\n\nLOG_LEVEL\n\n\n\nFILE_NAME\n\n\n\nDEBUG\n\n\n\nINFO\n\n\n\nWARN\n\n\n\nERROR\n\n\n\nCRITICAL\n\n\n\nSTDOUT_MSG_FORMAT\n\n\n\nFILE_MSG_FORMAT\n\n\n\nDEFAULT_STDOUT_HEADER\n\n\n\nDEFAULT_FILE_HEADER\n\n\n\nNEW_SESSION_HEADER\n\n\n\nLOG\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#description","title":"The logger.py module > Description","text":"Description\n\nLogging module.\n\nThis module supplies a general framework for logging in PySpeos.  This module is\nbuilt upon logging library\nand it does not intend to replace it but rather provide a way to interact between\nlogging and pyspeos.\n\nThe loggers used in the module include the name of the instance, which\nis intended to be unique. This name is printed in all active\noutputs and is used to track the different PySpeos instances."},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#usage","title":"The logger.py module > Usage","text":"Usage"},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#global-logger","title":"The logger.py module > Global logger","text":"Global logger\n\nThere is a global logger named pyspeos_global that is created at\nansys.speos.core.__init__.  If you want to use this global logger,\nyou must call it at the top of your module:\n\nYou can also rename it to avoid conflicts with other loggers (if any):\n\nIt should be noticed that the default logging level of LOG is ERROR.\nYou can change this and output lower-level messages with:\n\nAlternatively, you can ensure all the handlers are set to the input log\nlevel with:\n\nBy default, this logger does not log to a file. If you want to do so,\nyou can add a file handler with:\n\nThis sets the logger to be redirected also to this file. If you want\nto change the characteristics of this global logger from the beginning\nof the execution, you must edit the __init__ file in the directory\nansys.speos.core.\n\nTo log using this logger, call the desired method as a normal logger with:"},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#instance-logger","title":"The logger.py module > Instance Logger","text":"Instance Logger\n\nEvery time an instance of ansys.speos.core.speos.Speos\nis created, a logger is created and stored in LOG._instances. This field is a\ndictionary where the key is the name of the created logger.\nThese instance loggers inherit the pyspeos_global output handlers and\nlogging level unless otherwise specified. The way this logger works is very\nsimilar to the global logger. If you want to add a file handler, you can use\nthe log_to_file() method. If you want\nto change the log level, you can use the logger.Logging.setLevel() method.\nYou can use this logger like this:"},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#other-loggers","title":"The logger.py module > Other loggers","text":"Other loggers\n\nYou can create your own loggers using a Python logging library as\nyou would do in any other script. There would be no conflicts between\nthese loggers."},{"objectID":"Home","href":"api/ansys/speos/core/logger/index.html#module-detail","title":"The logger.py module > Module detail","text":"Module detail\n\n\n\nlogger.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger, optional\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is \"pyspeos.log\".\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is LOG_LEVEL.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n\n\nlogger.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a standout handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\nin, optional\n\nLevel of logging. The default is 10, in which case the\n\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n\n\nlogger.LOG_LEVEL = 10\n\n\n\n\n\nlogger.FILE_NAME = 'pyspeos.log'\n\n\n\n\n\nlogger.DEBUG = 10\n\n\n\n\n\nlogger.INFO = 20\n\n\n\n\n\nlogger.WARN = 30\n\n\n\n\n\nlogger.ERROR = 40\n\n\n\n\n\nlogger.CRITICAL = 50\n\n\n\n\n\nlogger.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n\n\n\n\nlogger.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n\n\n\n\nlogger.DEFAULT_STDOUT_HEADER = Multiline-String\n\n\n\n\n\nlogger.DEFAULT_FILE_HEADER = Multiline-String\n\n\n\n\n\nlogger.NEW_SESSION_HEADER = Multiline-String\n\n\n\n\n\nlogger.LOG\n\n\n\n\n\nlogger.string_to_loglevel\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#spectrumstub","title":"SpectrumStub","text":"SpectrumStub\n\n\n\nclass ansys.speos.core.kernel.spectrum.SpectrumStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for spectrums.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SpectrumStub is to retrieve it from SpeosClient via spectrums() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> spe_db = speos.client.spectrums()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#overview","title":"SpectrumStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#import-detail","title":"SpectrumStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#method-detail","title":"SpectrumStub > Method detail","text":"Method detail\n\n\n\nSpectrumStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nspectrum.Spectrum\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object created.\n\n\n\nSpectrumStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to read.\n\nReturns\n\nspectrum.Spectrum\n\nDatamodel of the entry.\n\n\n\nSpectrumStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to update.\n\ndata\n\nspectrum.Spectrum\n\nNew datamodel for the entry.\n\n\n\nSpectrumStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to delete.\n\n\n\nSpectrumStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.spectrum.SpectrumLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/project/Project.html#project","title":"Project","text":"Project\n\n\n\nclass ansys.speos.core.project.Project(speos, path='')\n\nA project describes all Speos features.\n\nThis includes optical properties, sources, sensors, simulations that user can fill in.\nProject provides functions to create new feature, find a feature.\nIt can be created from empty or loaded from a specific file.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos session (connected to gRPC server).\n\npath\n\npython:str\n\nThe project will be loaded from this speos file.\nBy default, \"\", means create from empty.\n\nAttributes\n\nscene_link\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object for the scene in database.\n\nParameters\n\nspeos (ansys.speos.core.speos.Speos)\n\npath (Optional[Union[str, pathlib.Path]])"},{"objectID":"Home","href":"api/ansys/speos/core/project/Project.html#overview","title":"Project > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_optical_property\n\nCreate a new Optical Property feature.\n\ncreate_source\n\nCreate a new Source feature.\n\ncreate_simulation\n\nCreate a new Simulation feature.\n\ncreate_sensor\n\nCreate a new Sensor feature.\n\ncreate_root_part\n\nCreate the project root part feature.\n\nfind\n\nFind feature(s) by name (possibility to use regex) and by feature type.\n\ndelete\n\nDelete project: erase scene data.\n\nget\n\nGet dictionary corresponding to the project - read only.\n\nfind_key\n\nGet values corresponding to the key in project dictionary - read only.\n\npreview\n\nPreview cad bodies inside the project’s scene.\n\nAttributes\n\n\n\n\n\nclient\n\nSpeos instance client.\n\nscene_link\n\nLink object for the scene in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the project’s scene."},{"objectID":"Home","href":"api/ansys/speos/core/project/Project.html#import-detail","title":"Project > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/project/Project.html#attribute-detail","title":"Project > Attribute detail","text":"Attribute detail\n\n\n\nProject.client\n\nSpeos instance client.\n\n\n\nProject.scene_link\n\nLink object for the scene in database."},{"objectID":"Home","href":"api/ansys/speos/core/project/Project.html#method-detail","title":"Project > Method detail","text":"Method detail\n\n\n\nProject.create_optical_property(name, description='', metadata=None)\n\nCreate a new Optical Property feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature.\n\n\n\nProject.create_source(name, description='', feature_type=SourceSurface, metadata=None)\n\nCreate a new Source feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSource type to be created.\nBy default, ansys.speos.core.source.SourceSurface.\nAllowed types:\nUnion[ansys.speos.core.source.SourceSurface, ansys.speos.core.source.SourceRayFile,             ansys.speos.core.source.SourceLuminaire,             ansys.speos.core.source.SourceAmbientNaturalLight].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.source.SourceSurface,ansys.speos.core.source.SourceRayFile,        ansys.speos.core.source.SourceLuminaire, ansys.speos.core.source.SourceAmbientNaturalLight]\n\nSource class instance.\n\n\n\nProject.create_simulation(name, description='', feature_type=SimulationDirect, metadata=None)\n\nCreate a new Simulation feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSimulation type to be created.\nBy default, ansys.speos.core.simulation.SimulationDirect.\nAllowed types: Union[ansys.speos.core.simulation.SimulationDirect,             ansys.speos.core.simulation.SimulationInteractive,             ansys.speos.core.simulation.SimulationInverse].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.simulation.SimulationDirect,        ansys.speos.core.simulation.SimulationInteractive,        ansys.speos.core.simulation.SimulationInverse]\n\nSimulation class instance\n\n\n\nProject.create_sensor(name, description='', feature_type=SensorIrradiance, metadata=None)\n\nCreate a new Sensor feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSensor type to be created.\nBy default, ansys.speos.core.sensor.SensorIrradiance.\nAllowed types: Union[ansys.speos.core.sensor.SensorCamera,            ansys.speos.core.sensor.SensorRadiance,             ansys.speos.core.sensor.SensorIrradiance,             ansys.speos.core.sensor.Sensor3DIrradiance].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.sensor.SensorCamera,        ansys.speos.core.sensor.SensorRadiance, ansys.speos.core.sensor.SensorIrradiance,         ansys.speos.core.sensor.Sensor3DIrradiance]\n\nSensor class instance.\n\n\n\nProject.create_root_part(description='', metadata=None)\n\nCreate the project root part feature.\n\nIf a root part is already created in the project, it is returned.\n\nParameters\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n\n\nProject.find(name, name_regex=False, feature_type=None)\n\nFind feature(s) by name (possibility to use regex) and by feature type.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted features.\nMandatory to fill for geometry features.\nBy default, None, means that all features will be considered\n(except geometry features).\n\nReturns\n\nList[Union[ansys.speos.core.opt_prop.OptProp, ansys.speos.core.source.Surface,         ansys.speos.core.source.RayFile, ansys.speos.core.source.Luminaire,         ansys.speos.core.sensor.Camera,         ansys.speos.core.sensor.Radiance, ansys.speos.core.sensor.Irradiance,         ansys.speos.core.simulation.Direct, ansys.speos.core.simulation.Interactive,         ansys.speos.core.simulation.Inverse, ansys.speos.core.part.Part,         ansys.speos.core.body.Body,         ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart]]\n\nFound features.\n\nExamples\n\n>>> # From name only\n>>> find(name=\"Camera.1\")\n>>> # Specify feature type\n>>> find(name=\"Camera.1\", feature_type=ansys.speos.core.sensor.SensorCamera)\n>>> # Using regex\n>>> find(\n>>>     name=\"Camera.*\",\n>>>     name_regex=True,\n>>>     feature_type=ansys.speos.core.sensor.SensorCamera,\n>>> )\nHere some examples when looking for a geometry feature:\n(always precise feature_type)\n\n>>> # Root part\n>>> find(name=\"\", feature_type=ansys.speos.core.part.Part)\n>>> # Body in root part\n>>> find(name=\"BodyName\", feature_type=ansys.speos.core.body.Body)\n>>> # Face from body in root part\n>>> find(name=\"BodyName/FaceName\", feature_type=ansys.speos.core.face.Face)\n>>> # Sub part in root part\n>>> find(name=\"SubPartName\", feature_type=ansys.speos.core.part.Part.SubPart)\n>>> # Face in a body from sub part in root part :\n>>> find(name=\"SubPartName/BodyName/FaceName\", feature_type=ansys.speos.core.face.Face)\n>>> # Regex can be use at each level separated by \"/\"\n>>> find(name=\"Body.*/Face.*\", name_regex=True, feature_type=ansys.speos.core.face.Face)\n>>> # All faces of a specific body\n>>> find(name=\"BodyName/.*\", name_regex=True, feature_type=ansys.speos.core.face.Face)\n>>> # All geometry features at first level (whatever their type: body, face, sub part)\n>>> find(name=\".*\", name_regex=True, feature_type=ansys.speos.core.part.Part)\n\n\n\nProject.delete()\n\nDelete project: erase scene data.\n\nDelete all features contained in the project.\n\nReturns\n\nansys.speos.core.project.Project\n\nProject feature.\n\n\n\nProject.get()\n\nGet dictionary corresponding to the project - read only.\n\n\n\nProject.find_key(key)\n\nGet values corresponding to the key in project dictionary - read only.\n\nParameters\n\nkey\n\npython:str\n\nKey to search in the project dictionary.\n\nReturns\n\nList[python:tuple[python:str, python:dict]]\n\nList of matching objects containing for each its x_path and its value.\n\n\n\nProject.__str__()\n\nReturn the string representation of the project’s scene.\n\n\n\nProject.preview(viz_args=None, screenshot=None)\n\nPreview cad bodies inside the project’s scene.\n\nParameters\n\nviz_args\n\npython:dict\n\ncontains arguments in dict format passed to add mesh function\ne.g.\n- {‘style’: ‘wireframe’},\n- {‘style’: ‘surface’, ‘color’:’white’},\n- {‘opacity’: 0.7, ‘color’:’white’, ‘show_edges’: False}.\n\nscreenshot\n\npython:str or Path or None\n\nPath to save a screenshot of the plotter. If defined Plotter will only create the\nscreenshot"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.html#photometric","title":"Photometric","text":"Photometric\n\n\n\n\n\nclass ansys.speos.core.sensor.SensorCamera.Photometric(mode_photometric, camera_props, default_values=True, stable_ctr=False)\n\nMode of camera sensor : Photometric.\n\nThis allows to set every Camera Sensor parameters, including the photometric definition\nparameters.\nBy default, a camera with mode color is chosen (vs monochromatic mode).\n\nParameters\n\nmode_photometric\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric\n\nSensorCameraModePhotometric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nmode_photometric (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric)\n\ncamera_props (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.CameraProperties)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_photometric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.html#overview","title":"Photometric > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_acquisition_integration\n\nSet the acquisition integration value.\n\nset_acquisition_lag_time\n\nSet the acquisition lag time value.\n\nset_transmittance_file_uri\n\nSet the transmittance file.\n\nset_gamma_correction\n\nSet the gamma correction.\n\nset_png_bits_08\n\nChoose 08-bits for png.\n\nset_png_bits_10\n\nChoose 10-bits for png.\n\nset_png_bits_12\n\nChoose 12-bits for png.\n\nset_png_bits_16\n\nChoose 16-bits for png.\n\nset_wavelengths_range\n\nSet the range of wavelengths.\n\nset_mode_monochromatic\n\nSet the monochromatic mode.\n\nset_mode_color\n\nSet the color mode.\n\nset_trajectory_file_uri\n\nSet the trajectory file.\n\nset_layer_type_none\n\nSet no layer separation: includes the simulation’s results in one layer.\n\nset_layer_type_source\n\nSet layer separation by source: includes one layer per active source in the result."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.html#import-detail","title":"Photometric > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.html#method-detail","title":"Photometric > Method detail","text":"Method detail\n\n\n\nPhotometric.set_acquisition_integration(value=0.01)\n\nSet the acquisition integration value.\n\nParameters\n\nvalue\n\npython:float\n\nAcquisition integration value (s).\nBy default, 0.01.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_acquisition_lag_time(value=0.0)\n\nSet the acquisition lag time value.\n\nParameters\n\nvalue\n\npython:float\n\nAcquisition lag time value (s).\nBy default, 0.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_transmittance_file_uri(uri)\n\nSet the transmittance file.\n\nParameters\n\nuri\n\npython:str\n\nAmount of light of the source that passes through the lens and reaches the sensor.\nThe transmittance is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_gamma_correction(value=2.2)\n\nSet the gamma correction.\n\nParameters\n\nvalue\n\npython:float\n\nCompensation of the curve before the display on the screen.\nBy default, 2.2.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_png_bits_08()\n\nChoose 08-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_png_bits_10()\n\nChoose 10-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_png_bits_12()\n\nChoose 12-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_png_bits_16()\n\nChoose 16-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range.\n\n\n\nPhotometric.set_mode_monochromatic(spectrum_file_uri)\n\nSet the monochromatic mode.\n\nResults will be available in grey scale.\n\nParameters\n\nspectrum_file_uri\n\npython:str\n\nSpectrum file uri.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_mode_color()\n\nSet the color mode.\n\nResults will be available in color.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n\n\nPhotometric.set_trajectory_file_uri(uri)\n\nSet the trajectory file.\n\nParameters\n\nuri\n\npython:str\n\nTrajectory file, used to define the position and orientations of the Camera sensor\nin time.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_layer_type_none()\n\nSet no layer separation: includes the simulation’s results in one layer.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n\n\nPhotometric.set_layer_type_source()\n\nSet layer separation by source: includes one layer per active source in the result.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.html#classes","title":"Photometric > Classes","text":"Classes\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#prism-example","title":"Examples > Prism example","text":"Prism example\n\nThis tutorial demonstrates how to open an existing Speos file, run the simulation and open the result. After that it explains how to edit the File and adjust Parameters of the sensor."},{"objectID":"Examples","href":"examples/core/prism-example.html#prerequisites","title":"Examples > Prism example > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/prism-example.html#perform-imports","title":"Examples > Prism example > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#define-constants","title":"Examples > Prism example > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#model-setup","title":"Examples > Prism example > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/prism-example.html#load-assets","title":"Examples > Prism example > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#startconnect-to-speos-rpc-server","title":"Examples > Prism example > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#create-project","title":"Examples > Prism example > Create project","text":"Create project\n\nLoad a project from .speos file.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#preview","title":"Examples > Prism example > Preview","text":"Preview\n\nThis preview method allows you to preview the content of the Speos solver file.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#retrieve-the-simulation-feature-and-open-result","title":"Examples > Prism example > Retrieve the simulation feature and open result","text":"Retrieve the simulation feature and open result\n\nRun the simulation\n\n\n\n\n\n\n\n\n\nUse the open_result_image method to review the result\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#work-with-sensor","title":"Examples > Prism example > Work with sensor","text":"Work with sensor\n\nRetrieve the sensor feature.\n\nModify the sensor setting, e.g. set the spectral type, etc.\n\n\n\n\n\n\n\n\n\nCreate and add a new sensor, e.g. 3d irradiance sensor\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/prism-example.html#re-run-the-simulation-with-new-sensor-definition","title":"Examples > Prism example > Re-run the simulation with new sensor definition.","text":"Re-run the simulation with new sensor definition.\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#sensor3dirradiance","title":"Sensor3DIrradiance","text":"Sensor3DIrradiance\n\n\n\n\n\nclass ansys.speos.core.sensor.Sensor3DIrradiance(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: 3D Irradiance.\n\nBy default, regarding inherent characteristics, a 3d irradiance sensor of type photometric and\nilluminance type planar is chosen, Reflection, Transmission, and Absorption measurements\nare activated. By default, regarding properties, no layer separation and no ray file\ngeneration are chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (Sensor3DIrradiance.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#overview","title":"Sensor3DIrradiance > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_type_photometric\n\nSet type photometric.\n\nset_type_radiometric\n\nSet type radiometric.\n\nset_type_colorimetric\n\nSet type colorimetric.\n\nset_ray_file_type_none\n\nSet no ray file generation.\n\nset_ray_file_type_classic\n\nSet ray file generation without polarization data.\n\nset_ray_file_type_polarization\n\nSet ray file generation with the polarization data for each ray.\n\nset_ray_file_type_tm25\n\nSet ray file generation: a .tm25ray file with polarization data for each ray.\n\nset_ray_file_type_tm25_no_polarization\n\nSet ray file generation: a .tm25ray file without polarization data.\n\nset_layer_type_none\n\nDefine layer separation type as None.\n\nset_layer_type_source\n\nDefine layer separation as by source.\n\nset_geometries\n\nSelect geometry faces to be defined with 3D irradiance sensor.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing 3d irradiance sensor visualization data."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#import-detail","title":"Sensor3DIrradiance > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#property-detail","title":"Sensor3DIrradiance > Property detail","text":"Property detail\n\n\n\nproperty Sensor3DIrradiance.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing 3d irradiance sensor visualization data.\n\nReturns\n\n_VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature faces, coordinate_systems."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#method-detail","title":"Sensor3DIrradiance > Method detail","text":"Method detail\n\n\n\nSensor3DIrradiance.set_type_photometric()\n\nSet type photometric.\n\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor.\n\n\n\nSensor3DIrradiance.set_type_radiometric()\n\nSet type radiometric.\n\nThe sensor considers the entire spectrum and gets the results in W/m2.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_type_colorimetric()\n\nSet type colorimetric.\n\nThe sensor will generate color results without any spectral data or layer separation\nin lx or W//m2.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance.Colorimetric\n\nColorimetric type.\n\n\n\nSensor3DIrradiance.set_ray_file_type_none()\n\nSet no ray file generation.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_ray_file_type_classic()\n\nSet ray file generation without polarization data.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_ray_file_type_polarization()\n\nSet ray file generation with the polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_ray_file_type_tm25()\n\nSet ray file generation: a .tm25ray file with polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_ray_file_type_tm25_no_polarization()\n\nSet ray file generation: a .tm25ray file without polarization data.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_layer_type_none()\n\nDefine layer separation type as None.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_layer_type_source()\n\nDefine layer separation as by source.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor\n\n\n\nSensor3DIrradiance.set_geometries(geometries)\n\nSelect geometry faces to be defined with 3D irradiance sensor.\n\nParameters\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nList of geometries that will be considered as output faces.\n\nReturns\n\nansys.speos.core.sensor.Sensor3DIrradiance\n\n3D Irradiance sensor"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.html#classes","title":"Sensor3DIrradiance > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#spectrumlink","title":"SpectrumLink","text":"SpectrumLink\n\n\n\nclass ansys.speos.core.kernel.spectrum.SpectrumLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a spectrum in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.spectrum.SpectrumStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the spectrum in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.spectrum import ProtoSpectrum\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> spe_db = speos.client.spectrums()\n>>> spe_message = ProtoSpectrum(name=\"Monochromatic_600\")\n>>> spe_message.monochromatic.wavelength = 600\n>>> spe_link = spe_db.create(message=spe_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#overview","title":"SpectrumLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the spectrum."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#import-detail","title":"SpectrumLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#method-detail","title":"SpectrumLink > Method detail","text":"Method detail\n\n\n\nSpectrumLink.__str__()\n\nReturn the string representation of the spectrum.\n\n\n\nSpectrumLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nspectrum.Spectrum\n\nSpectrum datamodel.\n\n\n\nSpectrumLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nspectrum.Spectrum\n\nNew spectrum datamodel.\n\n\n\nSpectrumLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/logger/Logger.html#logger","title":"Logger","text":"Logger\n\n\n\nclass ansys.speos.core.logger.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides the logger used for each PySpeos session.\n\nThis class allows you to add handlers to the logger to output messages\nto a file or to the standard output.\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLogging level to filter the message severity allowed in the logger.\nBy default, the logging.DEBUG level is used.\n\nto_file\n\nbool, default: python:False\n\nWhether to write log messages to a file.\n\nto_stdout\n\nbool, default: python:True\n\nWhether to write log messages to the standard output (stdout).\n\nfilename\n\npython:str, default: “pyspeos.log”\n\nName of the file to write log log messages to.\n\nExamples\n\nDemonstrate logger usage from the Speos instance, which is automatically\ncreated when a speos instance is created.\n\n>>> from ansys.speos.core import speos\n>>> speos = Speos(loglevel=\"DEBUG\")\n>>> speos._log.info(\"This is a useful message\")\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the global pyspeos logger and add a file output handler.\n\n>>> import os\n>>> from ansys.speos.core import LOG\n>>> file_path = os.path.join(os.getcwd(), \"pyspeos.log\")\n>>> LOG.log_to_file(file_path)"},{"objectID":"Home","href":"api/ansys/speos/core/logger/Logger.html#overview","title":"Logger > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nlog_to_file\n\nAdd file handler to logger.\n\nlog_to_stdout\n\nAdd the standard output handler to the logger.\n\nsetLevel\n\nChange the log level of the object and the attached handlers.\n\nadd_child_logger\n\nAdd a child logger to the main logger.\n\nadd_instance_logger\n\nAdd a logger for a speos instance.\n\nadd_handling_uncaught_expections\n\nRedirect the output of an exception to a logger.\n\nAttributes\n\n\n\n\n\nfile_handler\n\n\n\nstd_out_handler\n\n\n\nlogger\n\n\n\ndebug\n\n\n\ninfo\n\n\n\nwarning\n\n\n\nerror\n\n\n\ncritical\n\n\n\nlog\n\n\n\nSpecial methods\n\n\n\n\n\n__getitem__\n\nMagic method to allow retrieval of instances."},{"objectID":"Home","href":"api/ansys/speos/core/logger/Logger.html#import-detail","title":"Logger > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/logger/Logger.html#attribute-detail","title":"Logger > Attribute detail","text":"Attribute detail\n\n\n\nLogger.file_handler = None\n\n\n\n\n\nLogger.std_out_handler = None\n\n\n\n\n\nLogger.logger\n\n\n\n\n\nLogger.debug\n\n\n\n\n\nLogger.info\n\n\n\n\n\nLogger.warning\n\n\n\n\n\nLogger.error\n\n\n\n\n\nLogger.critical\n\n\n\n\n\nLogger.log\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/logger/Logger.html#method-detail","title":"Logger > Method detail","text":"Method detail\n\n\n\nLogger.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default\nis \"pyspeos.log\".\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nExamples\n\nWrite to the \"pyspeos.log\" file in the current working directory.\n\n>>> from ansys.speos.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), \"pyspeos.log\")\n>>> LOG.log_to_file(file_path)\n\n\n\nLogger.log_to_stdout(level=LOG_LEVEL)\n\nAdd the standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n\n\nLogger.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n\n\nLogger.add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis logger is more general than an instance logger, which is designed to\ntrack the state of speos instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the child logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n\n\nLogger.add_instance_logger(name, client_instance, level=None)\n\nAdd a logger for a speos instance.\n\nThe speos instance logger is a logger with an adapter that adds\ncontextual information such as the speos instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new instance logger.\n\nclient_instance\n\nansys.speos.core.kernel.client.SpeosClient\n\nspeos SpeosClient object, which should contain the get_name method.\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nPySpeosCustomAdapter\n\nLogger adapter customized to add speos information to the\nlogs. You can use this class to log events in the same\nway you would with the Logger class.\n\n\n\nLogger.__getitem__(key)\n\nMagic method to allow retrieval of instances.\n\n\n\nLogger.add_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#intensity","title":"Intensity","text":"Intensity\n\n\n\n\n\nclass ansys.speos.core.intensity.Intensity(speos_client, name, description='', metadata=None, intensity_props_to_complete=None, key='')\n\nSpeos feature : Intensity.\n\nBy default, a lambertian intensity is created (cos with N=1 and total_angle=180).\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nintensity_props_to_complete\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties, optional\n\nIntensity properties to complete.\nBy default, None.\n\nkey\n\npython:str\n\nCreation from an IntensityTemplateLink key\n\nAttributes\n\nintensity_template_link\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object for the intensity template in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nintensity_props_to_complete (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties])\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#overview","title":"Intensity > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_library\n\nSet the intensity as library.\n\nset_cos\n\nSet the intensity as cos.\n\nset_gaussian\n\nSet the intensity as gaussian.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nProperties\n\n\n\n\n\ntype\n\nReturn type of sensor.\n\nAttributes\n\n\n\n\n\nintensity_template_link\n\nLink object for the intensity template in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the intensity."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#import-detail","title":"Intensity > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#property-detail","title":"Intensity > Property detail","text":"Property detail\n\n\n\nproperty Intensity.type: type\n\nReturn type of sensor.\n\nReturns\n\nExample: python:None for lambertian or ansys.speos.core.intensity.Intensity.Library\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#attribute-detail","title":"Intensity > Attribute detail","text":"Attribute detail\n\n\n\nIntensity.intensity_template_link = None\n\nLink object for the intensity template in database."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#method-detail","title":"Intensity > Method detail","text":"Method detail\n\n\n\nIntensity.set_library()\n\nSet the intensity as library.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n\n\nIntensity.set_cos(n=3, total_angle=180)\n\nSet the intensity as cos.\n\nParameters\n\nn\n\npython:float\n\nOrder of cos law.\nBy default, 3.\n\ntotal_angle\n\npython:float\n\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n\n\nIntensity.set_gaussian()\n\nSet the intensity as gaussian.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n\n\nIntensity.__str__()\n\nReturn the string representation of the intensity.\n\n\n\nIntensity.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n\n\nIntensity.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n\n\nIntensity.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.html#classes","title":"Intensity > Classes","text":"Classes\n\n"},{"objectID":"Examples","href":"examples/core/project.html#how-to-create-a-project","title":"Examples > How to create a project","text":"How to create a project\n\nThis tutorial demonstrates how to create a project."},{"objectID":"Examples","href":"examples/core/project.html#what-is-a-project","title":"Examples > How to create a project > What is a project?","text":"What is a project?\n\nA project is a speos simulation container that includes parts, material properties, sensor, sources and simulations.\n\nIn this tutorial you will learn how to create a project from scratch or from a pre-defined .speos file."},{"objectID":"Examples","href":"examples/core/project.html#prerequisites","title":"Examples > How to create a project > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/project.html#perform-imports","title":"Examples > How to create a project > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#define-constants","title":"Examples > How to create a project > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#model-setup","title":"Examples > How to create a project > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/project.html#load-assets","title":"Examples > How to create a project > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#startconnect-to-speos-rpc-server","title":"Examples > How to create a project > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. the launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#new-empty-project","title":"Examples > How to create a project > New empty project","text":"New empty project\n\nAn empty project can be created by only passing speos rpc server to the Project class.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#create-features","title":"Examples > How to create a project > Create features","text":"Create features\n\nThe Project class has a multitude of method to create Speos features. each create methedo takes the name and the Feature type as arguments and returns the created Feature #### Source\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#sensor","title":"Examples > How to create a project > Sensor","text":"Sensor\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#optical-property","title":"Examples > How to create a project > Optical property","text":"Optical property\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#read-project","title":"Examples > How to create a project > Read Project","text":"Read Project\n\nUser can read the content of a project via simply printing the project\n\n\n\n\n\n\n\n\n\nOr, user can use the find_key method to read a specific feature:\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#find-a-feature-inside-a-project","title":"Examples > How to create a project > Find a feature inside a project","text":"Find a feature inside a project"},{"objectID":"Examples","href":"examples/core/project.html#use-find-method-with-an-exact-name","title":"Examples > How to create a project > Use find method with an exact name","text":"Use find method with an exact name\n\nIf no feature is found, an empty list is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#use-find-method-with-feature-type","title":"Examples > How to create a project > Use find method with feature type","text":"Use find method with feature type\n\nHere a wrong type is given: no source is called Sensor.1 in the project\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#use-find-method-with-approximation-name-with-regex","title":"Examples > How to create a project > Use find method with approximation name with regex","text":"Use find method with approximation name with regex\n\nfind a feature with name starting with Mat\n\n\n\n\n\n\n\n\n\nfind all features without defining any name\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#delete","title":"Examples > How to create a project > Delete","text":"Delete\n\nThis erases the scene content in server database.\n\nThis deletes also each feature of the project\n\n\n\n\n\n\n\n\n\nAs the features were deleted just above -> this returns an empty vector\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#create-project-from-pre-defined-speos-project","title":"Examples > How to create a project > Create project from pre-defined speos project","text":"Create project from pre-defined speos project\n\nVia passing the .speos/.sv5 file path to the Project class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/project.html#preview-the-part-information","title":"Examples > How to create a project > Preview the part information","text":"Preview the part information\n\nUser can check the project part using preview method.\n\n\n\n\n\n\n\n\n\n\n\n\n\nuse find_key method to find specific information\n\n\n\n\n\n\n\n\n\nUse find method to retrieve feature:\n\ne.g. surface source\n\n\n\n\n\n\n\n\n\nmodify the surface source, e.g. surface source wavelength:\n\n\n\n\n\n\n\n\n\nRetrieve a simulation feature:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPreview simulation result (only windows)\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/index.html#the-intensity_templatepy-module","title":"The intensity_template.py module","text":"The intensity_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/index.html#summary","title":"The intensity_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nIntensityTemplateLink\n\nLink object for intensity template in database.\n\nIntensityTemplateStub\n\nDatabase interactions for intensity templates.\n\nAttributes\n\n\n\n\n\nProtoIntensityTemplate\n\nIntensityTemplate protobuf class.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/index.html#description","title":"The intensity_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/index.html#module-detail","title":"The intensity_template.py module > Module detail","text":"Module detail\n\n\n\nintensity_template.ProtoIntensityTemplate\n\nIntensityTemplate protobuf class.\n\nansys.api.speos.intensity.v1.intensity_pb2.IntensityTemplate"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobLink.html#joblink","title":"JobLink","text":"JobLink\n\n\n\nclass ansys.speos.core.kernel.job.JobLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for job in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.job.JobStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the job in the database.\n\nParameters\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobLink.html#overview","title":"JobLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nget_state\n\nRetrieve job state.\n\nstart\n\nStart the job.\n\nstop\n\nStop the job.\n\nget_error\n\nRetrieve job error.\n\nget_results\n\nRetrieve job results.\n\nget_progress_status\n\nRetrieve job progress.\n\nget_ray_paths\n\nRetrieve ray paths.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the Job."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobLink.html#import-detail","title":"JobLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/JobLink.html#method-detail","title":"JobLink > Method detail","text":"Method detail\n\n\n\nJobLink.__str__()\n\nReturn the string representation of the Job.\n\n\n\nJobLink.get()\n\nGet the datamodel from database.\n\nReturns\n\njob.Job\n\nJob datamodel.\n\n\n\nJobLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\njob.Job\n\nNew Job datamodel.\n\n\n\nJobLink.delete()\n\nRemove datamodel from database.\n\n\n\nJobLink.get_state()\n\nRetrieve job state.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetState_Response\n\nState of the job.\n\n\n\nJobLink.start()\n\nStart the job.\n\n\n\nJobLink.stop()\n\nStop the job.\n\n\n\nJobLink.get_error()\n\nRetrieve job error.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetError_Response\n\nError of the job.\n\n\n\nJobLink.get_results()\n\nRetrieve job results.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetResults_Response\n\nResults of the job.\n\n\n\nJobLink.get_progress_status()\n\nRetrieve job progress.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetProgressStatus_Response\n\nProgress status of the job.\n\n\n\nJobLink.get_ray_paths()\n\nRetrieve ray paths.\n\nAvailable for interactive simulation.\n\nReturns\n\nIterator[ansys.api.speos.results.v1.ray_path_pb2.RayPath]\n\nRay paths generated by the interactive simulation."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/index.html#the-clientpy-module","title":"The client.py module","text":"The client.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/index.html#summary","title":"The client.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSpeosClient\n\nWraps a speos gRPC connection.\n\nFunctions\n\n\n\n\n\nwait_until_healthy\n\nWait until a channel is healthy before returning.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/index.html#description","title":"The client.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/client/index.html#module-detail","title":"The client.py module > Module detail","text":"Module detail\n\n\n\nclient.wait_until_healthy(channel, timeout)\n\nWait until a channel is healthy before returning.\n\nParameters\n\nchannel\n\nChannel\n\nChannel to wait until established and healthy.\n\ntimeout\n\npython:float\n\nTimeout in seconds. One attempt will be made each 100 milliseconds\nuntil the timeout is exceeded.\n\nRaises\n\nTimeoutError\n\nRaised when the total elapsed time exceeds timeout."},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/index.html#the-geo_refpy-module","title":"The geo_ref.py module","text":"The geo_ref.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/index.html#summary","title":"The geo_ref.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nGeoRef\n\nRepresent a CAD object.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/geo_ref/index.html#description","title":"The geo_ref.py module > Description","text":"Description\n\nProvides interface to link Speos Objects to Geometries."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Radiometric.html#radiometric","title":"Radiometric","text":"Radiometric\n\n\n\nclass ansys.speos.core.sensor.Sensor3DIrradiance.Radiometric(sensor_type_radiometric, default_values=True, stable_ctr=True)\n\nClass computing the radiant intensity (in W.sr-1).\n\nGenerate an extended map for Virtual Photometric Lab.\n\nParameters\n\nilluminance_type\n\nansys.api.speos.sensor.v1.sensor_pb2.TypeRadiometric\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_radiometric (ansys.api.speos.sensor.v1.sensor_pb2.TypeRadiometric)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Radiometric.html#overview","title":"Radiometric > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_integration_planar\n\nSet integration planar.\n\nset_integration_radial\n\nSet integration radial."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Radiometric.html#import-detail","title":"Radiometric > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Radiometric.html#method-detail","title":"Radiometric > Method detail","text":"Method detail\n\n\n\nRadiometric.set_integration_planar()\n\nSet integration planar.\n\nReturns\n\nSensor3DIrradiance.Measures\n\nmeasured defines transmission, reflection, absorption\n\n\n\nRadiometric.set_integration_radial()\n\nSet integration radial."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/index.html#the-crudpy-module","title":"The crud.py module","text":"The crud.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/index.html#summary","title":"The crud.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nCrudStub\n\nWraps a speos gRPC CRUD connection.\n\nCrudItem\n\nItem of a database.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/index.html#description","title":"The crud.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/index.html#the-intensitypy-module","title":"The intensity.py module","text":"The intensity.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/index.html#summary","title":"The intensity.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nIntensity\n\nSpeos feature : Intensity.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/index.html#description","title":"The intensity.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Intensity."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.Weight.html#weight","title":"Weight","text":"Weight\n\n\n\nclass ansys.speos.core.simulation.BaseSimulation.Weight(weight, stable_ctr=False)\n\nThe Weight represents the ray energy.\n\nIn real life, a ray loses some energy (power) when it interacts with an object.\nActivating weight means that the Weight message is present.\nWhen weight is not activated, rays’ energy stays constant and probability laws dictate if\nrays continue or stop propagating. When weight is activated, the rays’ energy evolves with\ninteractions until rays reach the sensors. It is highly recommended to fill this parameter\nexcepted in interactive simulation. Not filling this parameter is useful to understand\ncertain phenomena as absorption.\n\nParameters\n\nweight\n\nansys.api.speos.simulation.v1.simulation_template_pb2.Weight to complete.\n\n\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nweight (ansys.api.speos.simulation.v1.simulation_template_pb2.Weight)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_weight method available in simulation\nclasses."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.Weight.html#overview","title":"Weight > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_minimum_energy_percentage\n\nSet the minimum energy percentage."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.Weight.html#import-detail","title":"Weight > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.Weight.html#method-detail","title":"Weight > Method detail","text":"Method detail\n\n\n\nWeight.set_minimum_energy_percentage(value=0.005)\n\nSet the minimum energy percentage.\n\nParameters\n\nvalue\n\npython:float\n\nThe Minimum energy percentage parameter defines the minimum energy ratio to continue\nto propagate a ray with weight. By default, 0.005.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nWeight."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/index.html#the-sensorpy-module","title":"The sensor.py module","text":"The sensor.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/index.html#summary","title":"The sensor.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBaseSensor\n\nBase class for Sensor.\n\nSensorCamera\n\nSensor feature: Camera.\n\nSensorIrradiance\n\nSensor feature: Irradiance.\n\nSensorRadiance\n\nSensor feature: Radiance.\n\nSensor3DIrradiance\n\nSensor feature: 3D Irradiance.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/index.html#description","title":"The sensor.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Sensor."},{"objectID":"Home","href":"getting_started/docker/common_docker.html#launch-the-speos-service","title":"Launch the Speos service","text":"Launch the Speos service\n\nManually launch the Speos service."},{"objectID":"Home","href":"getting_started/docker/common_docker.html#environment-variables","title":"Launch the Speos service > Environment variables","text":"Environment variables\n\nThe Speos service requires this mandatory environment variable to function properly:\n\nANSYSLMD_LICENSE_FILE: License server (port and IP address or DNS) the Speos service connects to.\nFor example, 1055@127.0.0.1.\n\nYou can also specify other optional environment variables:\n\nSPEOS_LOG_LEVEL: Sets the Speos service logging level. The default is 2, in which case\nthe logging level is INFO.\n\nHere are some terms to keep in mind:\n\nhost: Machine that hosts the Speos service. It is typically on localhost.\nBut if you are deploying the service on a remote machine, then the machine’s IP address is expected.\nBy default, PySpeos assumes it is on localhost.\n\nport: Port that exposes the Speos service on the host machine. Its\nvalue is assumed to be 50098, but users can deploy the service on preferred ports."},{"objectID":"Home","href":"getting_started/docker/common_docker.html#docker-for-speos-service","title":"Launch the Speos service > Docker for Speos service","text":"Docker for Speos service\n\nThis method allows you to start the Speos service based on predefined environment variables and properties.\nAfterwards, see the next section to understand how to connect to this service instance from PySpeos.\n\nThe following snippet shows how to run Speos service 2025.1.\nTo use another product version, please modify the image label from 251 to the corresponding product version.\n\nLinux/Mac\n\n\n\nPowershell\n\n\n\nWindows CMD\n\n"},{"objectID":"Home","href":"getting_started/docker/common_docker.html#connect-to-the-speos-service","title":"Launch the Speos service > Connect to the Speos service","text":"Connect to the Speos service\n\nAfter the Speos service is launched, connect to it with these commands:\n\nBy default, the Speos instance connects to 127.0.0.1 (\"localhost\") on\nport 50098.\n\nYou can change this by modifying the host and port\nparameters of the Speos object, but note that you must also modify\nyour docker run command by changing the <HOST-PORT>-50098 argument.\n\nThe following tabs show the commands that set the environment variables and Speos\nfunction."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceAmbientNaturalLight.html#sourceambientnaturallight","title":"SourceAmbientNaturalLight","text":"SourceAmbientNaturalLight\n\n\n\nclass ansys.speos.core.source.SourceAmbientNaturalLight(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSourceAmbient\n\nNatural light ambient source.\n\nBy default, turbidity is set to be 3 with Sky.\n[0, 0, 1] is used as zenith direction, [0, 1, 0] as north direction.\nSun type is set to be automatic type.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceAmbientNaturalLight.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceAmbientNaturalLight.html#overview","title":"SourceAmbientNaturalLight > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_sun_automatic\n\nSet natural light sun type as automatic.\n\nset_sun_manual\n\nSet natural light sun type as manual.\n\nProperties\n\n\n\n\n\nturbidity\n\nGet turbidity of the natural light source.\n\nwith_sky\n\nBool of whether activated using sky in the natural light source.\n\nzenith_direction\n\nGet zenith direction of the natural light source.\n\nreverse_zenith_direction\n\nGet whether reverse zenith direction of the natural light source.\n\nnorth_direction\n\nGet north direction of the natural light source.\n\nreverse_north_direction\n\nGet whether reverse north direction of the natural light source."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceAmbientNaturalLight.html#import-detail","title":"SourceAmbientNaturalLight > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceAmbientNaturalLight.html#property-detail","title":"SourceAmbientNaturalLight > Property detail","text":"Property detail\n\n\n\nproperty SourceAmbientNaturalLight.turbidity: float\n\nGet turbidity of the natural light source.\n\nReturns\n\npython:float\n\nvalue of Turbidity the measure of the fraction of scattering.\n\n\n\nproperty SourceAmbientNaturalLight.with_sky: bool\n\nBool of whether activated using sky in the natural light source.\n\nReturns\n\nbool\n\nTrue as using sky, while False as using natural light without the sky.\n\n\n\nproperty SourceAmbientNaturalLight.zenith_direction: List[float]\n\nGet zenith direction of the natural light source.\n\nReturns\n\nList[python:float]\n\ndirection defines the zenith direction of the natural light.\n\n\n\nproperty SourceAmbientNaturalLight.reverse_zenith_direction: bool\n\nGet whether reverse zenith direction of the natural light source.\n\nReturns\n\nbool\n\nTrue to reverse zenith direction, False otherwise.\n\n\n\nproperty SourceAmbientNaturalLight.north_direction: List[float]\n\nGet north direction of the natural light source.\n\nReturns\n\nList[python:float]\n\ndirection defines the north direction of the natural light.\n\n\n\nproperty SourceAmbientNaturalLight.reverse_north_direction: bool\n\nGet whether reverse north direction of the natural light source.\n\nReturns\n\nbool\n\nTrue as reverse north direction, False otherwise."},{"objectID":"Home","href":"api/ansys/speos/core/source/SourceAmbientNaturalLight.html#method-detail","title":"SourceAmbientNaturalLight > Method detail","text":"Method detail\n\n\n\nSourceAmbientNaturalLight.set_sun_automatic()\n\nSet natural light sun type as automatic.\n\nReturns\n\nBaseSourceAmbient.AutomaticSun\n\n\n\n\n\nSourceAmbientNaturalLight.set_sun_manual()\n\nSet natural light sun type as manual.\n\nReturns\n\nBaseSourceAmbient.Manual\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.Manual.html#manual","title":"Manual","text":"Manual\n\n\n\nclass ansys.speos.core.source.BaseSourceAmbient.Manual(sun, default_values=True, stable_ctr=False)\n\nSun type Manual>.\n\nBy default, z-axis [0, 0, 1] is used as sun direction.\n\nParameters\n\nsun: ansys.api.speos.scene.v2.scene_pb2.ManualSun\n\nWavelengths range protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsun (ansys.api.speos.scene.v2.scene_pb2.ManualSun)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_sun_manual method available in\nsource classes."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.Manual.html#overview","title":"Manual > Overview","text":"Overview\n\nProperties\n\n\n\n\n\ndirection\n\nGet direction of the manual sun.\n\nreverse_sun\n\nGet whether reverse direction of the manual sun."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.Manual.html#import-detail","title":"Manual > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.Manual.html#property-detail","title":"Manual > Property detail","text":"Property detail\n\n\n\nproperty Manual.direction: List[float]\n\nGet direction of the manual sun.\n\nReturns\n\npython:list of python:float\n\nlist describing the direction of the manual sun.\n\n\n\nproperty Manual.reverse_sun: bool\n\nGet whether reverse direction of the manual sun.\n\nReturns\n\nbool\n\nTrue to reverse direction, False to not reverse direction"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.html#simulationinteractive","title":"SimulationInteractive","text":"SimulationInteractive\n\n\n\n\n\nclass ansys.speos.core.simulation.SimulationInteractive(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of simulation : Interactive.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\na colorimetric standard is set to CIE 1931,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, each source will send 100 rays.\nBy default, the simulation deactivates both light expert and impact report.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationInteractive.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.html#overview","title":"SimulationInteractive > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_geom_distance_tolerance\n\nSet the geometry distance tolerance.\n\nset_max_impact\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nset_weight\n\nActivate weight. Highly recommended to fill.\n\nset_weight_none\n\nDeactivate weight.\n\nset_colorimetric_standard_CIE_1931\n\nSet the colorimetric standard to CIE 1931.\n\nset_colorimetric_standard_CIE_1964\n\nSet the colorimetric standard to CIE 1964.\n\nset_ambient_material_file_uri\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nset_rays_number_per_sources\n\nSelect the number of rays emitted for each source.\n\nset_light_expert\n\nActivate/Deactivate the generation of light expert file.\n\nset_impact_report\n\nActivate/Deactivate the details in the HTML simulation report."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.html#import-detail","title":"SimulationInteractive > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.html#method-detail","title":"SimulationInteractive > Method detail","text":"Method detail\n\n\n\nSimulationInteractive.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nSimulation.Weight\n\n\n\nSimulationInteractive.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_rays_number_per_sources(values)\n\nSelect the number of rays emitted for each source.\n\nIf a source is present in the simulation but not referenced here, it will send by default\n100 rays.\n\nParameters\n\nvalues\n\nList[ansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource]\n\nList of rays number emitted by source.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_light_expert(value=False)\n\nActivate/Deactivate the generation of light expert file.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n\n\nSimulationInteractive.set_impact_report(value=False)\n\nActivate/Deactivate the details in the HTML simulation report.\n\ne.g: number of impacts, position and surface state\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.html#classes","title":"SimulationInteractive > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/index.html#the-simulation_templatepy-module","title":"The simulation_template.py module","text":"The simulation_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/index.html#summary","title":"The simulation_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSimulationTemplateLink\n\nLink object for simulation template in database.\n\nSimulationTemplateStub\n\nDatabase interactions for simulation templates.\n\nAttributes\n\n\n\n\n\nProtoSimulationTemplate\n\nSimulationTemplate protobuf class.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/index.html#description","title":"The simulation_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/index.html#module-detail","title":"The simulation_template.py module > Module detail","text":"Module detail\n\n\n\nsimulation_template.ProtoSimulationTemplate\n\nSimulationTemplate protobuf class.\n\nansys.api.speos.simulation.v1.simulation_template_pb2.SimulationTemplate"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorRadiance.html#sensorradiance","title":"SensorRadiance","text":"SensorRadiance\n\n\n\nclass ansys.speos.core.sensor.SensorRadiance(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Radiance.\n\nBy default, regarding inherent characteristics, a radiance sensor of type photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor and no layer\nseparation is chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorRadiance.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorRadiance.html#overview","title":"SensorRadiance > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_dimensions\n\nSet the dimensions of the sensor.\n\nset_type_photometric\n\nSet type photometric.\n\nset_type_colorimetric\n\nSet type colorimetric.\n\nset_type_radiometric\n\nSet type radiometric.\n\nset_type_spectral\n\nSet type spectral.\n\nset_focal\n\nSet the focal value.\n\nset_integration_angle\n\nSet the integration angle.\n\nset_axis_system\n\nSet position of the sensor.\n\nset_observer_point\n\nSet the position of the observer point.\n\nset_layer_type_none\n\nDefine layer separation type as None.\n\nset_layer_type_source\n\nDefine layer separation as by source.\n\nset_layer_type_face\n\nDefine layer separation as by face.\n\nset_layer_type_sequence\n\nDefine layer separation as by sequence.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing radiance sensor visualization data.\n\ndimensions\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\ntype\n\nType of sensor.\n\ncolorimetric\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nspectral\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nlayer\n\nProperty containing all options in regard to the layer separation property."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorRadiance.html#import-detail","title":"SensorRadiance > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorRadiance.html#property-detail","title":"SensorRadiance > Property detail","text":"Property detail\n\n\n\nproperty SensorRadiance.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing radiance sensor visualization data.\n\nReturns\n\n_VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature faces, coordinate_systems.\n\n\n\nproperty SensorRadiance.dimensions: BaseSensor\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nInstance of Dimensions Class for this sensor feature\n\n\n\nproperty SensorRadiance.type: str\n\nType of sensor.\n\nReturns\n\npython:str\n\nSensor type as string\n\n\n\nproperty SensorRadiance.colorimetric: None | BaseSensor\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nInstance of Colorimetric Class for this sensor feature\n\n\n\nproperty SensorRadiance.spectral: None | BaseSensor\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nInstance of Spectral Class for this sensor feature\n\n\n\nproperty SensorRadiance.layer: None | BaseSensor | BaseSensor\n\nProperty containing all options in regard to the layer separation property.\n\nReturns\n\nUnion[            python:None,            ansys.speos.core.sensor.BaseSensor.LayerTypeFace,            ansys.speos.core.sensor.BaseSensor.LayerTypeSequence        ]\n\nInstance of Layer type Class for this sensor feature"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorRadiance.html#method-detail","title":"SensorRadiance > Method detail","text":"Method detail\n\n\n\nSensorRadiance.set_dimensions()\n\nSet the dimensions of the sensor.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimension class\n\n\n\nSensorRadiance.set_type_photometric()\n\nSet type photometric.\n\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_type_colorimetric()\n\nSet type colorimetric.\n\nThe sensor will generate color results without any spectral data or layer separation\nin lx or W//m2.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nColorimetric type.\n\n\n\nSensorRadiance.set_type_radiometric()\n\nSet type radiometric.\n\nThe sensor considers the entire spectrum and gets the results in W/m2.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_type_spectral()\n\nSet type spectral.\n\nThe sensor will generate color results and spectral data separated by wavelength\nin lx or W/m2.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nSpectral type.\n\n\n\nSensorRadiance.set_focal(value=250)\n\nSet the focal value.\n\nParameters\n\nvalue\n\npython:float\n\nFocal (mm).\nBy default, 250.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_integration_angle(value=5)\n\nSet the integration angle.\n\nParameters\n\nvalue\n\npython:float\n\nintegration angle (degree)\nBy default, 5.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_axis_system(axis_system=None)\n\nSet position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_observer_point(value=None)\n\nSet the position of the observer point.\n\nThis is optional, because the focal length is used by default.\nChoosing to set an observer point will make the focal length ignored.\n\nParameters\n\nvalue\n\nList[python:float], optional\n\nPosition of the observer point [Ox Oy Oz].\nBy default, None. None means that the focal length is used.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n\n\nSensorRadiance.set_layer_type_none()\n\nDefine layer separation type as None.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor\n\n\n\nSensorRadiance.set_layer_type_source()\n\nDefine layer separation as by source.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor\n\n\n\nSensorRadiance.set_layer_type_face()\n\nDefine layer separation as by face.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace property instance\n\n\n\nSensorRadiance.set_layer_type_sequence()\n\nDefine layer separation as by sequence.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence property instance"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/Spectrum.html#spectrum","title":"Spectrum","text":"Spectrum\n\n\n\nclass ansys.speos.core.spectrum.Spectrum(speos_client, name, description='', metadata=None, key='')\n\nSpeos feature : Spectrum.\n\nBy default, a monochromatic spectrum is created.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nkey\n\npython:str\n\nCreation from an SpectrumLink key\n\nAttributes\n\nspectrum_link\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object for the spectrum in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/Spectrum.html#overview","title":"Spectrum > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_monochromatic\n\nSet the spectrum as monochromatic.\n\nset_blackbody\n\nSet the spectrum as blackbody.\n\nset_sampled\n\nSet the spectrum as sampled.\n\nset_library\n\nSet the spectrum as library.\n\nset_incandescent\n\nSet the spectrum as incandescent (predefined spectrum).\n\nset_warmwhitefluorescent\n\nSet the spectrum as warmwhitefluorescent (predefined spectrum).\n\nset_daylightfluorescent\n\nSet the spectrum as daylightfluorescent (predefined spectrum).\n\nset_whiteLED\n\nSet the spectrum as white led (predefined spectrum).\n\nset_white_led\n\nSet the spectrum as white led (predefined spectrum).\n\nset_halogen\n\nSet the spectrum as halogen (predefined spectrum).\n\nset_metalhalide\n\nSet the spectrum as metalhalide (predefined spectrum).\n\nset_highpressuresodium\n\nSet the spectrum as highpressuresodium (predefined spectrum).\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nAttributes\n\n\n\n\n\nspectrum_link\n\nLink object for the spectrum in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the spectrum."},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/Spectrum.html#import-detail","title":"Spectrum > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/Spectrum.html#attribute-detail","title":"Spectrum > Attribute detail","text":"Attribute detail\n\n\n\nSpectrum.spectrum_link = None\n\nLink object for the spectrum in database."},{"objectID":"Home","href":"api/ansys/speos/core/spectrum/Spectrum.html#method-detail","title":"Spectrum > Method detail","text":"Method detail\n\n\n\nSpectrum.set_monochromatic(wavelength=555.0)\n\nSet the spectrum as monochromatic.\n\nParameters\n\nwavelength\n\npython:float\n\nWavelength of the spectrum, in nm.\nBy default, 555.0.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_blackbody(temperature=2856)\n\nSet the spectrum as blackbody.\n\nParameters\n\ntemperature\n\npython:float\n\nTemperature of the blackbody, in K.\nBy default, 2856.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_sampled(wavelengths, values)\n\nSet the spectrum as sampled.\n\nParameters\n\nwavelengths\n\nList[python:float]\n\nList of wavelengths, in nm\n\nvalues\n\nList[python:float]\n\nList of values, expected from 0. to 100. in %\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_library(file_uri)\n\nSet the spectrum as library.\n\nParameters\n\nfile_uri\n\npython:str\n\nuri of the spectrum file.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_incandescent()\n\nSet the spectrum as incandescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_warmwhitefluorescent()\n\nSet the spectrum as warmwhitefluorescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_daylightfluorescent()\n\nSet the spectrum as daylightfluorescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_whiteLED()\n\nSet the spectrum as white led (predefined spectrum).\n\nDeprecated since version 0.2.2: set_whiteLed will be removed with 0.3.0\nset_white_led shall be used to comply with PEP8 naming convention\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_white_led()\n\nSet the spectrum as white led (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_halogen()\n\nSet the spectrum as halogen (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_metalhalide()\n\nSet the spectrum as metalhalide (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.set_highpressuresodium()\n\nSet the spectrum as highpressuresodium (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.__str__()\n\nReturn the string representation of the spectrum.\n\n\n\nSpectrum.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n\n\nSpectrum.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature."},{"objectID":"Home","href":"api/ansys/speos/core/launcher/index.html#the-launcherpy-module","title":"The launcher.py module","text":"The launcher.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/launcher/index.html#summary","title":"The launcher.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nlaunch_speos\n\nStart the Speos Service remotely using the product instance management API.\n\nlaunch_remote_speos\n\nStart the Speos Service remotely using the product instance management API.\n\nlaunch_local_speos_rpc_server\n\nLaunch Speos RPC server locally."},{"objectID":"Home","href":"api/ansys/speos/core/launcher/index.html#description","title":"The launcher.py module > Description","text":"Description\n\nModule to start Speos RPC Server."},{"objectID":"Home","href":"api/ansys/speos/core/launcher/index.html#module-detail","title":"The launcher.py module > Module detail","text":"Module detail\n\n\n\nlauncher.launch_speos(version=None)\n\nStart the Speos Service remotely using the product instance management API.\n\nPrerequisite : product instance management configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\n\nReturns\n\nansys.speos.core.speos.Speos\n\nAn instance of the Speos Service.\n\n\n\nlauncher.launch_remote_speos(version=None)\n\nStart the Speos Service remotely using the product instance management API.\n\nWhen calling this method, you need to ensure that you are in an\nenvironment where PyPIM is configured. This can be verified with\npypim.is_configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\n\nReturns\n\nansys.speos.core.speos.Speos\n\nAn instance of the Speos Service.\n\n\n\nlauncher.launch_local_speos_rpc_server(version=DEFAULT_VERSION, port=DEFAULT_PORT, server_message_size=MAX_SERVER_MESSAGE_LENGTH, client_message_size=MAX_CLIENT_MESSAGE_SIZE, logfile_loc=None, log_level=20, speos_rpc_path=None)\n\nLaunch Speos RPC server locally.\n\nDo not execute this function with untrusted function argument or environment\nvariables.\nSee the security guide for details.\n\nParameters\n\nversion\n\npython:str\n\nThe Speos server version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen as\nansys.speos.core.kernel.client.LATEST_VERSION.\n\nport\n\nUnion[python:str, python:int], optional\n\nPort number where the server is running.\nBy default, ansys.speos.core.kernel.client.DEFAULT_PORT.\n\nserver_message_size\n\npython:int\n\nMaximum message length value accepted by the Speos RPC server,\nBy default, value stored in environment variable SPEOS_MAX_MESSAGE_LENGTH or 268 435 456.\n\nclient_message_size: int\n\nMaximum Message size of a newly generated channel\nBy default, MAX_CLIENT_MESSAGE_SIZE.\n\nlogfile_loc\n\npython:str\n\nlocation for the logfile to be created in.\n\nlog_level\n\npython:int\n\nThe logging level to be applied to the server, integer values can be taken from logging\nmodule.\nBy default, logging.WARNING = 20.\n\nspeos_rpc_path\n\nOptional[python:str, Path]\n\nlocation of Speos rpc executable\n\nReturns\n\nansys.speos.core.speos.Speos\n\nAn instance of the Speos Service."},{"objectID":"Home","href":"api/ansys/speos/core/logger/InstanceFilter.html#instancefilter","title":"InstanceFilter","text":"InstanceFilter\n\n\n\nclass ansys.speos.core.logger.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists."},{"objectID":"Home","href":"api/ansys/speos/core/logger/InstanceFilter.html#overview","title":"InstanceFilter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nfilter\n\nFilter the record."},{"objectID":"Home","href":"api/ansys/speos/core/logger/InstanceFilter.html#import-detail","title":"InstanceFilter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/logger/InstanceFilter.html#method-detail","title":"InstanceFilter > Method detail","text":"Method detail\n\n\n\nInstanceFilter.filter(record)\n\nFilter the record.\n\nParameters\n\nrecord\n\nlogging.LogRecord\n\nRecord to filter.\n\nReturns\n\nbool\n\nWhether the record is valid."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosCustomAdapter.html#pyspeoscustomadapter","title":"PySpeosCustomAdapter","text":"PySpeosCustomAdapter\n\n\n\nclass ansys.speos.core.logger.PySpeosCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the speos instance name dynamic.\n\nIf we use the standard approach, which is supplying extra input\nto the logger, we would need to keep inputing speos instances\nevery time we do a log.\nUsing adapters, we only need to specify the speos instance that\nwe are referring to once."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosCustomAdapter.html#overview","title":"PySpeosCustomAdapter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nprocess\n\nProcess extra Arguments.\n\nlog_to_file\n\nAdd a file handler to the logger.\n\nlog_to_stdout\n\nAdd a standard output handler to the logger.\n\nsetLevel\n\nChange the log level of the object and the attached handlers.\n\nAttributes\n\n\n\n\n\nlevel\n\n\n\nfile_handler\n\n\n\nstdout_handler\n\n\n\nlogger\n\n\n\nstd_out_handler\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosCustomAdapter.html#import-detail","title":"PySpeosCustomAdapter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosCustomAdapter.html#attribute-detail","title":"PySpeosCustomAdapter > Attribute detail","text":"Attribute detail\n\n\n\nPySpeosCustomAdapter.level = None\n\n\n\n\n\nPySpeosCustomAdapter.file_handler = None\n\n\n\n\n\nPySpeosCustomAdapter.stdout_handler = None\n\n\n\n\n\nPySpeosCustomAdapter.logger\n\n\n\n\n\nPySpeosCustomAdapter.std_out_handler\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosCustomAdapter.html#method-detail","title":"PySpeosCustomAdapter > Method detail","text":"Method detail\n\n\n\nPySpeosCustomAdapter.process(msg, kwargs)\n\nProcess extra Arguments.\n\nParameters\n\nmsg\n\npython:str\n\nLog message\n\nkwargs\n\npython:dict\n\nextra Arguments dictionary\n\nReturns\n\npython:tuple[python:str, python:dict]\n\nMessage and processed extra arguments\n\n\n\nPySpeosCustomAdapter.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is\n\"pyspeos.log\".\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n\n\nPySpeosCustomAdapter.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n\n\nPySpeosCustomAdapter.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used."},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#how-to-modify-scene-elements","title":"Examples > How to modify scene elements","text":"How to modify scene elements\n\nThis tutorial demonstrates how to modify a scene. For example how to modify an existing sensor, how to add a new sensor. The logic is the same to modify sources, simulations, materials."},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#template-vs-instance","title":"Examples > How to modify scene elements > Template vs Instance","text":"Template vs Instance\n\nWhen applicable, the speos objects are separated in two different notions: template and instance. The template represents the feature with its inherent characteristics. The instance represents the completion of a template by adding properties such as spatial position, link to geometry, etc."},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#template","title":"Examples > How to modify scene elements > Template","text":"Template\n\nThe template objects are handled by a manager. It was explained how to interact with them in the kernel-object-link example (“How to use an ObjectLink”). The interesting thing about the template notion is that the same template can be used several times with different properties."},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#instance","title":"Examples > How to modify scene elements > Instance","text":"Instance\n\nThe template objects are instantiated in the Scene object, with properties needed to place them at the wanted position, or attached to the wanted geometry. The Scene object will gather all features that you need to run a job (compute a simulation)."},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#prerequisites","title":"Examples > How to modify scene elements > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#perform-imports","title":"Examples > How to modify scene elements > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#define-constants","title":"Examples > How to modify scene elements > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#load-assets","title":"Examples > How to modify scene elements > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#startconnect-to-speos-rpc-server","title":"Examples > How to modify scene elements > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n\n\nCreate an empty scene and load speos file to fill it.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#print-data-models","title":"Examples > How to modify scene elements > Print data models","text":"Print data models"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#whole-scene","title":"Examples > How to modify scene elements > Whole scene","text":"Whole scene\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#sensors-instance--template-in-this-scene","title":"Examples > How to modify scene elements > Sensors (instance + template) in this scene","text":"Sensors (instance + template) in this scene\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#camera-sensors-in-this-scene","title":"Examples > How to modify scene elements > Camera sensors in this scene","text":"Camera sensors in this scene\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#modify-existing-data","title":"Examples > How to modify scene elements > Modify existing data","text":"Modify existing data"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#modify-a-camera-instance","title":"Examples > How to modify scene elements > Modify a camera instance","text":"Modify a camera instance\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#modify-a-camera-template","title":"Examples > How to modify scene elements > Modify a camera template","text":"Modify a camera template\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#add-new-data-like-a-new-sensor","title":"Examples > How to modify scene elements > Add new data (like a new sensor)","text":"Add new data (like a new sensor)"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#create-a-camera-template","title":"Examples > How to modify scene elements > Create a camera template","text":"Create a camera template\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#create-a-camera-instance","title":"Examples > How to modify scene elements > Create a camera instance","text":"Create a camera instance\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/modify-scene.html#add-this-instance-in-our-scene","title":"Examples > How to modify scene elements > Add this instance in our scene","text":"Add this instance in our scene\n\n\n\n\n\n\n\n\n\nWhen loading a speos file into a scene, this creates many objects (source templates, sensor templates, vop template, sop templates). Then at the end of the example, we just clean all databases\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#part","title":"Part","text":"Part\n\n\n\n\n\nclass ansys.speos.core.part.Part(project, name, description='', metadata=None)\n\nFeature : Part.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nAttributes\n\npart_link\n\nansys.speos.core.kernel.part.PartLink\n\nLink object for the part in database.\n\nParameters\n\nproject (Part.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])"},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#overview","title":"Part > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_body\n\nCreate a body in this element.\n\ncreate_sub_part\n\nCreate a sub part in this element.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nfind\n\nFind feature(s).\n\nAttributes\n\n\n\n\n\npart_link\n\nLink object for the part in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the part."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#import-detail","title":"Part > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#attribute-detail","title":"Part > Attribute detail","text":"Attribute detail\n\n\n\nPart.part_link = None\n\nLink object for the part in database."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#method-detail","title":"Part > Method detail","text":"Method detail\n\n\n\nPart.create_body(name, description='', metadata=None)\n\nCreate a body in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n\n\nPart.create_sub_part(name, description='')\n\nCreate a sub part in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nPart.__str__()\n\nReturn the string representation of the part.\n\n\n\nPart.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n\n\nPart.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n\n\nPart.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n\n\nPart.find(name, name_regex=False, feature_type=None)\n\nFind feature(s).\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.body.Body,            ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[Union[ansys.speos.core.body.Body, ansys.speos.core.face.Face,        ansys.speos.core.part.Part.SubPart]]\n\nFound features."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.html#classes","title":"Part > Classes","text":"Classes\n\n"},{"objectID":"Examples","href":"examples.html#examples","title":"Examples","text":"Examples"},{"objectID":"Examples","href":"examples.html#basic-examples","title":"Examples > Basic examples","text":"Basic examples\n\nThis series of tutorials explains basic examples involving Speos objects using Python and PySpeos.\n\nThe series of workflow examples below demonstrate use cases using PySpeos core methods.\n\n\n\nThe series of basic examples below explains how to use different PySpeos core methods.\n\n\n\nThe series of basic examples below explains how to use different PySpeos kernel methods.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.html#basesourceambient","title":"BaseSourceAmbient","text":"BaseSourceAmbient\n\n\n\n\n\nclass ansys.speos.core.source.BaseSourceAmbient(project, name, description='', metadata=None, source_instance=None)\n\nBases: BaseSource\n\nSuper Class for ambient sources.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which source shall be created.\n\nname\n\npython:str\n\nName of the source.\n\ndescription\n\npython:str\n\nDescription of the source.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsource_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance, optional\n\nSource instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nParameters\n\nproject (BaseSourceAmbient.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.html#import-detail","title":"BaseSourceAmbient > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.html#classes","title":"BaseSourceAmbient > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Colorimetric.html#colorimetric","title":"Colorimetric","text":"Colorimetric\n\n\n\nclass ansys.speos.core.sensor.Sensor3DIrradiance.Colorimetric(sensor_type_colorimetric, default_values=True, stable_ctr=False)\n\nClass computing the color results.\n\nResult without any spectral layer separation (in cd or W.sr-1).\n\nParameters\n\nilluminance_type\n\nansys.api.speos.sensor.v1.sensor_pb2.TypeColorimetric\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_colorimetric (ansys.api.speos.sensor.v1.sensor_pb2.TypeColorimetric)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Colorimetric.html#overview","title":"Colorimetric > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_wavelengths_range\n\nSet the range of wavelengths."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Colorimetric.html#import-detail","title":"Colorimetric > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Colorimetric.html#method-detail","title":"Colorimetric > Method detail","text":"Method detail\n\n\n\nColorimetric.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range."},{"objectID":"Home","href":"index.html#pyspeos-documentation-06dev0","title":"PySpeos documentation 0.6.dev0","text":"PySpeos documentation 0.6.dev0\n\nPySpeos is a Python client library that gathers functionalities and tools based on remote API of Ansys software\nSpeos .\n\nOverview \n\nOverview of the PySpeos library.\n\noverview/index\n\nGetting started \n\nLearn how to run the Linux Docker container, install the\nPySpeos image, and launch and connect to the Speos\nservice.\n\ngetting_started/index\n\nAPI reference \n\nUnderstand PySpeos API endpoints, their capabilities,\nand how to interact with them programmatically.\n\napi/index\n\nExamples \n\nLearn how to use PySpeos with examples that demonstrate its capabilities.\n\nexamples\n\nContribute \n\nLearn how to contribute to the PySpeos codebase\nor documentation.\n\ncontributing\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#simulationtemplatelink","title":"SimulationTemplateLink","text":"SimulationTemplateLink\n\n\n\nclass ansys.speos.core.kernel.simulation_template.SimulationTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for simulation template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the simulation_template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.api.speos.simulation.v1 import simulation_template_pb2\n>>> from ansys.speos.core.kernel.simulation_template import (\n...     ProtoSimulationTemplate,\n... )\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sim_t_db = speos.client.simulation_templates()\n>>> sim_t_message = ProtoSimulationTemplate(name=\"Direct\")\n>>> sim_t_message.direct_mc_simulation_template.geom_distance_tolerance = 0.01\n>>> sim_t_message.direct_mc_simulation_template.max_impact = 100\n>>> sim_t_message.direct_mc_simulation_template.weight.minimum_energy_percentage = 0.005\n>>> sim_t_message.direct_mc_simulation_template.colorimetric_standard = (\n...     simulation_template_pb2.CIE_1931\n... )\n>>> sim_t_message.direct_mc_simulation_template.dispersion = True\n>>> sim_t_link = sim_t_db.create(message=sim_t_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#overview","title":"SimulationTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the simulation_template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#import-detail","title":"SimulationTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#method-detail","title":"SimulationTemplateLink > Method detail","text":"Method detail\n\n\n\nSimulationTemplateLink.__str__()\n\nReturn the string representation of the simulation_template.\n\n\n\nSimulationTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsimulation_template.SimulationTemplate\n\nSimulationTemplate datamodel.\n\n\n\nSimulationTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsimulation_template.SimulationTemplate\n\nNew simulation_template datamodel.\n\n\n\nSimulationTemplateLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosFormatter.html#pyspeosformatter","title":"PySpeosFormatter","text":"PySpeosFormatter\n\n\n\nclass ansys.speos.core.logger.PySpeosFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides the customized Formatter class for overwriting default format styles."},{"objectID":"Home","href":"api/ansys/speos/core/logger/PySpeosFormatter.html#import-detail","title":"PySpeosFormatter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#sensorcamera","title":"SensorCamera","text":"SensorCamera\n\n\n\n\n\nclass ansys.speos.core.sensor.SensorCamera(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Camera.\n\nBy default, regarding inherent characteristics, a camera with mode photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor,\nand no layer separation is chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorCamera.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#overview","title":"SensorCamera > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_focal_length\n\nSet the focal length.\n\nset_imager_distance\n\nSet the imager distance.\n\nset_f_number\n\nSet the f number.\n\nset_distortion_file_uri\n\nSet the distortion file.\n\nset_horz_pixel\n\nSet the horizontal pixels number corresponding to the camera resolution.\n\nset_vert_pixel\n\nSet the vertical pixels number corresponding to the camera resolution.\n\nset_width\n\nSet the width of the sensor.\n\nset_height\n\nSet the height of the sensor.\n\nset_mode_geometric\n\nSet mode geometric for the camera sensor.\n\nset_mode_photometric\n\nSet mode photometric for the camera sensor.\n\nset_axis_system\n\nSet the position of the sensor.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing camera sensor visualization data.\n\nphotometric\n\nProperty containing the instance of SensorCamera.Photometric used to build the sensor."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#import-detail","title":"SensorCamera > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#property-detail","title":"SensorCamera > Property detail","text":"Property detail\n\n\n\nproperty SensorCamera.visual_data: ansys.speos.core.generic.visualization_methods._VisualData\n\nProperty containing camera sensor visualization data.\n\nReturns\n\nBaseSensor.VisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature faces, coordinate_systems.\n\n\n\nproperty SensorCamera.photometric: SensorCamera | None\n\nProperty containing the instance of SensorCamera.Photometric used to build the sensor.\n\nReturns\n\nUnion[ansys.speos.core.sensor.SensorCamera.Photometric, python:None]\n\nPhotometric class instance if it exists"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#method-detail","title":"SensorCamera > Method detail","text":"Method detail\n\n\n\nSensorCamera.set_focal_length(value=5.0)\n\nSet the focal length.\n\nParameters\n\nvalue\n\npython:float\n\nDistance between the center of the optical system and the focus. (mm)\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_imager_distance(value=10)\n\nSet the imager distance.\n\nParameters\n\nvalue\n\npython:float\n\nImager distance (mm). The imager is located at the focal point.\nThe Imager distance has no impact on the result.\nBy default, 10.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_f_number(value=20)\n\nSet the f number.\n\nParameters\n\nvalue\n\npython:float\n\nF-number represents the aperture of the front lens.\nF number has no impact on the result.\nBy default, 20.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_distortion_file_uri(uri)\n\nSet the distortion file.\n\nParameters\n\nuri\n\npython:str\n\nOptical aberration that deforms and bends straight lines. The distortion is expressed in\na .OPTDistortion file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_horz_pixel(value=640)\n\nSet the horizontal pixels number corresponding to the camera resolution.\n\nParameters\n\nvalue\n\npython:int\n\nThe horizontal pixels number corresponding to the camera resolution.\nBy default, 640.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_vert_pixel(value=480)\n\nSet the vertical pixels number corresponding to the camera resolution.\n\nParameters\n\nvalue\n\npython:int\n\nThe vertical pixels number corresponding to the camera resolution.\nBy default, 480.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_width(value=5.0)\n\nSet the width of the sensor.\n\nParameters\n\nvalue\n\npython:float\n\nSensor’s width (mm).\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_height(value=5.0)\n\nSet the height of the sensor.\n\nParameters\n\nvalue\n\npython:float\n\nSensor’s height (mm).\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n\n\nSensorCamera.set_mode_geometric()\n\nSet mode geometric for the camera sensor.\n\nThis is a simplified version of the Camera Sensor.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nGeometric Camera feature\n\n\n\nSensorCamera.set_mode_photometric()\n\nSet mode photometric for the camera sensor.\n\nThis allows setting every Camera Sensor parameter, including the photometric definition\nparameters.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric Camera Sensor feature\n\n\n\nSensorCamera.set_axis_system(axis_system=None)\n\nSet the position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera Sensor feature\n\n\n\nSensorCamera.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nSensor feature."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.html#classes","title":"SensorCamera > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/face/index.html#the-facepy-module","title":"The face.py module","text":"The face.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/face/index.html#summary","title":"The face.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nFace\n\nFeature : Face.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/face/index.html#description","title":"The face.py module > Description","text":"Description\n\nProvides a way to interact with feature: Face."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudItem.html#cruditem","title":"CrudItem","text":"CrudItem\n\n\n\nclass ansys.speos.core.kernel.crud.CrudItem(db, key)\n\nItem of a database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.crud.CrudStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey (also named guid) of the item in the database.\n\nParameters\n\ndb (CrudStub)\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudItem.html#overview","title":"CrudItem > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nstub\n\nThe database.\n\nkey\n\nThe guid in database."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudItem.html#import-detail","title":"CrudItem > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/crud/CrudItem.html#property-detail","title":"CrudItem > Property detail","text":"Property detail\n\n\n\nproperty CrudItem.stub: CrudStub\n\nThe database.\n\n\n\nproperty CrudItem.key: str\n\nThe guid in database."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#layertypeface","title":"LayerTypeFace","text":"LayerTypeFace\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.LayerTypeFace(layer_type_face, default_values=True, stable_ctr=False)\n\nType of layer : Face.\n\nIncludes in the result one layer per surface selected.\nBy default, a filtering mode by last impact is chosen.\n\nParameters\n\nlayer_type_face\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeFace\n\nLayerTypeFace protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_face (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeFace)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_face method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#overview","title":"LayerTypeFace > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_sca_filtering_mode_intersected_one_time\n\nSet the filtering mode as intersected one time.\n\nset_sca_filtering_mode_last_impact\n\nSet the filtering mode as last impact.\n\nset_layers\n\nSet the layers."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#import-detail","title":"LayerTypeFace > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#method-detail","title":"LayerTypeFace > Method detail","text":"Method detail\n\n\n\nLayerTypeFace.set_sca_filtering_mode_intersected_one_time()\n\nSet the filtering mode as intersected one time.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace.\n\n\n\nLayerTypeFace.set_sca_filtering_mode_last_impact()\n\nSet the filtering mode as last impact.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace.\n\n\n\nLayerTypeFace.set_layers(values)\n\nSet the layers.\n\nParameters\n\nvalues\n\nList[ansys.speos.core.sensor.BaseSensor.FaceLayer]\n\nList of layers\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace."},{"objectID":"Home","href":"getting_started/faq.html#frequently-asked-questions","title":"Frequently asked questions","text":"Frequently asked questions"},{"objectID":"Home","href":"getting_started/faq.html#what-is-pyansys","title":"Frequently asked questions > What is PyAnsys?","text":"What is PyAnsys?\n\nPyAnsys is a set of open source Python libraries that allow you to interface\nwith Ansys Electronics Desktop (AEDT), Ansys Mechanical, Ansys Parametric\nDesign Language (APDL), Ansys Fluent, and other Ansys products.\n\nYou can use PyAnsys libraries within a Python environment of your choice\nin conjunction with external Python libraries."},{"objectID":"Home","href":"getting_started/faq.html#what-ansys-license-is-needed-to-run-the-speos-service","title":"Frequently asked questions > What Ansys license is needed to run the Speos service?","text":"What Ansys license is needed to run the Speos service?\n\nThe Speos service requires an Ansys Speos license to run.\n\nGo to Getting started"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#voptemplatestub","title":"VOPTemplateStub","text":"VOPTemplateStub\n\n\n\nclass ansys.speos.core.kernel.vop_template.VOPTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for Volume Optical Properties templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a VOPTemplateStub is to retrieve it from SpeosClient via vop_templates()\nmethod. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> vop_t_db = speos.client.vop_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#overview","title":"VOPTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#import-detail","title":"VOPTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#method-detail","title":"VOPTemplateStub > Method detail","text":"Method detail\n\n\n\nVOPTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nvop_template.VOPTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object created.\n\n\n\nVOPTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to read.\n\nReturns\n\nvop_template.VOPTemplate\n\nDatamodel of the entry.\n\n\n\nVOPTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to update.\n\ndata\n\nvop_template.VOPTemplate\n\nNew datamodel for the entry.\n\n\n\nVOPTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to delete.\n\n\n\nVOPTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.vop_template.VOPTemplateLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#balancemodeuserwhite","title":"BalanceModeUserWhite","text":"BalanceModeUserWhite\n\n\n\nclass ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite(balance_mode_user_white, default_values=True, stable_ctr=False)\n\nBalanceMode : UserWhite.\n\nIn addition to the basic treatment, it allows to apply specific coefficients to the\nred, green, blue images.\nBy default, coefficients of 1 are chosen for red, green and blue images.\n\nParameters\n\nbalance_mode_user_white\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.\n\n\n\nSensorCameraBalanceModeUserwhite\n\nSensorCameraBalanceModeUserwhite protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nbalance_mode_user_white (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeUserwhite)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_balance_mode_user_white method\navailable in color class."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#overview","title":"BalanceModeUserWhite > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_red_gain\n\nSet red gain.\n\nset_green_gain\n\nSet green gain.\n\nset_blue_gain\n\nSet blue gain."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#import-detail","title":"BalanceModeUserWhite > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#method-detail","title":"BalanceModeUserWhite > Method detail","text":"Method detail\n\n\n\nBalanceModeUserWhite.set_red_gain(value=1)\n\nSet red gain.\n\nParameters\n\nvalue\n\npython:float\n\nRed gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite.\n\n\n\nBalanceModeUserWhite.set_green_gain(value=1)\n\nSet green gain.\n\nParameters\n\nvalue\n\npython:float\n\nGreen gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite.\n\n\n\nBalanceModeUserWhite.set_blue_gain(value=1)\n\nSet blue gain.\n\nParameters\n\nvalue\n\npython:float\n\nBlue gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#basesimulation","title":"BaseSimulation","text":"BaseSimulation\n\n\n\n\n\nclass ansys.speos.core.simulation.BaseSimulation(project, name, description='', metadata=None, simulation_instance=None)\n\nSuper Class for all simulations.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nParameters\n\nproject (BaseSimulation.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#overview","title":"BaseSimulation > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_sensor_paths\n\nSet the sensors that the simulation will take into account.\n\nset_source_paths\n\nSet the sources that the simulation will take into account.\n\nexport\n\nExport simulation.\n\ncompute_CPU\n\nCompute the simulation on CPU.\n\ncompute_GPU\n\nCompute the simulation on GPU.\n\nget\n\nGet dictionary corresponding to the project - read only.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nAttributes\n\n\n\n\n\nsimulation_template_link\n\nLink object for the simulation template in database.\n\njob_link\n\nLink object for the job in database.\n\nresult_list\n\nList of results created after a simulation compute.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the simulation."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#import-detail","title":"BaseSimulation > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#attribute-detail","title":"BaseSimulation > Attribute detail","text":"Attribute detail\n\n\n\nBaseSimulation.simulation_template_link = None\n\nLink object for the simulation template in database.\n\n\n\nBaseSimulation.job_link = None\n\nLink object for the job in database.\n\n\n\nBaseSimulation.result_list = []\n\nList of results created after a simulation compute."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#method-detail","title":"BaseSimulation > Method detail","text":"Method detail\n\n\n\nBaseSimulation.set_sensor_paths(sensor_paths)\n\nSet the sensors that the simulation will take into account.\n\nParameters\n\nsensor_paths\n\nList[python:str]\n\nThe sensor paths.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n\n\nBaseSimulation.set_source_paths(source_paths)\n\nSet the sources that the simulation will take into account.\n\nParameters\n\nsource_paths\n\nList[python:str]\n\nThe source paths.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n\n\nBaseSimulation.export(export_path)\n\nExport simulation.\n\nParameters\n\nexport_path: Union[str, Path]\n\ndirectory to export simulation to.\n\nReturns\n\npython:None\n\n\n\n\n\nBaseSimulation.compute_CPU(threads_number=None, export_vtp=False)\n\nCompute the simulation on CPU.\n\nParameters\n\nthreads_number\n\npython:int, optional\n\nThe number of threads used.\nBy default, None, means the number of processor available.\n\nexport_vtp: bool, optional\n\nTrue to generate vtp from the simulation results.\n\nReturns\n\nList[ansys.api.speos.job.v2.job_pb2.Result]\n\nList of simulation results.\n\n\n\nBaseSimulation.compute_GPU(export_vtp=False)\n\nCompute the simulation on GPU.\n\nParameters\n\nexport_vtp: bool, optional\n\nTrue to generate vtp from the simulation results.\n\nReturns\n\nList[ansys.api.speos.job.v2.job_pb2.Result]\n\nList of simulation results.\n\n\n\nBaseSimulation.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\nDictionary of Simulation Feature\n\n\n\nBaseSimulation.__str__()\n\nReturn the string representation of the simulation.\n\n\n\nBaseSimulation.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n\n\nBaseSimulation.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n\n\nBaseSimulation.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/BaseSimulation.html#classes","title":"BaseSimulation > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/proto_message_utils/index.html#the-proto_message_utilspy-module","title":"The proto_message_utils.py module","text":"The proto_message_utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/proto_message_utils/index.html#summary","title":"The proto_message_utils.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nprotobuf_message_to_str\n\nConvert a protobuf message to formatted json string.\n\nprotobuf_message_to_dict\n\nConvert protobuf message to a formatted json dict."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/proto_message_utils/index.html#description","title":"The proto_message_utils.py module > Description","text":"Description\n\nModule with utility elements for protobuf messages from Speos RPC server."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/proto_message_utils/index.html#module-detail","title":"The proto_message_utils.py module > Module detail","text":"Module detail\n\n\n\nproto_message_utils.protobuf_message_to_str(message, with_full_name=True)\n\nConvert a protobuf message to formatted json string.\n\nParameters\n\nmessage\n\ngoogle.protobuf.message.Message\n\nProtobuf message.\n\nwith_full_name\n\nbool\n\nPrepend the returned string with protobuf message full name.\nBy default, True.\n\nReturns\n\npython:str\n\nprotobuf message formatted to be logged/printed.\n\n\n\nproto_message_utils.protobuf_message_to_dict(message)\n\nConvert protobuf message to a formatted json dict.\n\nParameters\n\nmessage\n\ngoogle.protobuf.message.Message\n\nProtobuf message.\n\nReturns\n\npython:dict\n\nprotobuf message formatted as dict."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/index.html#the-partpy-module","title":"The part.py module","text":"The part.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/index.html#summary","title":"The part.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPartLink\n\nLink object for a part in database.\n\nPartStub\n\nDatabase interactions for part.\n\nAttributes\n\n\n\n\n\nProtoPart\n\nPart protobuf class : ansys.api.speos.part.v1.part_pb2.Part\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/index.html#description","title":"The part.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/index.html#module-detail","title":"The part.py module > Module detail","text":"Module detail\n\n\n\npart.ProtoPart\n\nPart protobuf class : ansys.api.speos.part.v1.part_pb2.Part"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/index.html#the-simulationpy-module","title":"The simulation.py module","text":"The simulation.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/index.html#summary","title":"The simulation.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBaseSimulation\n\nSuper Class for all simulations.\n\nSimulationDirect\n\nType of Simulation: Direct.\n\nSimulationInverse\n\nType of simulation : Inverse.\n\nSimulationInteractive\n\nType of simulation : Interactive.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/index.html#description","title":"The simulation.py module > Description","text":"Description\n\nProvides a way to interact with Speos feature: Simulation."},{"objectID":"Home","href":"getting_started/docker/index.html#docker-containers","title":"Docker containers","text":"Docker containers"},{"objectID":"Home","href":"getting_started/docker/index.html#what-is-docker","title":"Docker containers > What is Docker?","text":"What is Docker?\n\nDocker is an open platform for developing, shipping, and running apps in a\ncontainerized way.\n\nContainers are standard units of software that package the code and all its dependencies\nso that the app runs quickly and reliably across different computing environments.\n\nEnsure that Docker is installed on the machine where the Speos service is running. Otherwise,\nsee Install Docker Engine in the Docker documentation."},{"objectID":"Home","href":"getting_started/docker/index.html#select-your-docker-container","title":"Docker containers > Select your Docker container","text":"Select your Docker container\n\nCurrently, the Speos service backend is delivered as a Linux Docker container.\n\nSelect the kind of Docker container you want to build:\n\nLinux Docker container\n\nBuild a Windows Docker container for the Speos service\nand use it from PySpeos.\n\nlinux_container\n\nGo to Getting started\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/index.html#the-jobpy-module","title":"The job.py module","text":"The job.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/index.html#summary","title":"The job.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nJobLink\n\nLink object for job in database.\n\nJobStub\n\nDatabase interactions for job.\n\nAttributes\n\n\n\n\n\nProtoJob\n\nJob protobuf class : ansys.api.speos.job.v2.job_pb2.Job\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/index.html#description","title":"The job.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/job/index.html#module-detail","title":"The job.py module > Module detail","text":"Module detail\n\n\n\njob.ProtoJob\n\nJob protobuf class : ansys.api.speos.job.v2.job_pb2.Job"},{"objectID":"Home","href":"api/ansys/speos/core/speos/Speos.html#speos","title":"Speos","text":"Speos\n\n\n\nclass ansys.speos.core.speos.Speos(host=DEFAULT_HOST, port=DEFAULT_PORT, version=DEFAULT_VERSION, channel=None, message_size=MAX_CLIENT_MESSAGE_SIZE, remote_instance=None, timeout=60, logging_level=logging.INFO, logging_file=None, speos_install_path=None)\n\nAllows the Speos session (client) to interact with the SpeosRPC server.\n\nParameters\n\nhost\n\npython:str, optional\n\nHost where the server is running.\nBy default, ansys.speos.core.kernel.client.DEFAULT_HOST.\n\nport\n\nUnion[python:str, python:int], optional\n\nPort number where the server is running.\nBy default, ansys.speos.core.kernel.client.DEFAULT_PORT.\n\nversion\n\npython:str\n\nThe Speos server version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen as\nansys.speos.core.kernel.client.LATEST_VERSION.\n\nchannel\n\nChannel, optional\n\ngRPC channel for server communication.\nBy default, None.\n\nmessage_size: int\n\nMaximum Message size of a newly generated channel\nBy default, MAX_CLIENT_MESSAGE_SIZE.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance\n\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\n\ntimeout\n\nReal, optional\n\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\n\nlogging_level\n\npython:int, optional\n\nThe logging level to be applied to the client.\nBy default, INFO.\n\nlogging_file\n\nOptional[python:str, Path]\n\nThe file to output the log, if requested. By default, None.\n\nParameters\n\nhost (str)\n\nport (Union[str, int])\n\nversion (str)\n\nchannel (Optional[grpc.Channel])\n\nmessage_size (int)\n\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\n\ntimeout (Optional[int])\n\nlogging_level (Optional[int])\n\nlogging_file (Optional[Union[pathlib.Path, str]])\n\nspeos_install_path (Optional[Union[pathlib.Path, str]])"},{"objectID":"Home","href":"api/ansys/speos/core/speos/Speos.html#overview","title":"Speos > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nclose\n\nClose the channel and deletes all Speos objects from memory.\n\nProperties\n\n\n\n\n\nclient\n\nThe Speos instance client."},{"objectID":"Home","href":"api/ansys/speos/core/speos/Speos.html#import-detail","title":"Speos > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/speos/Speos.html#property-detail","title":"Speos > Property detail","text":"Property detail\n\n\n\nproperty Speos.client: ansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client."},{"objectID":"Home","href":"api/ansys/speos/core/speos/Speos.html#method-detail","title":"Speos > Method detail","text":"Method detail\n\n\n\nSpeos.close()\n\nClose the channel and deletes all Speos objects from memory.\n\nReturns\n\nbool\n\nInformation if the server instance was terminated.\n\nNotes\n\nIf an instance of the Speos Service was started using\nPyPIM, this instance will be deleted."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationDirect.html#simulationdirect","title":"SimulationDirect","text":"SimulationDirect\n\n\n\nclass ansys.speos.core.simulation.SimulationDirect(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of Simulation: Direct.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to True,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 200000 rays,\nwith an automatic save frequency of 1800s.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationDirect.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationDirect.html#overview","title":"SimulationDirect > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_geom_distance_tolerance\n\nSet the geometry distance tolerance.\n\nset_max_impact\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nset_weight\n\nActivate weight. Highly recommended to fill.\n\nset_weight_none\n\nDeactivate weight.\n\nset_colorimetric_standard_CIE_1931\n\nSet the colorimetric standard to CIE 1931.\n\nset_colorimetric_standard_CIE_1964\n\nSet the colorimetric standard to CIE 1964.\n\nset_dispersion\n\nActivate/Deactivate the dispersion calculation.\n\nset_ambient_material_file_uri\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nset_stop_condition_rays_number\n\nTo stop the simulation after a certain number of rays were sent.\n\nset_stop_condition_duration\n\nTo stop the simulation after a certain duration.\n\nset_automatic_save_frequency\n\nDefine a backup interval (s).\n\nset_light_expert\n\nActivate/Deactivate the generation of light expert file.\n\ncommit\n\nSave feature: send the local data to the speos server database."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationDirect.html#import-detail","title":"SimulationDirect > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationDirect.html#method-detail","title":"SimulationDirect > Method detail","text":"Method detail\n\n\n\nSimulationDirect.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nWeight.\n\n\n\nSimulationDirect.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_dispersion(value=True)\n\nActivate/Deactivate the dispersion calculation.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, True, means activate.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_stop_condition_rays_number(value=200000)\n\nTo stop the simulation after a certain number of rays were sent.\n\nSet None as value to have no condition about rays number.\n\nParameters\n\nvalue\n\npython:int, optional\n\nThe number of rays to send. Or None if no condition about the number of rays.\nBy default, 200000.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_stop_condition_duration(value=None)\n\nTo stop the simulation after a certain duration.\n\nSet None as value to have no condition about duration.\n\nParameters\n\nvalue\n\npython:int, optional\n\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_automatic_save_frequency(value=1800)\n\nDefine a backup interval (s).\n\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\n\nParameters\n\nvalue\n\npython:int, optional\n\nBackup interval (s).\nBy default, 1800.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n\n\nSimulationDirect.set_light_expert(value=False, ray_number=10000000.0)\n\nActivate/Deactivate the generation of light expert file.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nray_number\n\npython:int\n\nnumber of rays stored in lpf file\nBy default, 10e6\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nInteractive simulation\n\n\n\nSimulationDirect.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nSimulation feature."},{"objectID":"Examples","href":"examples/kernel/object-link.html#define-constants","title":"Examples > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/object-link.html#startconnect-to-speos-rpc-server","title":"Examples > Define constants > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/object-link.html#create-an-objectlink","title":"Examples > Define constants > Create an ObjectLink","text":"Create an ObjectLink\n\nRetrieve the access to the database.\n\n\n\n\n\nCreate the protobuf message.\n\n\n\n\n\nCreate the ObjectLink (here a SOPTemplateLink).\n\n\n\n\n\n\n\n\n\nCreate another ObjectLink from another protobuf message.\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/object-link.html#modify-an-objectlink","title":"Examples > Define constants > Modify an ObjectLink","text":"Modify an ObjectLink\n\nRetrieve the protobuf message corresponding to the ObjectLink.\n\n\n\n\n\nModify data locally\n\n\n\n\n\nUpdate on db\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/object-link.html#delete-an-objectlink","title":"Examples > Define constants > Delete an ObjectLink","text":"Delete an ObjectLink\n\nThis means deleting data in db\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-speos-core endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#facelayer","title":"FaceLayer","text":"FaceLayer\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.FaceLayer(name, geometries)\n\nLayer composed of name and geometries.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nList of geometries included in this layer.\n\nParameters\n\nname (str)\n\ngeometries (List[ansys.speos.core.geo_ref.GeoRef])"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#overview","title":"FaceLayer > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nname\n\nName of the layer\n\ngeometries\n\nList of geometries included in this layer."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#import-detail","title":"FaceLayer > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#attribute-detail","title":"FaceLayer > Attribute detail","text":"Attribute detail\n\n\n\nFaceLayer.name\n\nName of the layer\n\n\n\nFaceLayer.geometries\n\nList of geometries included in this layer."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/index.html#the-source_templatepy-module","title":"The source_template.py module","text":"The source_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/index.html#summary","title":"The source_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSourceTemplateLink\n\nLink object for a source template in database.\n\nSourceTemplateStub\n\nDatabase interactions for source templates.\n\nAttributes\n\n\n\n\n\nProtoSourceTemplate\n\nSourceTemplate protobuf class : ansys.api.speos.source.v1.source_pb2.SourceTemplate\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/index.html#description","title":"The source_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/index.html#module-detail","title":"The source_template.py module > Module detail","text":"Module detail\n\n\n\nsource_template.ProtoSourceTemplate\n\nSourceTemplate protobuf class : ansys.api.speos.source.v1.source_pb2.SourceTemplate"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneLink.html#scenelink","title":"SceneLink","text":"SceneLink\n\n\n\nclass ansys.speos.core.kernel.scene.SceneLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a scene in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.scene.SceneStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the scene in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.scene import ProtoScene\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sce_db = speos.client.scenes()\n>>> sce_link = sce_db.create(message=ProtoScene(name=\"Empty_Scene\"))"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneLink.html#overview","title":"SceneLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nload_file\n\nLoad speos file to fill the scene.\n\nget_source_ray_paths\n\nRetrieve source ray paths.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the scene."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneLink.html#import-detail","title":"SceneLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/scene/SceneLink.html#method-detail","title":"SceneLink > Method detail","text":"Method detail\n\n\n\nSceneLink.__str__()\n\nReturn the string representation of the scene.\n\n\n\nSceneLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nscene.Scene\n\nScene datamodel.\n\n\n\nSceneLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nscene.Scene\n\nNew scene datamodel.\n\n\n\nSceneLink.delete()\n\nRemove datamodel from database.\n\n\n\nSceneLink.load_file(file_uri)\n\nLoad speos file to fill the scene.\n\nParameters\n\nfile_uri\n\npython:str\n\nFile to be loaded.\n\n\n\nSceneLink.get_source_ray_paths(source_path, rays_nb=100, raw_data=True, display_data=False)\n\nRetrieve source ray paths.\n\nParameters\n\nsource_path\n\npython:str\n\nPath to the source in the Scene : “<source name>” for a specific source in the current\nscene, or “<sub-scene name>/<source name>” for a specific source in a specific sub\nscene.\n\nrays_nb\n\npython:int, optional\n\nNumber of rays generated by the source.\nBy default, 100.\n\nraw_data: bool, optional\n\nIf True, get the wavelengths in response stream.\n\ndisplay_data: bool, optional\n\nIf True, get the colors (RGB24 format) in response stream.\n\nReturns\n\nIterator[ansys.api.speos.results.v1.ray_path_pb2.RayPath]\n\nRay paths generated by the source."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#raysnumberpersource","title":"RaysNumberPerSource","text":"RaysNumberPerSource\n\n\n\nclass ansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource(source_path, rays_nb)\n\nStructure to describe the number of rays requested for a specific source.\n\nParameters\n\nsource_path\n\npython:str\n\nSource selected via its path (“SourceName”).\n\nrays_nb\n\npython:int, optional\n\nNumber of rays to be emitted by the source.\nIf None is given, 100 rays will be sent.\n\nParameters\n\nsource_path (str)\n\nrays_nb (Optional[int])"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#overview","title":"RaysNumberPerSource > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nsource_path\n\nSource path.\n\nrays_nb\n\nNumber of rays to be emitted by the source. If None, it means 100 rays."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#import-detail","title":"RaysNumberPerSource > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#attribute-detail","title":"RaysNumberPerSource > Attribute detail","text":"Attribute detail\n\n\n\nRaysNumberPerSource.source_path\n\nSource path.\n\n\n\nRaysNumberPerSource.rays_nb\n\nNumber of rays to be emitted by the source. If None, it means 100 rays."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#voptemplatelink","title":"VOPTemplateLink","text":"VOPTemplateLink\n\n\n\nclass ansys.speos.core.kernel.vop_template.VOPTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a Volume Optical Property (VOP) template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.vop_template.VOPTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the vop template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.vop_template import ProtoVOPTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> vop_t_db = speos.client.vop_templates()\n>>> vop_t_message = ProtoVOPTemplate(name=\"Opaque\")\n>>> vop_t_message.opaque.SetInParent()\n>>> vop_t_link = vop_t_db.create(message=vop_t_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#overview","title":"VOPTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the vop template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#import-detail","title":"VOPTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#method-detail","title":"VOPTemplateLink > Method detail","text":"Method detail\n\n\n\nVOPTemplateLink.__str__()\n\nReturn the string representation of the vop template.\n\n\n\nVOPTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nvop_template.VOPTemplate\n\nVOPTemplate datamodel.\n\n\n\nVOPTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nvop_template.VOPTemplate\n\nNew VOPTemplate datamodel.\n\n\n\nVOPTemplateLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/body/index.html#the-bodypy-module","title":"The body.py module","text":"The body.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/body/index.html#summary","title":"The body.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBody\n\nFeature : Body.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/body/index.html#description","title":"The body.py module > Description","text":"Description\n\nProvides a way to interact with feature: Body."},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#body","title":"Body","text":"Body\n\n\n\nclass ansys.speos.core.body.Body(speos_client, name, description='', metadata=None, parent_part=None)\n\nFeature : Body.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nparent_part\n\nUnion[ansys.speos.core.part.Part, ansys.speos.core.part.Part.SubPart], optional\n\nFeature containing this sub part.\nBy default, None.\n\nAttributes\n\nbody_link\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object for the body in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nparent_part (Optional[Union[ansys.speos.core.part.Part, ansys.speos.core.part.Part.SubPart]])"},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#overview","title":"Body > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_face\n\nCreate a face in this element.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nfind\n\nFind feature(s). In a body, only faces features can be found.\n\nProperties\n\n\n\n\n\nvisual_data\n\nProperty containing irradiance sensor visualization data.\n\ngeo_path\n\nGeometry path to be used within other speos objects.\n\nAttributes\n\n\n\n\n\nbody_link\n\n\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the body."},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#import-detail","title":"Body > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#property-detail","title":"Body > Property detail","text":"Property detail\n\n\n\nproperty Body.visual_data\n\nProperty containing irradiance sensor visualization data.\n\nReturns\n\nVisualData\n\nInstance of VisualData Class for pyvista.PolyData of feature faces, coordinate_systems.\n\n\n\nproperty Body.geo_path: ansys.speos.core.geo_ref.GeoRef\n\nGeometry path to be used within other speos objects."},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#attribute-detail","title":"Body > Attribute detail","text":"Attribute detail\n\n\n\nBody.body_link = None\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/body/Body.html#method-detail","title":"Body > Method detail","text":"Method detail\n\n\n\nBody.create_face(name, description='', metadata=None)\n\nCreate a face in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nBody.__str__()\n\nReturn the string representation of the body.\n\n\n\nBody.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n\n\nBody.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n\n\nBody.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n\n\nBody.find(name, name_regex=False, feature_type=None)\n\nFind feature(s). In a body, only faces features can be found.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nExample “FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.face.Face).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[ansys.speos.core.face.Face]\n\nFound features."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#sensortemplatestub","title":"SensorTemplateStub","text":"SensorTemplateStub\n\n\n\nclass ansys.speos.core.kernel.sensor_template.SensorTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for sensor templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SensorTemplateStub is to retrieve it from SpeosClient via\nsensor_templates() method. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> ssr_t_db = speos.client.sensor_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#overview","title":"SensorTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#import-detail","title":"SensorTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#method-detail","title":"SensorTemplateStub > Method detail","text":"Method detail\n\n\n\nSensorTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsensor_template.SensorTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object created.\n\n\n\nSensorTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to read.\n\nReturns\n\nsensor_template.SensorTemplate\n\nDatamodel of the entry.\n\n\n\nSensorTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to update.\n\ndata\n\nsensor_template.SensorTemplate\n\nNew datamodel for the entry.\n\n\n\nSensorTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to delete.\n\n\n\nSensorTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.sensor_template.SensorTemplateLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/index.html#the-vop_templatepy-module","title":"The vop_template.py module","text":"The vop_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/index.html#summary","title":"The vop_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nVOPTemplateLink\n\nLink object for a Volume Optical Property (VOP) template in database.\n\nVOPTemplateStub\n\nDatabase interactions for Volume Optical Properties templates.\n\nAttributes\n\n\n\n\n\nProtoVOPTemplate\n\nVOPTemplate protobuf class : ansys.api.speos.vop.v1.vop_pb2.VOPTemplate\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/index.html#description","title":"The vop_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/vop_template/index.html#module-detail","title":"The vop_template.py module > Module detail","text":"Module detail\n\n\n\nvop_template.ProtoVOPTemplate\n\nVOPTemplate protobuf class : ansys.api.speos.vop.v1.vop_pb2.VOPTemplate"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#intensitytemplatestub","title":"IntensityTemplateStub","text":"IntensityTemplateStub\n\n\n\nclass ansys.speos.core.kernel.intensity_template.IntensityTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for intensity templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a IntensityTemplateStub is to retrieve it from SpeosClient via\nintensity_templates() method. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> int_t_db = speos.client.intensity_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#overview","title":"IntensityTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#import-detail","title":"IntensityTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#method-detail","title":"IntensityTemplateStub > Method detail","text":"Method detail\n\n\n\nIntensityTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nintensity_template.IntensityTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object created.\n\n\n\nIntensityTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to read.\n\nReturns\n\nintensity_template.IntensityTemplate\n\nDatamodel of the entry.\n\n\n\nIntensityTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to update.\n\ndata\n\nintensity_template.IntensityTemplate\n\nNew datamodel for the entry.\n\n\n\nIntensityTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to delete.\n\n\n\nIntensityTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.intensity_template.IntensityTemplateLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/project/index.html#the-projectpy-module","title":"The project.py module","text":"The project.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/project/index.html#summary","title":"The project.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nProject\n\nA project describes all Speos features.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/project/index.html#description","title":"The project.py module > Description","text":"Description\n\nProvides a way to gather Speos features."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#sourcetemplatestub","title":"SourceTemplateStub","text":"SourceTemplateStub\n\n\n\nclass ansys.speos.core.kernel.source_template.SourceTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for source templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SourceTemplateStub is to retrieve it from SpeosClient via\nsource_templates() method. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> src_t_db = speos.client.source_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#overview","title":"SourceTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#import-detail","title":"SourceTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#method-detail","title":"SourceTemplateStub > Method detail","text":"Method detail\n\n\n\nSourceTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsource_template.SourceTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object created.\n\n\n\nSourceTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to read.\n\nReturns\n\nsource_template.SourceTemplate\n\nDatamodel of the entry.\n\n\n\nSourceTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to update.\n\ndata\n\nsource_template.SourceTemplate\n\nNew datamodel for the entry.\n\n\n\nSourceTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to delete.\n\n\n\nSourceTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.source_template.SourceTemplateLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#basebsdf","title":"BaseBSDF","text":"BaseBSDF\n\n\n\nclass ansys.speos.core.bsdf.BaseBSDF(speos, stub, namespace)\n\nSuper class for all BSDF datamodels.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\n\n\nstub\n\ngrpc stub to connect to BSDF service\n\nnamespace\n\ngrpc namespace for the bsdf\n\nParameters\n\nspeos (ansys.speos.core.speos.Speos)\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#overview","title":"BaseBSDF > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_interpolation_enhancement\n\nApply automatic interpolation enhancement.\n\nProperties\n\n\n\n\n\nhas_transmission\n\nContains the BSDF Transmission data.\n\nhas_reflection\n\nContains the BSDF Reflection data.\n\nbrdf\n\nList of BRDFDatapoints.\n\nbtdf\n\nList of BTDFDatapoints.\n\nnb_incidents\n\nNumber of incidence angle for reflection and transmission.\n\nincident_angles\n\nList of incident angles for reflection and transmission.\n\ninterpolation_settings\n\nInterpolation enhancement settings of the bsdf file.\n\nAttributes\n\n\n\n\n\nclient\n\n\n\nanisotropy_vector\n\n\n\ndescription\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#import-detail","title":"BaseBSDF > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#property-detail","title":"BaseBSDF > Property detail","text":"Property detail\n\n\n\nproperty BaseBSDF.has_transmission: bool\n\nContains the BSDF Transmission data.\n\n\n\nproperty BaseBSDF.has_reflection: bool\n\nContains the BSDF Reflection data.\n\n\n\nproperty BaseBSDF.brdf: collections.abc.Collection[BxdfDatapoint]\n\nList of BRDFDatapoints.\n\n\n\nproperty BaseBSDF.btdf: collections.abc.Collection[BxdfDatapoint]\n\nList of BTDFDatapoints.\n\n\n\nproperty BaseBSDF.nb_incidents: list[int]\n\nNumber of incidence angle for reflection and transmission.\n\nReturns\n\npython:list[python:int]:\n\nfirst value of the list is nb of reflective data, second value is nb of transmittive\ndata\n\n\n\nproperty BaseBSDF.incident_angles: list[list[float] | None, list[float] | None]\n\nList of incident angles for reflection and transmission.\n\nReturns\n\npython:list[Union[python:list[python:float], python:None],Union[python:list[python:float], python:None]]\n\nReturns a nested list of incidence angels for reflective and transmittive\ndata if not available the value will be None\n\n\n\nproperty BaseBSDF.interpolation_settings: None | InterpolationEnhancement\n\nInterpolation enhancement settings of the bsdf file.\n\nIf bsdf file does not have interpolation enhancement settings, return None.\nif bsdf file has interpolation enhancement settings, return InterpolationEnhancement."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#attribute-detail","title":"BaseBSDF > Attribute detail","text":"Attribute detail\n\n\n\nBaseBSDF.client\n\n\n\n\n\nBaseBSDF.anisotropy_vector = [1, 0, 0]\n\n\n\n\n\nBaseBSDF.description = ''\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/BaseBSDF.html#method-detail","title":"BaseBSDF > Method detail","text":"Method detail\n\n\n\nBaseBSDF.create_interpolation_enhancement(index_1=1.0, index_2=1.0)\n\nApply automatic interpolation enhancement.\n\nReturn interpolation settings to user if settings need change.\n\nParameters\n\nindex_1\n\npython:float\n\noutside refractive index\n\nindex_2\n\npython:float\n\ninside refractive index\n\nReturns\n\nansys.speos.core.bsdf._InterpolationEnhancement\n\nautomatic interpolation settings with index_1 = 1 and index_2 = 1 by default."},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PySpeos.\n\nThe following contribution information is specific to PySpeos."},{"objectID":"Contribute","href":"contributing.html#clone-the-repository","title":"Contribute > Clone the repository","text":"Clone the repository\n\nTo clone and install the latest PySpeos release in development mode, run\nthese commands:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PySpeos Issues\npage to submit questions, report bugs, and request new features. When possible, you\nshould use these issue templates:\n\nBug, problem, error: For filing a bug report\n\nDocumentation error: For requesting modifications to the documentation\n\nAdding an example: For proposing a new example\n\nNew feature: For requesting enhancements to the code\n\nIf your issue does not fit into one of these template categories, you can click\nthe link for opening a blank issue.\n\nTo reach the project support team, email pyansys.core@ansys.com."},{"objectID":"Contribute","href":"contributing.html#view-documentation","title":"Contribute > View documentation","text":"View documentation\n\nDocumentation for the latest stable release of PySpeos is hosted at\nPySpeos Documentation.\n\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions."},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nPySpeos follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys Developer’s Guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#build-the-documentation","title":"Contribute > Build the documentation","text":"Build the documentation\n\nTo build the full documentation, you must have a running SpeosRPC server\nbecause it is used to generate the examples in the documentation. It is also\nrecommended that the service is running as a Docker container.\n\nIf you do not have the SpeosRPC server installed, you can still build the\ndocumentation, but the examples are not generated. To build the\ndocumentation without the examples, define the following environment variable:\n\nTo build the documentation locally, you must run this command to install the\ndocumentation dependencies:\n\nThen, navigate to the docs directory and run this command:\n\nThe documentation is built in the docs/_build/html directory.\n\nYou can clean the documentation build by running this command:"},{"objectID":"Contribute","href":"contributing.html#run-tests","title":"Contribute > Run tests","text":"Run tests\n\nPySpeos uses pytest for testing."},{"objectID":"Contribute","href":"contributing.html#prerequisites","title":"Contribute > Prerequisites","text":"Prerequisites\n\nPrior to running the tests, you must run this command to install the test dependencies:"},{"objectID":"Contribute","href":"contributing.html#running-tests","title":"Contribute > Running tests","text":"Running tests\n\nTo run all available the tests, you need to first navigate to the root directory of the repository and run this command:\n\nThe tests require the SpeosRPC server to be installed and running on your machine.\nThe tests fail if the service is not running. It is recommended for the SpeosRPC server\nto be running as a Docker container.\n\nIf you want to run only the supported features tests of all Speos versions, use the following:\n\nIf you want to run only the supported features tests of a specific Speos version, use the following:\n\nWhere speos_version is 251 for Speos 25R1, 252 for Speos 25R2, and so on. Each version considers the latest available Service Pack."},{"objectID":"Contribute","href":"contributing.html#creating-tests","title":"Contribute > Creating tests","text":"Creating tests\n\nWhen a new feature is developed, new test have to be created and correctly marked if necessary as follows:\n\nsupported_speos_versions(min, max): Feature only supported from minimal to maximal Speos versions.\n\nYou can mark a test as follows:\n\nThe minimal supported version of Speos is required for the supported_speos_versions() marker. If test has no markers, it is considered supported on all Speos versions."},{"objectID":"Contribute","href":"contributing.html#discontinuing-tests","title":"Contribute > Discontinuing tests","text":"Discontinuing tests\n\nIf a feature is discontinued, update the respective tests maximal supported version:\n\nIf this feature was supported on all Speos versions, add the marker and keep the minimal version undefined:"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/open_result/index.html#the-open_resultpy-module","title":"The open_result.py module","text":"The open_result.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/open_result/index.html#summary","title":"The open_result.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nopen_result_image\n\nRetrieve an image from a specific simulation result."},{"objectID":"Home","href":"api/ansys/speos/core/workflow/open_result/index.html#description","title":"The open_result.py module > Description","text":"Description\n\nOpen one of the possible results generated out of the simulation."},{"objectID":"Home","href":"api/ansys/speos/core/workflow/open_result/index.html#module-detail","title":"The open_result.py module > Module detail","text":"Module detail\n\n\n\nopen_result.open_result_image(simulation_feature, result_name)\n\nRetrieve an image from a specific simulation result.\n\nParameters\n\nsimulation_feature\n\nansys.speos.core.simulation.Simulation\n\nThe simulation feature.\n\nresult_name\n\npython:str\n\nThe result name to open as an image."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyStub.html#bodystub","title":"BodyStub","text":"BodyStub\n\n\n\nclass ansys.speos.core.kernel.body.BodyStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for body.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a BodyStub is to retrieve it from SpeosClient via bodies() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> body_db = speos.client.bodies()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyStub.html#overview","title":"BodyStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyStub.html#import-detail","title":"BodyStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/body/BodyStub.html#method-detail","title":"BodyStub > Method detail","text":"Method detail\n\n\n\nBodyStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nbody.Body\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object created.\n\n\n\nBodyStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to read.\n\nReturns\n\nbody.Body\n\nDatamodel of the entry.\n\n\n\nBodyStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to update.\n\ndata\n\nbody.Body\n\nNew datamodel for the entry.\n\n\n\nBodyStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to delete.\n\n\n\nBodyStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.body.BodyLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#subpart","title":"SubPart","text":"SubPart\n\n\n\nclass ansys.speos.core.part.Part.SubPart(speos_client, name, description='', parent_part=None)\n\nFeature : SubPart.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nparent_part\n\nansys.speos.core.part.Part, optional\n\nPart containing this sub part.\nBy default, None.\n\nAttributes\n\npart_link\n\nansys.speos.core.kernel.part.PartLink\n\nLink object for the part in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nparent_part (Optional[Part])"},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#overview","title":"SubPart > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_body\n\nCreate a body in this element.\n\ncreate_sub_part\n\nCreate a sub part in this element.\n\nset_axis_system\n\nSet the sub part orientation (relatively to parent element).\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nfind\n\nFind feature(s).\n\nProperties\n\n\n\n\n\ngeo_path\n\nGeometry path to be used within other speos objects.\n\nAttributes\n\n\n\n\n\npart_link\n\nLink object for the part in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the sub part."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#import-detail","title":"SubPart > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#property-detail","title":"SubPart > Property detail","text":"Property detail\n\n\n\nproperty SubPart.geo_path: ansys.speos.core.geo_ref.GeoRef\n\nGeometry path to be used within other speos objects."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#attribute-detail","title":"SubPart > Attribute detail","text":"Attribute detail\n\n\n\nSubPart.part_link = None\n\nLink object for the part in database."},{"objectID":"Home","href":"api/ansys/speos/core/part/Part.SubPart.html#method-detail","title":"SubPart > Method detail","text":"Method detail\n\n\n\nSubPart.create_body(name, description='', metadata=None)\n\nCreate a body in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n\n\nSubPart.create_sub_part(name, description='')\n\nCreate a sub part in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nSubPart.set_axis_system(axis_system)\n\nSet the sub part orientation (relatively to parent element).\n\nParameters\n\naxis_system\n\nList[python:float], optional\n\nOrientation of the sub part [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nSubPart.__str__()\n\nReturn the string representation of the sub part.\n\n\n\nSubPart.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nSubPart.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nSubPart.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n\n\nSubPart.find(name, name_regex=False, feature_type=None)\n\nFind feature(s).\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.body.Body,                ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[Union[ansys.speos.core.body.Body, ansys.speos.core.face.Face,            ansys.speos.core.part.Part.SubPart]]\n\nFound features."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInverse.html#simulationinverse","title":"SimulationInverse","text":"SimulationInverse\n\n\n\nclass ansys.speos.core.simulation.SimulationInverse(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of simulation : Inverse.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to False,\nsplitting is set to False,\nnumber of gathering rays per source is set to 1,\nmaximum gathering error is set to 0,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 5 passes, with an automatic save frequency of 1800s.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationInverse.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInverse.html#overview","title":"SimulationInverse > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_geom_distance_tolerance\n\nSet the geometry distance tolerance.\n\nset_max_impact\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nset_weight\n\nActivate weight. Highly recommended to fill.\n\nset_weight_none\n\nDeactivate weight.\n\nset_colorimetric_standard_CIE_1931\n\nSet the colorimetric standard to CIE 1931.\n\nset_colorimetric_standard_CIE_1964\n\nSet the colorimetric standard to CIE 1964.\n\nset_dispersion\n\nActivate/Deactivate the dispersion calculation.\n\nset_splitting\n\nActivate/Deactivate the splitting.\n\nset_number_of_gathering_rays_per_source\n\nSet the number of gathering rays per source.\n\nset_maximum_gathering_error\n\nSet the maximum gathering error.\n\nset_ambient_material_file_uri\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nset_stop_condition_passes_number\n\nTo stop the simulation after a certain number of passes.\n\nset_stop_condition_duration\n\nTo stop the simulation after a certain duration.\n\nset_automatic_save_frequency\n\nDefine a backup interval (s).\n\nset_light_expert\n\nActivate/Deactivate the generation of light expert file.\n\ncommit\n\nSave feature: send the local data to the speos server database."},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInverse.html#import-detail","title":"SimulationInverse > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/simulation/SimulationInverse.html#method-detail","title":"SimulationInverse > Method detail","text":"Method detail\n\n\n\nSimulationInverse.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nSimulation.Weight\n\n\n\nSimulationInverse.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_dispersion(value=False)\n\nActivate/Deactivate the dispersion calculation.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_splitting(value=False)\n\nActivate/Deactivate the splitting.\n\nTo split each propagated ray into several paths at their first impact after leaving the\nobserver point.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_number_of_gathering_rays_per_source(value=1)\n\nSet the number of gathering rays per source.\n\nParameters\n\nvalue\n\npython:int\n\nThis number pilots the number of shadow rays to target at each source.\nBy default, 1.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_maximum_gathering_error(value=0)\n\nSet the maximum gathering error.\n\nParameters\n\nvalue\n\npython:int\n\nThis value defines the level below which a source can be neglected.\nBy default, 0, means that no approximation will be done.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_stop_condition_passes_number(value=5)\n\nTo stop the simulation after a certain number of passes.\n\nSet None as value to have no condition about passes.\n\nParameters\n\nvalue\n\npython:int, optional\n\nThe number of passes requested. Or None if no condition about passes.\nBy default, 5.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_stop_condition_duration(value=None)\n\nTo stop the simulation after a certain duration.\n\nSet None as value to have no condition about duration.\n\nParameters\n\nvalue\n\npython:int, optional\n\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_automatic_save_frequency(value=1800)\n\nDefine a backup interval (s).\n\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\n\nParameters\n\nvalue\n\npython:int, optional\n\nBackup interval (s).\nBy default, 1800.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n\n\nSimulationInverse.set_light_expert(value=False, ray_number=10000000.0)\n\nActivate/Deactivate the generation of light expert file.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nray_number\n\npython:int\n\nnumber of rays stored in lpf file\nBy default, 10e6\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInteractive simulation\n\n\n\nSimulationInverse.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nSimulation feature."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#lightpathfinder","title":"LightPathFinder","text":"LightPathFinder\n\n\n\nclass ansys.speos.core.lxp.LightPathFinder(speos, path)\n\nDefine an interface to read LPF files.\n\nLPF files contain a set of simulated rays including their intersections and properties.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos Session (connected to Speos gRPC server).\n\npath\n\npython:str\n\nPath to the LPF file to be opened.\n\nParameters\n\nspeos (ansys.speos.core.project.Speos)\n\npath (str)"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#overview","title":"LightPathFinder > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nfilter_by_face_ids\n\nFilter ray paths based on face IDs and populates filtered_rays property.\n\nfilter_by_body_ids\n\nFilter ray paths based on body IDs and populates filtered_rays property.\n\nfilter_error_rays\n\nFilter ray paths and only shows rays in error.\n\nremove_error_rays\n\nFilter rays and only shows rays not in error.\n\npreview\n\nPreview LPF file with pyvista.\n\nProperties\n\n\n\n\n\nnb_traces\n\nNumber of light paths within LPF data set.\n\nnb_xmps\n\nNumber of sensors involved within LPF data set.\n\nhas_sensor_contributions\n\nDefine if a LPF file contains information regarding the sensor contribution.\n\nsensor_names\n\nList of involved sensor names.\n\nrays\n\nList ray paths within LPF file.\n\nfiltered_rays\n\nList of filtered ray paths.\n\nAttributes\n\n\n\n\n\nclient\n\nSpeos instance client\n\nSpecial methods\n\n\n\n\n\n__str__\n\nCreate string representation of LightPathFinder."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#import-detail","title":"LightPathFinder > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#property-detail","title":"LightPathFinder > Property detail","text":"Property detail\n\n\n\nproperty LightPathFinder.nb_traces: int\n\nNumber of light paths within LPF data set.\n\n\n\nproperty LightPathFinder.nb_xmps: int\n\nNumber of sensors involved within LPF data set.\n\n\n\nproperty LightPathFinder.has_sensor_contributions: bool\n\nDefine if a LPF file contains information regarding the sensor contribution.\n\n\n\nproperty LightPathFinder.sensor_names: list[str]\n\nList of involved sensor names.\n\n\n\nproperty LightPathFinder.rays: list[RayPath]\n\nList ray paths within LPF file.\n\n\n\nproperty LightPathFinder.filtered_rays: list[RayPath]\n\nList of filtered ray paths."},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#attribute-detail","title":"LightPathFinder > Attribute detail","text":"Attribute detail\n\n\n\nLightPathFinder.client\n\nSpeos instance client"},{"objectID":"Home","href":"api/ansys/speos/core/lxp/LightPathFinder.html#method-detail","title":"LightPathFinder > Method detail","text":"Method detail\n\n\n\nLightPathFinder.__str__()\n\nCreate string representation of LightPathFinder.\n\n\n\nLightPathFinder.filter_by_face_ids(options, new=True)\n\nFilter ray paths based on face IDs and populates filtered_rays property.\n\nParameters\n\noptions\n\npython:list[python:int]\n\nList of face IDs.\n\nnew\n\nbool\n\nDefine if a new filter is created or an existing filter is filtered.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n\n\nLightPathFinder.filter_by_body_ids(options, new=True)\n\nFilter ray paths based on body IDs and populates filtered_rays property.\n\nParameters\n\noptions\n\npython:list[python:int]\n\nList of body IDs.\n\nnew\n\nbool\n\nDefine if a new filter is created or an existing filter is filtered.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n\n\nLightPathFinder.filter_error_rays()\n\nFilter ray paths and only shows rays in error.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n\n\nLightPathFinder.remove_error_rays()\n\nFilter rays and only shows rays not in error.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n\n\nLightPathFinder.preview(nb_ray=100, max_ray_length=50.0, ray_filter=False, project=None, screenshot=None)\n\nPreview LPF file with pyvista.\n\nParameters\n\nnb_ray\n\npython:int\n\nNumber of rays to be visualized.\n\nmax_ray_length\n\npython:float\n\nLength of last ray.\n\nray_filter\n\nbool\n\nBoolean to decide if filtered rays or all rays should be shown.\n\nproject\n\nansys.speos.core.project.Project\n\nSpeos Project/Geometry to be added to pyvista visualisation.\n\nscreenshot\n\npython:str or Path or None\n\nPath to save a screenshot of the plotter. If defined Plotter will only create the\nscreenshot\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\nNotes\n\nPlease use the q-key to close the plotter as some\noperating systems (namely Windows) will experience issues\nsaving a screenshot if the exit button in the GUI is pressed."},{"objectID":"Home","href":"getting_started/existing/index.html#use-an-existing-service","title":"Use an existing service","text":"Use an existing service\n\nIf a Speos service is already running, PySpeos can be used to connect to it.\n\nInformation to know for a successful connection are the host and also the port."},{"objectID":"Home","href":"getting_started/existing/index.html#establish-the-connection","title":"Use an existing service > Establish the connection","text":"Establish the connection\n\nFrom Python, establish a connection to the existing Speos service by creating a Speos object:\n\nIf no error messages are received, your connection is established successfully."},{"objectID":"Home","href":"getting_started/existing/index.html#verify-the-connection","title":"Use an existing service > Verify the connection","text":"Verify the connection\n\nIf you want to verify that the connection is successful, request the status of the client\nconnection inside your Speos object:\n\nGo to Getting started"},{"objectID":"Examples","href":"examples/core/source.html#how-to-create-a-source","title":"Examples > How to create a source","text":"How to create a source\n\nThis tutorial demonstrates how to create a source.\n\nThere are different type of sources available: luminaire source, surface source, ray file source."},{"objectID":"Examples","href":"examples/core/source.html#prerequisites","title":"Examples > How to create a source > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/source.html#perform-imports","title":"Examples > How to create a source > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#define-constants","title":"Examples > How to create a source > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#define-helper-functions","title":"Examples > How to create a source > Define helper functions","text":"Define helper functions\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#model-setup","title":"Examples > How to create a source > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/source.html#load-assets","title":"Examples > How to create a source > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#connect-to-the-rpc-server","title":"Examples > How to create a source > Connect to the RPC Server","text":"Connect to the RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#create-a-new-project","title":"Examples > How to create a source > Create a new project","text":"Create a new project\n\nThe only way to create a source using the core layer, is to create it from a project. The Project class is instantiated by passing a Speos instance\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#source-creation","title":"Examples > How to create a source > Source Creation","text":"Source Creation\n\nCreate locally: The mention “local: “ is added when printing the source data and information is not yet pushed to the RPC server\n\n\n\n\n\n\n\n\n\n\n\n\n\nPush it to the server.\n\nAfter it is committed to the server, the mention “local: “ is no more present when printing the source.\n\n\n\n\n\n\n\n\n\nChanging additional Source Properties\n\nSetting several more characteristics.\n\n\n\n\n\n\n\n\n\nSource Instance\n\nAs mention “local: “ is added if it is not yet committed to the server.\n\n\n\n\n\n\n\n\n\nProject:\n\nCommitted feature will appear inside the project information.\n\n\n\n\n\n\n\n\n\nUpdate:\n\nNote: If you are manipulating a source already committed, don’t forget to commit your changes. If you don’t, you will still only watch what is committed on the server.\n\n\n\n\n\n\n\n\n\nReset\n\nPossibility to reset local values from the one available in the server.\n\n\n\n\n\n\n\n\n\nDelete\n\nOnce the data is deleted from the server, you can still work with local data and maybe commit later.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#other-sources-examples","title":"Examples > How to create a source > Other Sources Examples","text":"Other Sources Examples"},{"objectID":"Examples","href":"examples/core/source.html#ray-file-source","title":"Examples > How to create a source > Ray-file source","text":"Ray-file source\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#surface-source","title":"Examples > How to create a source > Surface source","text":"Surface source\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/source.html#ambient-natural-light-source","title":"Examples > How to create a source > Ambient natural light source","text":"Ambient natural light source\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen creating sources, this creates some intermediate objects (spectrums, intensity templates).\n\nDeleting a source does not delete in cascade those objects because they could be used by some other entities from core layer.\n\nThen at the end of the example, we just clean all databases\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#intensitytemplatelink","title":"IntensityTemplateLink","text":"IntensityTemplateLink\n\n\n\nclass ansys.speos.core.kernel.intensity_template.IntensityTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for intensity template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the body in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.intensity_template import (\n...     ProtoIntensityTemplate,\n... )\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> int_t_db = speos.client.intensity_templates()\n>>> int_t_message = ProtoIntensityTemplate(name=\"Cos_3_170\")\n>>> int_t_message.cos.N = 3.0\n>>> int_t_message.cos.total_angle = 170\n>>> int_t_link = int_t_db.create(message=int_t_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#overview","title":"IntensityTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nget_library_type_info\n\nRetrieve information about intensity template in case of library type.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the intensity_template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#import-detail","title":"IntensityTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#method-detail","title":"IntensityTemplateLink > Method detail","text":"Method detail\n\n\n\nIntensityTemplateLink.__str__()\n\nReturn the string representation of the intensity_template.\n\n\n\nIntensityTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nintensity_template.IntensityTemplate\n\nIntensityTemplate datamodel.\n\n\n\nIntensityTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nintensity_template.IntensityTemplate\n\nNew IntensityTemplate datamodel.\n\n\n\nIntensityTemplateLink.delete()\n\nRemove datamodel from database.\n\n\n\nIntensityTemplateLink.get_library_type_info()\n\nRetrieve information about intensity template in case of library type.\n\nReturns\n\nansys.api.speos.intensity.v1.intensity_pb2.GetLibraryTypeInfo_Response\n\nInformation about intensity template, like flux value."},{"objectID":"Home","href":"getting_started/launcher/index.html#launch-a-service","title":"Launch a service","text":"Launch a service\n\nTo launch a Speos service you have several options:\n\nUse python launch method to start it locally\n\nUse Bash to start it yourself\n\nRely on Ansys PIM to start a service"},{"objectID":"Home","href":"getting_started/launcher/index.html#python-launcher","title":"Launch a service > Python launcher","text":"Python launcher\n\nTo launch a local Speos RPC server instance use:\n\nYou receive a Speos object in return that you then use as a Speos session.\nFor more information you can look at the API Reference.\n\n../../api/ansys/speos/core/launcher/index\n\nThe session can be ended via the object Speos like this:"},{"objectID":"Home","href":"getting_started/launcher/index.html#launch-a-local-service-from-the-command-line","title":"Launch a service > Launch a local service from the command line","text":"Launch a local service from the command line\n\nTo launch the service, you need to use the following commands:\n\nWindows CMD\n\n\n\nWindows Powershell\n\n\n\nLinux\n\n\n\nTo stop the server you can use the following command line:\n\nWindows CMD\n\n\n\nWindows Powershell\n\n\n\nLinux\n\n\n\nTo see all the command line parameters you can use the help flag:\n\nWindows CMD\n\n\n\nWindows Powershell\n\n\n\nLinux\n\n"},{"objectID":"Home","href":"getting_started/launcher/index.html#use-pyspeos-launcher-with-pim","title":"Launch a service > Use PySpeos launcher with PIM","text":"Use PySpeos launcher with PIM\n\nIf a remote server is running Ansys Release 2025 R1 or later and is also running PIM (Product\nInstance Manager), you can use PIM to start a SpeosRPC server Session that PySpeos\ncan connect to.\n\nA usage example of the remote service can be accessed via AnsysLAB.\n\nThis option is only available for Ansys employees.\n\nOnly Ansys employees with credentials to the Artifact Repository Browser\ncan download ZIP files for PIM.\n\nTo launch a remote Speos service:\n\nThe preceding commands launch a remote Speos service (version 2025 R1).\nYou receive a Speos object in return that you then use as a Speos session.\n\nThe session can be ended via the object Speos like this:\n\nGo to Getting started"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSource.html#basesource","title":"BaseSource","text":"BaseSource\n\n\n\nclass ansys.speos.core.source.BaseSource(project, name, description='', metadata=None, source_instance=None)\n\nSuper Class for all sources.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which source shall be created.\n\nname\n\npython:str\n\nName of the source.\n\ndescription\n\npython:str\n\nDescription of the source.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsource_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance, optional\n\nSource instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nParameters\n\nproject (BaseSource.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSource.html#overview","title":"BaseSource > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet dictionary corresponding to the project - read only.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nAttributes\n\n\n\n\n\nsource_template_link\n\nLink object for the source template in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the source."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSource.html#import-detail","title":"BaseSource > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSource.html#attribute-detail","title":"BaseSource > Attribute detail","text":"Attribute detail\n\n\n\nBaseSource.source_template_link = None\n\nLink object for the source template in database."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSource.html#method-detail","title":"BaseSource > Method detail","text":"Method detail\n\n\n\nBaseSource.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n\n\nBaseSource.__str__()\n\nReturn the string representation of the source.\n\n\n\nBaseSource.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature.\n\n\n\nBaseSource.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature.\n\n\n\nBaseSource.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Measures.html#measures","title":"Measures","text":"Measures\n\n\n\nclass ansys.speos.core.sensor.Sensor3DIrradiance.Measures(illuminance_type, default_values=True, stable_ctr=False)\n\nMeasures settings of 3D irradiance sensor : Additional Measures.\n\nIf you selected Photometric or Radiometric, in the Additional measures section,\ndefine which type of contributions (transmission, absorption, reflection)\nneed to be taken into account for the integrating faces of the sensor.\n\nParameters\n\nilluminance_type\n\nansys.api.speos.sensor.v1.sensor_pb2.IntegrationTypePlanar\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nilluminance_type (ansys.api.speos.sensor.v1.sensor_pb2.IntegrationTypePlanar)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Measures.html#overview","title":"Measures > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nreflection\n\nGet reflection settings.\n\ntransmission\n\nGet transmission settings.\n\nabsorption\n\nGet absorption settings."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Measures.html#import-detail","title":"Measures > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/Sensor3DIrradiance.Measures.html#property-detail","title":"Measures > Property detail","text":"Property detail\n\n\n\nproperty Measures.reflection: bool\n\nGet reflection settings.\n\nReturns\n\nbool\n\nTrue when reflection settings were set, False otherwise.\n\n\n\nproperty Measures.transmission: bool\n\nGet transmission settings.\n\nReturns\n\nbool\n\nTrue when transmission settings were set, False otherwise.\n\n\n\nproperty Measures.absorption: bool\n\nGet absorption settings.\n\nReturns\n\nbool\n\nTrue when absorption settings were set, False otherwise."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#sourcetemplatelink","title":"SourceTemplateLink","text":"SourceTemplateLink\n\n\n\nclass ansys.speos.core.kernel.source_template.SourceTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a source template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.source_template.SourceTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the source template in the database.\n\nParameters\n\nkey (str)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#overview","title":"SourceTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nget_ray_file_info\n\nRetrieve information about ray file source.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the source template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#import-detail","title":"SourceTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#method-detail","title":"SourceTemplateLink > Method detail","text":"Method detail\n\n\n\nSourceTemplateLink.__str__()\n\nReturn the string representation of the source template.\n\n\n\nSourceTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsource_template.SourceTemplate\n\nSource template datamodel.\n\n\n\nSourceTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsource_template.SourceTemplate\n\nNew source template datamodel.\n\n\n\nSourceTemplateLink.delete()\n\nRemove datamodel from database.\n\n\n\nSourceTemplateLink.get_ray_file_info()\n\nRetrieve information about ray file source.\n\nReturns\n\nansys.api.speos.source.v1.source_pb2.GetRayFileInfo_Response\n\nInformation about ray file source, like flux value."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#layertypeincidenceangle","title":"LayerTypeIncidenceAngle","text":"LayerTypeIncidenceAngle\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle(layer_type_incidence_angle, default_values=True, stable_ctr=False)\n\nType of layer : IncidenceAngle.\n\nIncludes in the result one layer per range of incident angles.\nBy default, a sampling of 9 is chosen.\n\nParameters\n\nlayer_type_incidence_angle\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_incidence_angle (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeIncidenceAngle)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_incidence_angle method\navailable in sensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#overview","title":"LayerTypeIncidenceAngle > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_sampling\n\nSet the sampling for incidence angles."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#import-detail","title":"LayerTypeIncidenceAngle > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#method-detail","title":"LayerTypeIncidenceAngle > Method detail","text":"Method detail\n\n\n\nLayerTypeIncidenceAngle.set_sampling(value=9)\n\nSet the sampling for incidence angles.\n\nParameters\n\nvalue\n\npython:int\n\nSampling for incidence angles.\nBy default, 9.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#dimensions","title":"Dimensions","text":"Dimensions\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.Dimensions(sensor_dimensions, default_values=True, stable_ctr=False)\n\nDimensions of the sensor.\n\nBy default, for both x and y axis: from -50mm to 50mm is chosen, with a sampling of 100.\n\nParameters\n\nsensor_dimensions\n\nansys.api.speos.sensor.v1.common_pb2.SensorDimensions\n\nSensorDimensions protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_dimensions (ansys.api.speos.sensor.v1.common_pb2.SensorDimensions)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_dimensions method available in sensor\nclasses."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#overview","title":"Dimensions > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_x_start\n\nSet the minimum value on x axis.\n\nset_x_end\n\nSet the maximum value on x axis.\n\nset_x_sampling\n\nSet the sampling value on x axis.\n\nset_y_start\n\nSet the minimum value on y axis.\n\nset_y_end\n\nSet the maximum value on y axis.\n\nset_y_sampling\n\nSet the sampling value on y axis."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#import-detail","title":"Dimensions > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#method-detail","title":"Dimensions > Method detail","text":"Method detail\n\n\n\nDimensions.set_x_start(value=-50)\n\nSet the minimum value on x axis.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum value on x axis (mm).\nBy default, -50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n\n\nDimensions.set_x_end(value=50)\n\nSet the maximum value on x axis.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum value on x axis (mm).\nBy default, 50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n\n\nDimensions.set_x_sampling(value=100)\n\nSet the sampling value on x axis.\n\nParameters\n\nvalue\n\npython:int\n\nThe number of pixels of the XMP map on x axis.\nBy default, 100.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n\n\nDimensions.set_y_start(value=-50)\n\nSet the minimum value on y axis.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum value on y axis (mm).\nBy default, -50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n\n\nDimensions.set_y_end(value=50)\n\nSet the maximum value on y axis.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum value on y axis (mm).\nBy default, 50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n\n\nDimensions.set_y_sampling(value=100)\n\nSet the sampling value on y axis.\n\nParameters\n\nvalue\n\npython:int\n\nThe number of pixels of the XMP map on y axis.\nBy default, 100.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions."},{"objectID":"Examples","href":"examples/core/lpf-preview.html#how-to-preview-a-light-expert-result","title":"Examples > How to preview a light expert result","text":"How to preview a light expert result\n\nThis tutorial demonstrates how to review the light expert simulation result."},{"objectID":"Examples","href":"examples/core/lpf-preview.html#prerequisites","title":"Examples > How to preview a light expert result > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#perform-imports","title":"Examples > How to preview a light expert result > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#define-constants","title":"Examples > How to preview a light expert result > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#model-setup","title":"Examples > How to preview a light expert result > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#load-assets","title":"Examples > How to preview a light expert result > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#startconnect-to-speos-rpc-server","title":"Examples > How to preview a light expert result > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#create-a-new-project","title":"Examples > How to preview a light expert result > Create a new project","text":"Create a new project\n\nIn this example, a project is created via reading a pre-defined .speos file. It can be found there is volume conflict in this project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#retrieve-the-simulation-feature-add-light-expert-and-run","title":"Examples > How to preview a light expert result > Retrieve the simulation feature, add light expert and run","text":"Retrieve the simulation feature, add light expert and run\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf looking to the simulation report, we will find that we have 40% simulation error\n\n\n\n\n\nwhen reviewing The ray data using LightPathFinder class. We can see a lot of rays missing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#create-an-interactive-simulation-with-light-expert","title":"Examples > How to preview a light expert result > Create an Interactive simulation with light expert","text":"Create an Interactive simulation with light expert\n\nWe will define an interactive simulation to have a look at the rays in error as a direct simulation will only show the rays hitting the sensor not the rays in error.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#preview-the-light-expert-result","title":"Examples > How to preview a light expert result > Preview the light expert result","text":"Preview the light expert result\n\nHere, we will run the simulation and preview the result via LightPathFinder class. By default, the LightPathFinder class will preview the first 100 rays stored in the lpf-file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/lpf-preview.html#preview-the-light-expert-result-with-error-filter","title":"Examples > How to preview a light expert result > Preview the light expert result with error filter","text":"Preview the light expert result with error filter\n\nray_filter option is provided in the preview function that user can filter the rays to see only rays in error. In this example, error rays are generated due to a volume conflict between two solids.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/index.html#the-facepy-module","title":"The face.py module","text":"The face.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/index.html#summary","title":"The face.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nFaceLink\n\nLink object for job in database.\n\nFaceStub\n\nDatabase interactions for face.\n\nAttributes\n\n\n\n\n\nProtoFace\n\nFace protobuf class : ansys.api.speos.part.v1.face_pb2.Face\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/index.html#description","title":"The face.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/index.html#module-detail","title":"The face.py module > Module detail","text":"Module detail\n\n\n\nface.ProtoFace\n\nFace protobuf class : ansys.api.speos.part.v1.face_pb2.Face"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#wavelengthsrange","title":"WavelengthsRange","text":"WavelengthsRange\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.WavelengthsRange(wavelengths_range, default_values=True, stable_ctr=False)\n\nRange of wavelengths.\n\nBy default, a range from 400nm to 700nm is chosen, with a sampling of 13.\n\nParameters\n\nwavelengths_range\n\nansys.api.speos.sensor.v1.common_pb2.WavelengthsRange\n\nWavelengths range protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nwavelengths_range (Union[ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange, ansys.api.speos.sensor.v1.sensor_pb2.TypeColorimetric])\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_wavelengths_range method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#overview","title":"WavelengthsRange > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_start\n\nSet the minimum wavelength of the range.\n\nset_end\n\nSet the maximum wavelength of the range.\n\nset_sampling\n\nSet the sampling of wavelengths range."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#import-detail","title":"WavelengthsRange > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#method-detail","title":"WavelengthsRange > Method detail","text":"Method detail\n\n\n\nWavelengthsRange.set_start(value=400)\n\nSet the minimum wavelength of the range.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum wavelength (nm).\nBy default, 400.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange.\n\n\n\nWavelengthsRange.set_end(value=700)\n\nSet the maximum wavelength of the range.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum wavelength (nm).\nBy default, 700.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange.\n\n\n\nWavelengthsRange.set_sampling(value=13)\n\nSet the sampling of wavelengths range.\n\nParameters\n\nvalue\n\npython:int\n\nNumber of wavelengths to be taken into account between the minimum and maximum\nwavelengths range.\nBy default, 13.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartStub.html#partstub","title":"PartStub","text":"PartStub\n\n\n\nclass ansys.speos.core.kernel.part.PartStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for part.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a PartStub is to retrieve it from SpeosClient via parts() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> part_db = speos.client.parts()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartStub.html#overview","title":"PartStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartStub.html#import-detail","title":"PartStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/part/PartStub.html#method-detail","title":"PartStub > Method detail","text":"Method detail\n\n\n\nPartStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\npart.Part\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.part.PartLink\n\nLink object created.\n\n\n\nPartStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to read.\n\nReturns\n\npart.Part\n\nDatamodel of the entry.\n\n\n\nPartStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to update.\n\ndata\n\npart.Part\n\nNew datamodel for the entry.\n\n\n\nPartStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to delete.\n\n\n\nPartStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.part.PartLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/index.html#the-bsdfpy-module","title":"The bsdf.py module","text":"The bsdf.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/index.html#summary","title":"The bsdf.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nBaseBSDF\n\nSuper class for all BSDF datamodels.\n\nInterpolationEnhancement\n\nClass to facilitate Specular interpolation enhancement.\n\nAnisotropicBSDF\n\nBSDF - Bidirectional scattering distribution function.\n\nSpectralBRDF\n\nBSDF - Bidirectional scattering distribution function.\n\nBxdfDatapoint\n\nClass to store a BxDF data point.\n\nFunctions\n\n\n\n\n\ncreate_bsdf180\n\nCreate a bsdf180 from 2 bsdf.\n\ncreate_spectral_brdf\n\nCreate a brdf from multiple bsdf.\n\ncreate_anisotropic_bsdf\n\nCreate an anisotropic bsdf from anisotropic bsdf files.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/index.html#description","title":"The bsdf.py module > Description","text":"Description\n\nProvides a way to interact with Speos BSDF file."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/index.html#module-detail","title":"The bsdf.py module > Module detail","text":"Module detail\n\n\n\nbsdf.create_bsdf180(speos, bsdf180_file_path, path_normal_bsdf, path_opposite_bsdf)\n\nCreate a bsdf180 from 2 bsdf.\n\nThis function allows to create BSDF180 from 2 bsdf files\nallowed files: *.coated *.brdf *.anisotropicbsdf *.scattering\n\nParameters\n\nspeos\n\nansys.speos.core.Speos\n\nSpeos Object to connect to RPC server\n\nbsdf180_file_path\n\nUnion[python:str, Path]\n\nFile location of created bsdf180\n\npath_normal_bsdf\n\nUnion[python:str, Path]\n\nFile location of first file, which represent normal direction\nAllowed files: *.coated, *.brdf, *.anisotropicbsdf, *.scattering\n\npath_opposite_bsdf\n\nUnion[python:str, Path]\n\nFile location of first file, which represent anti-normal direction\nAllowed files: *.coated, *.brdf, *.anisotropicbsdf, *.scattering\n\nfix_disparity\n\nbool\n\nThis allows to create a bsdf when the two files are not normalized to each other.\nBy default, False\n\nReturns\n\nPath\n\nReturns where the file location of the bsdf180\n\n\n\nbsdf.create_spectral_brdf(speos, spectral_bsdf_file_path, wavelength_list, anisotropic_bsdf_file_list)\n\nCreate a brdf from multiple bsdf.\n\nThis function allows to create BRDF from multiple bsdf files\nallowed files: *.anisotropicbsdf\n\nParameters\n\nspeos\n\nansys.speos.core.Speos\n\nSpeos Object to connect to RPC server\n\nspectral_bsdf_file_path\n\nUnion[python:str, Path]\n\nFile location of created BRDF file\n\nwavelength_list\n\npython:list[python:float]\n\nList of wavelength\n\nanisotropic_bsdf_file_list\n\npython:list[Union[Path, python:str]]\n\nlist of bsdf file locations\n\nReturns\n\nPath\n\nLocation of created BRDF\n\n\n\nbsdf.create_anisotropic_bsdf(speos, anisotropic_bsdf_file_path, anisotropy_list, anisotropic_bsdf_file_list, fix_disparity=False)\n\nCreate an anisotropic bsdf from anisotropic bsdf files.\n\nParameters\n\nspeos\n\nansys.speos.core.Speos\n\nSpeos Object to connect to RPC server\n\nanisotropic_bsdf_file_path\n\nUnion[python:str, Path]\n\nFile location of created Anisotropic BSDF file\n\nanisotropy_list\n\npython:list[python:float]\n\nordered List of anisotropy value, in radian\n\nanisotropic_bsdf_file_list\n\npython:list[Union[Path, python:str]]\n\nlist of bsdf file locations\n\nfix_disparity\n\nbool\n\nFixes normalization disparity between BSDF,\nBy default: False\n\nReturns\n\nPath\n\nLocation of created Anisotropic BSDF files\n\nNotes\n\nPlease note that the bsdf files from the bsdf list need to be isotropic."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/index.html#the-sensor_templatepy-module","title":"The sensor_template.py module","text":"The sensor_template.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/index.html#summary","title":"The sensor_template.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSensorTemplateLink\n\nLink object for sensor template in database.\n\nSensorTemplateStub\n\nDatabase interactions for sensor templates.\n\nAttributes\n\n\n\n\n\nProtoSensorTemplate\n\nSensorTemplate protobuf class : ansys.api.speos.sensor.v1.sensor_pb2.SensorTemplate\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/index.html#description","title":"The sensor_template.py module > Description","text":"Description\n\nProvides a wrapped abstraction of the gRPC proto API definition and stubs."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/index.html#module-detail","title":"The sensor_template.py module > Module detail","text":"Module detail\n\n\n\nsensor_template.ProtoSensorTemplate\n\nSensorTemplate protobuf class : ansys.api.speos.sensor.v1.sensor_pb2.SensorTemplate"},{"objectID":"Examples","href":"examples/kernel/scene-job.html#how-to-use-scene-and-job","title":"Examples > How to use scene and job","text":"How to use scene and job\n\nThis tutorial demonstrates how to create a scene, and fill it from a speos file. Then this demonstrates how to create a job from the scene, and run it."},{"objectID":"Examples","href":"examples/kernel/scene-job.html#prerequisites","title":"Examples > How to use scene and job > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/kernel/scene-job.html#perform-imports","title":"Examples > How to use scene and job > Perform imports","text":"Perform imports\n\n\n\n\n\n\n\n\n\nLoad a file to fill the scene\n\n\n\n\n\nPrint scene data model\n\nHere it is possible to see that the scene contains two surface sources, one irradiance sensor.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/kernel/scene-job.html#job","title":"Examples > How to use scene and job > Job","text":"Job\n\nCreate a job for the first simulation. When loaded from a speos file, there is always only one simulation in the scene.\n\n\n\n\n\nStart the job\n\n\n\n\n\nVerify state of the job\n\n\n\n\n\n\n\n\n\nWait that the job is finished\n\n\n\n\n\nRetrieve results of the job\n\nTwo results are generated : the result of irradiance sensor: “ASSEMBLY1.DS (0).Dom Irradiance Sensor (0).xmp” and the simulation report in html\n\n\n\n\n\n\n\n\n\nOnce no more needed: delete the job\n\n\n\n\n\nWhen loading a speos file into a scene, this creates many objects (source templates, sensor templates, vop template, sop templates). Then at the end of the example, we just clean all databases\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPySpeos is a Python client library that gathers functionalities and tools based on\nremote API of Ansys software Speos ."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nYou can use pip to install PySpeos."},{"objectID":"Home","href":"getting_started/index.html#available-modes","title":"Getting started > Available modes","text":"Available modes\n\nThis client library works with a Speos service backend. There are several ways of\nrunning this backend, although the preferred and high-performance mode is using Docker\ncontainers. Select the option that best suits your needs.\n\nDocker containers\n\nLaunch the Speos service as a Docker container\nand connect to it from PySpeos.\n\ndocker/index\n\nLaunch a service\n\nLaunch the Speos service locally or remotely on a Computer\nand connect to it from PySpeos.\n\nlauncher/index\n\nUse an existing service\n\nConnect to an existing Speos service locally or remotely.\n\nexisting/index"},{"objectID":"Home","href":"getting_started/index.html#development-installation","title":"Getting started > Development installation","text":"Development installation\n\nIn case you want to support the development of PySpeos, install the repository\nin development mode. For more information, refer to the README.\n\n"},{"objectID":"Home","href":"getting_started/index.html#security-considerations","title":"Getting started > Security considerations","text":"Security considerations\n\nThis section provides information on security considerations for the use\nof PySpeos. It is important to understand the capabilities which PySpeos\nprovides, especially when using it to build applications or scripts that\naccept untrusted input.\n\nIf a function displays a warning that redirects to this page, it indicates\nthat the function may expose security risks when used improperly.\nIn such cases, it is essential to pay close attention to:\n\nFunction arguments: Ensure that arguments passed to the function are\nproperly validated and do not contain untrusted content such as arbitrary\nfile paths, shell commands, or serialized data.\n\nEnvironment variables: Be cautious of environment variables that can\ninfluence the behavior of the function, particularly if they are user-defined\nor inherited from an untrusted execution context.\n\nAlways validate external input, avoid executing arbitrary commands or code,\nand follow the principle of least privilege when developing with PySpeos."},{"objectID":"Home","href":"getting_started/index.html#launching-local-speos-rpc-server","title":"Getting started > Launching local Speos RPC server","text":"Launching local Speos RPC server\n\nThe launch_local_speos_rpc_server() function can be used to launch Speos RPC\nserver locally. The executable which is launched is configured with the function\nparameters and environment variables. This may allow an attacker to launch\narbitrary executables on the system. When exposing the launch function to\nuntrusted users, it is important to validate that the executable path,\nenvironment variables (for example AWP_ROOT) are safe.\nOtherwise, hard-code them in the app."},{"objectID":"Home","href":"getting_started/index.html#frequently-asked-questions","title":"Getting started > Frequently asked questions","text":"Frequently asked questions\n\nAny questions? Refer to Q&A before submitting an issue.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#simulationtemplatestub","title":"SimulationTemplateStub","text":"SimulationTemplateStub\n\n\n\nclass ansys.speos.core.kernel.simulation_template.SimulationTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for simulation templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SimulationTemplateStub is to retrieve it from SpeosClient via\nsimulation_templates() method. Like in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sim_t_db = speos.client.simulation_templates()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#overview","title":"SimulationTemplateStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate\n\nCreate a new entry.\n\nread\n\nGet an existing entry.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#import-detail","title":"SimulationTemplateStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#method-detail","title":"SimulationTemplateStub > Method detail","text":"Method detail\n\n\n\nSimulationTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsimulation_template.SimulationTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object created.\n\n\n\nSimulationTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to read.\n\nReturns\n\nsimulation_template.SimulationTemplate\n\nDatamodel of the entry.\n\n\n\nSimulationTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to update.\n\ndata\n\nsimulation_template.SimulationTemplate\n\nNew datamodel for the entry.\n\n\n\nSimulationTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to delete.\n\n\n\nSimulationTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.simulation_template.SimulationTemplateLink]\n\nLink objects."},{"objectID":"Examples","href":"examples/core/sensor.html#how-to-create-a-sensor","title":"Examples > How to create a sensor","text":"How to create a sensor\n\nThis tutorial demonstrates how to create a sensor.\n\nThere are different type of sensors available: irradiance sensor, radiance sensor, camera sensor."},{"objectID":"Examples","href":"examples/core/sensor.html#prerequisites","title":"Examples > How to create a sensor > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/sensor.html#perform-imports","title":"Examples > How to create a sensor > Perform imports","text":"Perform imports\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#define-constants","title":"Examples > How to create a sensor > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#define-helper-functions","title":"Examples > How to create a sensor > Define helper functions","text":"Define helper functions\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#model-setup","title":"Examples > How to create a sensor > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/sensor.html#load-assets","title":"Examples > How to create a sensor > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#connect-to-the-rpc-server","title":"Examples > How to create a sensor > Connect to the RPC Server","text":"Connect to the RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#create-a-new-project","title":"Examples > How to create a sensor > Create a new project","text":"Create a new project\n\nThe only way to create a sensor, is to create it from a project.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#create","title":"Examples > How to create a sensor > Create","text":"Create\n\nCreate locally.\n\nThe mention “local: “ is added when printing the sensor\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#push-it-to-the-server","title":"Examples > How to create a sensor > Push it to the server.","text":"Push it to the server.\n\nNow that it is committed to the server, the mention “local: “ is no more present when printing the sensor.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#another-example","title":"Examples > How to create a sensor > Another example","text":"Another example\n\nSet more characteristics.\n\nCamera feature is created with the same default values as the GUI speos.\n\nIf the user would like to modify the camera characteristics, it is possible to do so as below.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#read","title":"Examples > How to create a sensor > Read","text":"Read"},{"objectID":"Examples","href":"examples/core/sensor.html#sensor-instance","title":"Examples > How to create a sensor > Sensor Instance","text":"Sensor Instance\n\nA mention “local: “ is added if it is not yet committed to the server\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#project","title":"Examples > How to create a sensor > Project","text":"Project\n\nCommitted feature will appear in the project.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#update","title":"Examples > How to create a sensor > Update","text":"Update\n\nTipp: if you are manipulating a sensor already committed, don’t forget to commit your changes.\n\nIf you don’t, you will still only watch what is committed on the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#reset","title":"Examples > How to create a sensor > Reset","text":"Reset\n\nPossibility to reset local values from the one available in the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#delete","title":"Examples > How to create a sensor > Delete","text":"Delete\n\nOnce the data is deleted from the server, you can still work with local data and maybe commit later.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#other-sensors","title":"Examples > How to create a sensor > Other sensors","text":"Other sensors"},{"objectID":"Examples","href":"examples/core/sensor.html#irradiance-sensor","title":"Examples > How to create a sensor > Irradiance sensor","text":"Irradiance sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#radiance-sensor","title":"Examples > How to create a sensor > radiance sensor","text":"radiance sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/sensor.html#3d-irradiance-sensor","title":"Examples > How to create a sensor > 3D irradiance sensor","text":"3D irradiance sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/InterpolationEnhancement.html#interpolationenhancement","title":"InterpolationEnhancement","text":"InterpolationEnhancement\n\n\n\nclass ansys.speos.core.bsdf.InterpolationEnhancement(bsdf, bsdf_namespace, index_1=1.0, index_2=1.0)\n\nClass to facilitate Specular interpolation enhancement.\n\nNotes\n\nDo not instantiate this class yourself\n\nParameters\n\nbsdf (Union[AnisotropicBSDF, SpectralBRDF])\n\nbsdf_namespace (Union[ansys.api.speos.bsdf.v1.spectral_bsdf_pb2, ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2])\n\nindex_1 (Union[float, None])\n\nindex_2 (Union[float, None])"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/InterpolationEnhancement.html#overview","title":"InterpolationEnhancement > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_interpolation_settings\n\nSet interpolation obtained from bsdf Class or that modified by user.\n\nProperties\n\n\n\n\n\nindex1\n\nRefractive index on reflection side.\n\nindex2\n\nRefractive index on transmission side.\n\nget_reflection_interpolation_settings\n\nReturn a fixed dictionary for reflection interpolation settings to be set by user.\n\nget_transmission_interpolation_settings\n\nReturn a fixed dictionary for reflection interpolation settings to be set by user."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/InterpolationEnhancement.html#import-detail","title":"InterpolationEnhancement > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/InterpolationEnhancement.html#property-detail","title":"InterpolationEnhancement > Property detail","text":"Property detail\n\n\n\nproperty InterpolationEnhancement.index1: float\n\nRefractive index on reflection side.\n\n\n\nproperty InterpolationEnhancement.index2: float\n\nRefractive index on transmission side.\n\n\n\nproperty InterpolationEnhancement.get_reflection_interpolation_settings: None | _InterpolationSettings\n\nReturn a fixed dictionary for reflection interpolation settings to be set by user.\n\n\n\nproperty InterpolationEnhancement.get_transmission_interpolation_settings: None | _InterpolationSettings\n\nReturn a fixed dictionary for reflection interpolation settings to be set by user."},{"objectID":"Home","href":"api/ansys/speos/core/bsdf/InterpolationEnhancement.html#method-detail","title":"InterpolationEnhancement > Method detail","text":"Method detail\n\n\n\nInterpolationEnhancement.set_interpolation_settings(is_brdf, settings)\n\nSet interpolation obtained from bsdf Class or that modified by user.\n\nParameters\n\nis_brdf: bool\n\ntrue if settings is for brdf, else for btdf\n\nsettings: InterpolationEnhancement._InterpolationSettings\n\ninterpolation settings."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.AutomaticSun.html#automaticsun","title":"AutomaticSun","text":"AutomaticSun\n\n\n\nclass ansys.speos.core.source.BaseSourceAmbient.AutomaticSun(sun, default_values=True, stable_ctr=False)\n\nSun type Automatic.\n\nBy default, user’s current time and Ansys France is used a time zone.\n\nParameters\n\nsun: ansys.api.speos.scene.v2.scene_pb2.AutomaticSun\n\nWavelengths range protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsun (ansys.api.speos.scene.v2.scene_pb2.AutomaticSun)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_sun_automatic method available in\nsource classes."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.AutomaticSun.html#overview","title":"AutomaticSun > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nyear\n\nGet year info of the automatic sun.\n\nmonth\n\nGet month info of the automatic sun.\n\nday\n\nGet day info of the automatic sun.\n\nhour\n\nGet hour info of the automatic sun.\n\nminute\n\nGet minute info of the automatic sun.\n\nlongitude\n\nGet longitude info of the automatic sun.\n\nlatitude\n\nGet latitude info of the automatic sun.\n\ntime_zone\n\nGet time zone info of the automatic sun."},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.AutomaticSun.html#import-detail","title":"AutomaticSun > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/source/BaseSourceAmbient.AutomaticSun.html#property-detail","title":"AutomaticSun > Property detail","text":"Property detail\n\n\n\nproperty AutomaticSun.year: int\n\nGet year info of the automatic sun.\n\nReturns\n\npython:int\n\nyear info.\n\n\n\nproperty AutomaticSun.month: int\n\nGet month info of the automatic sun.\n\nReturns\n\npython:int\n\nmonth information.\n\n\n\nproperty AutomaticSun.day: int\n\nGet day info of the automatic sun.\n\nReturns\n\npython:int\n\nday information.\n\n\n\nproperty AutomaticSun.hour: int\n\nGet hour info of the automatic sun.\n\nReturns\n\npython:int\n\nhour information.\n\n\n\nproperty AutomaticSun.minute: int\n\nGet minute info of the automatic sun.\n\nReturns\n\npython:int\n\nminute information.\n\n\n\nproperty AutomaticSun.longitude: float\n\nGet longitude info of the automatic sun.\n\nReturns\n\npython:float\n\nlongitude information.\n\n\n\nproperty AutomaticSun.latitude: float\n\nGet latitude info of the automatic sun.\n\nReturns\n\npython:float\n\nlatitude information.\n\n\n\nproperty AutomaticSun.time_zone: str\n\nGet time zone info of the automatic sun.\n\nReturns\n\npython:str\n\ntime zone abbreviation."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Library.html#library","title":"Library","text":"Library\n\n\n\nclass ansys.speos.core.intensity.Intensity.Library(library, library_props, default_values=True)\n\nIntensity of type: Library.\n\nBy default, orientation as axis system is chosen and no exit geometries.\n\nParameters\n\nlibrary\n\nansys.api.speos.intensity.v1.IntensityTemplate.Library\n\nLibrary to complete.\n\nlibrary_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.LibraryProperties\n\nLibrary properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nlibrary (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Library)\n\nlibrary_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.LibraryProperties)\n\ndefault_values (bool)"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Library.html#overview","title":"Library > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_intensity_file_uri\n\nSet the intensity file.\n\nset_orientation_axis_system\n\nSet the intensity orientation from an axis system.\n\nset_orientation_normal_to_surface\n\nSet the intensity orientation as normal to surface.\n\nset_orientation_normal_to_uv_map\n\nSet the intensity orientation as normal to uv map.\n\nset_exit_geometries\n\nSet the exit geometries."},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Library.html#import-detail","title":"Library > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/intensity/Intensity.Library.html#method-detail","title":"Library > Method detail","text":"Method detail\n\n\n\nLibrary.set_intensity_file_uri(uri)\n\nSet the intensity file.\n\nParameters\n\nuri\n\npython:str\n\nuri of the intensity file IES (.ies), Eulumdat (.ldt), speos intensities (.xmp)\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nIntensity feature of type library.\n\n\n\nLibrary.set_orientation_axis_system(axis_system=None)\n\nSet the intensity orientation from an axis system.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nOrientation of the intensity [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz]\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n\n\nLibrary.set_orientation_normal_to_surface()\n\nSet the intensity orientation as normal to surface.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n\n\nLibrary.set_orientation_normal_to_uv_map()\n\nSet the intensity orientation as normal to uv map.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n\n\nLibrary.set_exit_geometries(exit_geometries=None)\n\nSet the exit geometries.\n\nParameters\n\nexit_geometries\n\nOptional[List[ansys.speos.core.geo_ref.GeoRef]]\n\nExit geometries list.\nBy default, [].\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity."},{"objectID":"Home","href":"getting_started/docker/linux_container.html#linux-docker-container","title":"Linux Docker container","text":"Linux Docker container\n\nContents\n\nLinux Docker container\n\nDocker for Linux containers\n\nInstall the Speos service image\n\nLaunch the Speos service\n\nEnvironment variables\n\nDocker for Speos service\n\nConnect to the Speos service\n\n"},{"objectID":"Home","href":"getting_started/docker/linux_container.html#docker-for-linux-containers","title":"Linux Docker container > Docker for Linux containers","text":"Docker for Linux containers\n\nTo run the Linux Docker container for the Speos service, you need to install Docker.\nYou can choose one of the following possibilities:\n\nInstall Docker Engine (only for Linux environment).\nIn this case, you can interact with docker by command line.\n\nInstall Docker Desktop. (for all environments).\nIn this case, you can have a GUI and can also interact with docker by command line."},{"objectID":"Home","href":"getting_started/docker/linux_container.html#install-the-speos-service-image","title":"Linux Docker container > Install the Speos service image","text":"Install the Speos service image\n\nThe Speos service image can be downloaded from the GitHub Container Registry\n\nThis option is only available for users who are members of the ansys organization.\n\nOnce Docker is installed on your machine, follow these steps to download the Linux Docker\ncontainer for the Speos service and install this image.\n\nUse a GitHub personal access token with permission for reading packages to authorize Docker\nto access this repository. For more information, see Managing your personal access tokens\nin the GitHub documentation.\n\nSave the token to a file with this command:\n\nAuthorize Docker to access the repository and run the commands for your OS. To see these commands, click the tab corresponding to your OS.\n\nLinux/Mac\n\n\n\nPowershell\n\n\n\nWindows CMD\n\n"},{"objectID":"Home","href":"getting_started/docker/linux_container.html#launch-the-speos-service","title":"Linux Docker container > Launch the Speos service","text":"Launch the Speos service\n\nManually launch the Speos service."},{"objectID":"Home","href":"getting_started/docker/linux_container.html#environment-variables","title":"Linux Docker container > Environment variables","text":"Environment variables\n\nThe Speos service requires this mandatory environment variable to function properly:\n\nANSYSLMD_LICENSE_FILE: License server (port and IP address or DNS) the Speos service connects to.\nFor example, 1055@127.0.0.1.\n\nYou can also specify other optional environment variables:\n\nSPEOS_LOG_LEVEL: Sets the Speos service logging level. The default is 2, in which case\nthe logging level is INFO.\n\nHere are some terms to keep in mind:\n\nhost: Machine that hosts the Speos service. It is typically on localhost.\nBut if you are deploying the service on a remote machine, then the machine’s IP address is expected.\nBy default, PySpeos assumes it is on localhost.\n\nport: Port that exposes the Speos service on the host machine. Its\nvalue is assumed to be 50098, but users can deploy the service on preferred ports."},{"objectID":"Home","href":"getting_started/docker/linux_container.html#docker-for-speos-service","title":"Linux Docker container > Docker for Speos service","text":"Docker for Speos service\n\nThis method allows you to start the Speos service based on predefined environment variables and properties.\nAfterwards, see the next section to understand how to connect to this service instance from PySpeos.\n\nThe following snippet shows how to run Speos service 2025.1.\nTo use another product version, please modify the image label from 251 to the corresponding product version.\n\nLinux/Mac\n\n\n\nPowershell\n\n\n\nWindows CMD\n\n"},{"objectID":"Home","href":"getting_started/docker/linux_container.html#connect-to-the-speos-service","title":"Linux Docker container > Connect to the Speos service","text":"Connect to the Speos service\n\nAfter the Speos service is launched, connect to it with these commands:\n\nBy default, the Speos instance connects to 127.0.0.1 (\"localhost\") on\nport 50098.\n\nYou can change this by modifying the host and port\nparameters of the Speos object, but note that you must also modify\nyour docker run command by changing the <HOST-PORT>-50098 argument.\n\nThe following tabs show the commands that set the environment variables and Speos\nfunction.\n\nGo to Docker containers\n\nGo to Getting started"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#layertypesequence","title":"LayerTypeSequence","text":"LayerTypeSequence\n\n\n\nclass ansys.speos.core.sensor.BaseSensor.LayerTypeSequence(layer_type_sequence, default_values=True, stable_ctr=False)\n\nType of layer : Sequence.\n\nIncludes in the result one layer per sequence.\nBy default, the sequence is defined per geometries, with a maximum number of 10 sequences.\n\nParameters\n\nlayer_type_sequence\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeSequence\n\nLayerTypeSequence protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_sequence (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeSequence)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_sequence method available in\nsensor classes."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#overview","title":"LayerTypeSequence > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_maximum_nb_of_sequence\n\nSet the maximum number of sequences.\n\nset_define_sequence_per_geometries\n\nDefine sequence per geometries.\n\nset_define_sequence_per_faces\n\nDefine sequence per faces."},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#import-detail","title":"LayerTypeSequence > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#method-detail","title":"LayerTypeSequence > Method detail","text":"Method detail\n\n\n\nLayerTypeSequence.set_maximum_nb_of_sequence(value=10)\n\nSet the maximum number of sequences.\n\nParameters\n\nvalue\n\npython:int\n\nMaximum number of sequences.\nBy default, 10.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence.\n\n\n\nLayerTypeSequence.set_define_sequence_per_geometries()\n\nDefine sequence per geometries.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence.\n\n\n\nLayerTypeSequence.set_define_sequence_per_faces()\n\nDefine sequence per faces.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence."},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#face","title":"Face","text":"Face\n\n\n\nclass ansys.speos.core.face.Face(speos_client, name, description='', metadata=None, parent_body=None)\n\nFeature : Face.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nparent_body\n\nansys.speos.core.body.Body, optional\n\nFeature containing this face.\nBy default, None.\n\nAttributes\n\nface_link\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object for the face in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nparent_body (Optional[ansys.speos.core.body.Body])"},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#overview","title":"Face > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_vertices\n\nSet the face vertices.\n\nset_facets\n\nSet the facets.\n\nset_normals\n\nSet the face normals.\n\ncommit\n\nSave feature: send the local data to the speos server database.\n\nreset\n\nReset feature: override local data by the one from the speos server database.\n\ndelete\n\nDelete feature: delete data from the speos server database.\n\nProperties\n\n\n\n\n\ngeo_path\n\nGeometry path to be used within other speos objects.\n\nAttributes\n\n\n\n\n\nface_link\n\nLink object for the face in database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the face."},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#import-detail","title":"Face > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#property-detail","title":"Face > Property detail","text":"Property detail\n\n\n\nproperty Face.geo_path: ansys.speos.core.geo_ref.GeoRef\n\nGeometry path to be used within other speos objects."},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#attribute-detail","title":"Face > Attribute detail","text":"Attribute detail\n\n\n\nFace.face_link = None\n\nLink object for the face in database."},{"objectID":"Home","href":"api/ansys/speos/core/face/Face.html#method-detail","title":"Face > Method detail","text":"Method detail\n\n\n\nFace.set_vertices(values)\n\nSet the face vertices.\n\nParameters\n\nvalues\n\nList[python:float]\n\nCoordinates of all points [p1x p1y p1z p2x p2y p2z …].\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nFace.set_facets(values)\n\nSet the facets.\n\nParameters\n\nvalues\n\nList[python:int]\n\nIndexes of points for all triangles (t1_1 t1_2 t1_3 t2_1 t2_2 t2_3 …)\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nFace.set_normals(values)\n\nSet the face normals.\n\nParameters\n\nvalues\n\nList[python:float]\n\nNormal vectors for all points [n1x n1y n1z n2x n2y n2z …]\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nFace.__str__()\n\nReturn the string representation of the face.\n\n\n\nFace.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nFace.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n\n\nFace.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceStub.html#facestub","title":"FaceStub","text":"FaceStub\n\n\n\nclass ansys.speos.core.kernel.face.FaceStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for face.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a FaceStub is to retrieve it from SpeosClient via faces() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> face_db = speos.client.faces()"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceStub.html#overview","title":"FaceStub > Overview","text":"Overview\n\nMethods\n\n\n\n\n\ncreate_batch\n\nCreate new entries.\n\ncreate\n\nCreate a new entry.\n\nread_batch\n\nGet existing entries.\n\nread\n\nGet an existing entry.\n\nupdate_batch\n\nChange existing entries.\n\nupdate\n\nChange an existing entry.\n\ndelete\n\nRemove an existing entry.\n\nlist\n\nList existing entries."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceStub.html#import-detail","title":"FaceStub > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/face/FaceStub.html#method-detail","title":"FaceStub > Method detail","text":"Method detail\n\n\n\nFaceStub.create_batch(message_list)\n\nCreate new entries.\n\nParameters\n\nmessage_list\n\nList[face.Face]\n\nList of datamodels for the new entries.\n\nReturns\n\nList[ansys.speos.core.kernel.face.FaceLink]\n\nList pf link objects created.\n\n\n\nFaceStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nface.Face\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object created.\n\n\n\nFaceStub.read_batch(refs)\n\nGet existing entries.\n\nParameters\n\nrefs\n\nList[ansys.speos.core.kernel.face.FaceLink]\n\nList of link objects to read.\n\nReturns\n\nList[face.Face]\n\nDatamodels of the entries.\n\n\n\nFaceStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to read.\n\nReturns\n\nface.Face\n\nDatamodel of the entry.\n\n\n\nFaceStub.update_batch(refs, data)\n\nChange existing entries.\n\nParameters\n\nref\n\nList[ansys.speos.core.kernel.face.FaceLink]\n\nLink objects to update.\n\ndata\n\nList[face.Face]\n\nNew datamodels for the entries.\n\n\n\nFaceStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to update.\n\ndata\n\nface.Face\n\nNew datamodel for the entry.\n\n\n\nFaceStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to delete.\n\n\n\nFaceStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.face.FaceLink]\n\nLink objects."},{"objectID":"Home","href":"api/ansys/speos/core/index.html#the-ansysspeoscore-library","title":"The ansys.speos.core library","text":"The ansys.speos.core library\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/index.html#summary","title":"The ansys.speos.core library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nkernel\n\nPySpeos Kernel module gathers low-level interactions and internal operations of the project.\n\nworkflow\n\nPySpeos workflow gathers functionality to use Speos capabilities in advanced ways.\n\nSubmodules\n\n\n\n\n\nbody\n\nProvides a way to interact with feature: Body.\n\nbsdf\n\nProvides a way to interact with Speos BSDF file.\n\nface\n\nProvides a way to interact with feature: Face.\n\ngeo_ref\n\nProvides interface to link Speos Objects to Geometries.\n\nintensity\n\nProvides a way to interact with Speos feature: Intensity.\n\nlauncher\n\nModule to start Speos RPC Server.\n\nlogger\n\nLogging module.\n\nlxp\n\nThe lxp module contains classes and functions to simplify the interaction with ray data.\n\nopt_prop\n\nProvides a way to interact with Speos feature: Optical Property.\n\npart\n\nProvides a way to interact with feature: Part.\n\nproject\n\nProvides a way to gather Speos features.\n\nproto_message_utils\n\nModule with method to process Protobuf messages.\n\nsensor\n\nProvides a way to interact with Speos feature: Sensor.\n\nsimulation\n\nProvides a way to interact with Speos feature: Simulation.\n\nsource\n\nProvides a way to interact with Speos feature: Source.\n\nspectrum\n\nProvides a way to interact with Speos feature: Spectrum.\n\nspeos\n\nProvides the Speos class.\n\nAttributes\n\n\n\n\n\n__version__\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/index.html#description","title":"The ansys.speos.core library > Description","text":"Description\n\nPySpeos is a Python library based on Speos solver remote API.\n\nIt gathers functionaties and tools of these APIs."},{"objectID":"Home","href":"api/ansys/speos/core/index.html#module-detail","title":"The ansys.speos.core library > Module detail","text":"Module detail\n\n\n\ncore.__version__\n\n"},{"objectID":"Examples","href":"examples/core/part.html#how-to-create-a-part","title":"Examples > How to create a part","text":"How to create a part\n\nThis tutorial demonstrates how to create a part."},{"objectID":"Examples","href":"examples/core/part.html#what-is-a-part","title":"Examples > How to create a part > What is a part?","text":"What is a part?\n\nA part is either a volume or a face type bodies that are defined by a number of mesh triangles.\n\nThen a material optical property can be then applied to a part (like bodies, faces)."},{"objectID":"Examples","href":"examples/core/part.html#prerequisites","title":"Examples > How to create a part > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/part.html#perform-imports","title":"Examples > How to create a part > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#define-constants","title":"Examples > How to create a part > Define constants","text":"Define constants\n\nThe constants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#model-setup","title":"Examples > How to create a part > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/part.html#load-assets","title":"Examples > How to create a part > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded the simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#startconnect-to-speos-rpc-server","title":"Examples > How to create a part > Start/Connect to Speos RPC Server","text":"Start/Connect to Speos RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#new-project","title":"Examples > How to create a part > New Project","text":"New Project\n\nThe only way to create parts, bodies and faces is from a project.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create","title":"Examples > How to create a part > Create","text":"Create\n\nBefore creating a body, a Root part needs to be created and committed.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create-bodies-in-root-part","title":"Examples > How to create a part > Create bodies in root part.","text":"Create bodies in root part.\n\nA body can either a volume or face type. Both use the method named “create_body”.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create-faces-inside-a-body","title":"Examples > How to create a part > Create faces inside a body.","text":"Create faces inside a body.\n\nA body can have one (example, surface/open-volume type of body) or multiple faces (close-volume type of body).\n\nEach face is then defined by a number of triangles/facets.\n\nEach triangle/facet is defined by vertices and vertice normals.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create-bodies-in-sub-part","title":"Examples > How to create a part > Create bodies in sub part.","text":"Create bodies in sub part.\n\nPart can also be created under a sub-part.\n\nThe location sub-part can be defined using set_axis_system method.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create-body-and-faces-in-sub-part-body","title":"Examples > How to create a part > Create body and faces in sub part body","text":"Create body and faces in sub part body\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#create-sub-parts-in-sub-part","title":"Examples > How to create a part > Create sub parts in sub part","text":"Create sub parts in sub part\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#read","title":"Examples > How to create a part > Read","text":"Read"},{"objectID":"Examples","href":"examples/core/part.html#find-with-exact-name","title":"Examples > How to create a part > Find with exact name","text":"Find with exact name\n\nFind the root part\n\n\n\n\n\n\n\n\n\nFind a specific body in root part\n\n\n\n\n\n\n\n\n\nFind a specific face of a body in root part\n\n\n\n\n\n\n\n\n\nFind a sub part\n\n\n\n\n\n\n\n\n\nFind a specific body in sub part\n\n\n\n\n\n\n\n\n\nFind a specific face of a body in sub part\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#find-with-approximation-name","title":"Examples > How to create a part > Find with approximation name","text":"Find with approximation name\n\nFind all bodies in root part\n\n\n\n\n\n\n\n\n\nFind all faces inside body called “TheBodyB1”\n\n\n\n\n\n\n\n\n\nIf you want to retrieve several kind of geometry features at a certain level, give feature_type=Part\n\nAll the geometry features at root part level:\n\n\n\n\n\n\n\n\n\nAll the geometry features at second level: e.g.:\n\nTheBodyB1’s all faces\n\nTheSubPartSP1’s all bodies\n\nTheSubPartSP1’s all sub part\n\n\n\n\n\n\n\n\n\nAll the geometry features at the third level: e.g. TheSubPartSP1’s all bodies’ faces\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/part.html#delete","title":"Examples > How to create a part > Delete","text":"Delete\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/index.html#the-combine_speospy-module","title":"The combine_speos.py module","text":"The combine_speos.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/index.html#summary","title":"The combine_speos.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSpeosFileInstance\n\nRepresents a SPEOS file containing geometries and materials.\n\nFunctions\n\n\n\n\n\ninsert_speos\n\nImport geometries and materials from the selected SPEOS files to the existing project.\n\ncombine_speos\n\nCreate a project by combining geometries and materials from the selected SPEOS files.\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/index.html#description","title":"The combine_speos.py module > Description","text":"Description\n\nImport geometries and materials from several SPEOS files to a project."},{"objectID":"Home","href":"api/ansys/speos/core/workflow/combine_speos/index.html#module-detail","title":"The combine_speos.py module > Module detail","text":"Module detail\n\n\n\ncombine_speos.insert_speos(project, speos_to_insert)\n\nImport geometries and materials from the selected SPEOS files to the existing project.\n\nGeometries and materials are placed in the root part, and orientated thanks to the\nSpeosFileInstance object.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which to import geometries and materials from SPEOS files.\n\nspeos_to_combine\n\nList[ansys.speos.core.workflow.combine_speos.SpeosFileInstance]\n\nList of SPEOS files, location and orientation of geometries to be imported to the project.\n\nNotes\n\nSources, Sensors and Simulations are not imported to the project.\n\n\n\ncombine_speos.combine_speos(speos, speos_to_combine)\n\nCreate a project by combining geometries and materials from the selected SPEOS files.\n\nGeometries and materials are placed in the root part,\nand orientated thanks to the SpeosFileInstance object.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos session (connected to gRPC server).\n\nspeos_to_combine\n\nList[ansys.speos.core.workflow.combine_speos.SpeosFileInstance]\n\nList of SPEOS files, location and orientation of geometries to be imported to the project.\n\nReturns\n\nansys.speos.core.project.Project\n\nProject created by combining the input list of SPEOS files.\n\nNotes\n\nSources, Sensors and Simulations are not imported to the project."},{"objectID":"Examples","href":"examples/core/opt-prop.html#how-to-create-an-optical-property","title":"Examples > How to create an optical property","text":"How to create an optical property\n\nThis tutorial demonstrates how to create an optical property."},{"objectID":"Examples","href":"examples/core/opt-prop.html#what-is-an-optical-property","title":"Examples > How to create an optical property > What is an optical property?","text":"What is an optical property?\n\nAn optical property (also named material), gathers two notions: the surface optical property (SOP) and the volume optical property (VOP).\n\nThe property is then applied to a geometry (like bodies, faces)."},{"objectID":"Examples","href":"examples/core/opt-prop.html#prerequisites","title":"Examples > How to create an optical property > Prerequisites","text":"Prerequisites"},{"objectID":"Examples","href":"examples/core/opt-prop.html#perform-imports","title":"Examples > How to create an optical property > Perform imports","text":"Perform imports\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#define-constants","title":"Examples > How to create an optical property > Define constants","text":"Define constants\n\nConstants help ensure consistency and avoid repetition throughout the example.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#define-helper-functions","title":"Examples > How to create an optical property > Define helper functions","text":"Define helper functions\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#model-setup","title":"Examples > How to create an optical property > Model Setup","text":"Model Setup"},{"objectID":"Examples","href":"examples/core/opt-prop.html#load-assets","title":"Examples > How to create an optical property > Load assets","text":"Load assets\n\nThe assets used to run this example are available in the PySpeos repository on GitHub.\n\nNote: Make sure you have downloaded simulation assets and set assets_data_path to point to the assets folder.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#connect-to-the-rpc-server","title":"Examples > How to create an optical property > Connect to the RPC Server","text":"Connect to the RPC Server\n\nThis Python client connects to a server where the Speos engine is running as a service. In this example, the server and client are the same machine. The launch_local_speos_rpc_method can be used to start a local instance of the service.\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#create-a-new-project","title":"Examples > How to create an optical property > Create a new project","text":"Create a new project\n\nThe only way to create an optical property using the core layer, is to create it from a project. The Project class is instantiated by passing a Speos instance\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#create-vop-volume-optical-property","title":"Examples > How to create an optical property > Create VOP (volume optical property)","text":"Create VOP (volume optical property)\n\nCreate locally. The mention “local: “ is added when printing the optical property.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#push-it-to-the-server","title":"Examples > How to create an optical property > Push it to the server.","text":"Push it to the server.\n\nNow that it is committed to the server, the mention “local: “ is no more present when printing the optical property.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#another-example","title":"Examples > How to create an optical property > Another example.","text":"Another example.\n\nSetting several more characteristics.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#create-fop-face-optical-property","title":"Examples > How to create an optical property > Create FOP (face optical property)","text":"Create FOP (face optical property)\n\nSometimes it is needed to create property but only for surface.\n\nIn this case, no call for set_volume_xxx function is needed, and we will select a face for the geometries.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#default-values","title":"Examples > How to create an optical property > Default values","text":"Default values\n\nSome default values are available when applicable in every methods and class.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#read","title":"Examples > How to create an optical property > Read","text":"Read"},{"objectID":"Examples","href":"examples/core/opt-prop.html#material-instance-information","title":"Examples > How to create an optical property > Material Instance Information","text":"Material Instance Information\n\nA mention “local: “ is added if it is not yet committed to the server.\n\n\n\n\n\n\n\n\n\nThe get methods allows you to get some properties of your feature\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#project-information","title":"Examples > How to create an optical property > Project Information","text":"Project Information\n\nCommitted feature information will appear inside a project information.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#update","title":"Examples > How to create an optical property > Update","text":"Update\n\nTipp: if you are manipulating an optical property already committed, don’t forget to commit your changes.\n\nIf you don’t, you will still only watch what is committed on the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#reset","title":"Examples > How to create an optical property > Reset","text":"Reset\n\nPossibility to reset local values from the one available in the server.\n\n\n\n\n\n\n\n"},{"objectID":"Examples","href":"examples/core/opt-prop.html#delete","title":"Examples > How to create an optical property > Delete","text":"Delete\n\nOnce the data is deleted from the server, you can still work with local data and maybe commit later.\n\n\n\n\n\n\n\n\n\nClean up all Optical properties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#sensortemplatelink","title":"SensorTemplateLink","text":"SensorTemplateLink\n\n\n\nclass ansys.speos.core.kernel.sensor_template.SensorTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for sensor template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.sensor_template.SensorTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the sensor template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.sensor_template import ProtoSensorTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> ssr_t_db = speos.client.sensor_templates()\n>>> ssr_t_message = ProtoSensorTemplate(name=\"Irradiance\")\n>>> ssr_t_message.irradiance_sensor_template.sensor_type_photometric.SetInParent()\n>>> ssr_t_message.irradiance_sensor_template.illuminance_type_planar.SetInParent()\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_start = -50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_end = 50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_sampling = 100\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_start = -50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_end = 50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_sampling = 100\n>>> ssr_t_link = ssr_t_db.create(message=ssr_t_message)"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#overview","title":"SensorTemplateLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget\n\nGet the datamodel from database.\n\nset\n\nChange datamodel in database.\n\ndelete\n\nRemove datamodel from database.\n\nSpecial methods\n\n\n\n\n\n__str__\n\nReturn the string representation of the sensor template."},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#import-detail","title":"SensorTemplateLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#method-detail","title":"SensorTemplateLink > Method detail","text":"Method detail\n\n\n\nSensorTemplateLink.__str__()\n\nReturn the string representation of the sensor template.\n\n\n\nSensorTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsensor_template.SensorTemplate\n\nSensor template datamodel.\n\n\n\nSensorTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsensor_template.SensorTemplate\n\nNew sensor template datamodel.\n\n\n\nSensorTemplateLink.delete()\n\nRemove datamodel from database."},{"objectID":"Home","href":"api/ansys/speos/core/proto_message_utils/index.html#the-proto_message_utilspy-module","title":"The proto_message_utils.py module","text":"The proto_message_utils.py module\n\n"},{"objectID":"Home","href":"api/ansys/speos/core/proto_message_utils/index.html#summary","title":"The proto_message_utils.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ndict_to_str\n\nTransform a dictionary into a string."},{"objectID":"Home","href":"api/ansys/speos/core/proto_message_utils/index.html#description","title":"The proto_message_utils.py module > Description","text":"Description\n\nModule with method to process Protobuf messages."},{"objectID":"Home","href":"api/ansys/speos/core/proto_message_utils/index.html#module-detail","title":"The proto_message_utils.py module > Module detail","text":"Module detail\n\n\n\nproto_message_utils.dict_to_str(dict)\n\nTransform a dictionary into a string.\n\nParameters\n\ndict\n\nDictionary to transform.\n\nReturns\n\npython:str\n\nString representation of the dictionary."}]