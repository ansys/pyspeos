





:class:`SensorIrradiance`
=========================

.. py:class:: ansys.speos.core.sensor.SensorIrradiance(project, name, description = '', metadata = None, sensor_instance = None, default_values = True)

   Bases: :py:obj:`BaseSensor`


   
   Sensor feature: Irradiance.
   By default, regarding inherent characteristics, an irradiance sensor of type photometric and illuminance type planar is chosen.
   By default, regarding properties, an axis system is selected to position the sensor, no layer separation and no ray file generation
   are chosen.


   :Parameters:

       **project** : :obj:`ansys.speos.core.project.Project`
           Project that will own the feature.

       **name** : :class:`python:str`
           Name of the feature.

       **description** : :class:`python:str`
           Description of the feature.
           By default, ``""``.

       **metadata** : :obj:`Optional`\[:obj:`Mapping`\[:class:`python:str`, :class:`python:str`]]
           Metadata of the feature.
           By default, ``{}``.

       **sensor_instance** : :obj:`ansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance`, :obj:`optional`
           Sensor instance to provide if the feature does not has to be created from scratch
           By default, ``None``, means that the feature is created from scratch by default.

       **default_values** : :ref:`bool <python:bltin-boolean-values>`
           Uses default values when True.
           By default, ``True``.














   ..
       !! processed by numpydoc !!


.. py:currentmodule:: SensorIrradiance

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~set_dimensions`
            - Set the dimensions of the sensor.
          * - :py:attr:`~set_type_photometric`
            - Set type photometric.
          * - :py:attr:`~set_type_colorimetric`
            - Set type colorimetric.
          * - :py:attr:`~set_type_radiometric`
            - Set type radiometric.
          * - :py:attr:`~set_type_spectral`
            - Set type spectral.
          * - :py:attr:`~set_illuminance_type_planar`
            - Set illuminance type planar.
          * - :py:attr:`~set_illuminance_type_radial`
            - Set illuminance type radial.
          * - :py:attr:`~set_illuminance_type_hemispherical`
            - Set illuminance type hemispherical.
          * - :py:attr:`~set_illuminance_type_cylindrical`
            - Set illuminance type cylindrical.
          * - :py:attr:`~set_illuminance_type_semi_cylindrical`
            - Set illuminance type semi cylindrical.
          * - :py:attr:`~set_axis_system`
            - Set position of the sensor.
          * - :py:attr:`~set_ray_file_type_none`
            - Set no ray file generation.
          * - :py:attr:`~set_ray_file_type_classic`
            - Set ray file generation without polarization data.
          * - :py:attr:`~set_ray_file_type_polarization`
            - Set ray file generation with the polarization data for each ray.
          * - :py:attr:`~set_ray_file_type_tm25`
            - Set ray file generation: a .tm25ray file with polarization data for each ray.
          * - :py:attr:`~set_ray_file_type_tm25_no_polarization`
            - Set ray file generation: a .tm25ray file without polarization data.
          * - :py:attr:`~set_layer_type_none`
            - Defines layer separation type as None.
          * - :py:attr:`~set_layer_type_source`
            - Defines layer separation as by source.
          * - :py:attr:`~set_layer_type_face`
            - Defines layer separation as by face.
          * - :py:attr:`~set_layer_type_sequence`
            - Defines layer separation as by sequence.
          * - :py:attr:`~set_layer_type_polarization`
            - Define layer separation as by polarization.
          * - :py:attr:`~set_layer_type_incidence_angle`
            - Defines layer separation as by incidence angle
          * - :py:attr:`~set_output_face_geometries`
            - Select output faces for inverse simulation optimization.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~dimensions`
            - Property containing all options in regard to the Dimensions sensor properties
          * - :py:attr:`~type`
            - Type of sensor.
          * - :py:attr:`~colorimetric`
            - Property containing all options in regard to the Colorimetric sensor properties.
          * - :py:attr:`~spectral`
            - Property containing all options in regard to the Spectral sensor properties.
          * - :py:attr:`~layer`
            - Property containing all options in regard to the layer separation properties







Import detail
-------------

.. code-block:: python

    from ansys.speos.core.sensor import SensorIrradiance

Property detail
---------------

.. py:property:: dimensions
   :type: BaseSensor


   
   Property containing all options in regard to the Dimensions sensor properties





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.Dimensions`
           Instance of Dimensions Class for this sensor feature











   ..
       !! processed by numpydoc !!

.. py:property:: type
   :type: str


   
   Type of sensor.





   :Returns:

       :class:`python:str`
           Sensor type as string











   ..
       !! processed by numpydoc !!

.. py:property:: colorimetric
   :type: Union[None, BaseSensor]


   
   Property containing all options in regard to the Colorimetric sensor properties.





   :Returns:

       :obj:`Union`\[:data:`python:None`, :obj:`ansys.speos.core.sensor.BaseSensor.Colorimetric`]
           Instance of Colorimetric Class for this sensor feature











   ..
       !! processed by numpydoc !!

.. py:property:: spectral
   :type: Union[None, BaseSensor]


   
   Property containing all options in regard to the Spectral sensor properties.





   :Returns:

       :obj:`Union`\[:data:`python:None`, :obj:`ansys.speos.core.sensor.BaseSensor.Spectral`]
           Instance of Spectral Class for this sensor feature











   ..
       !! processed by numpydoc !!

.. py:property:: layer
   :type: Union[None, SensorIrradiance, BaseSensor, BaseSensor, BaseSensor]


   
   Property containing all options in regard to the layer separation properties





   :Returns:

       :obj:`Union`\[            :data:`python:None`,            :obj:`ansys.speos.core.sensor.Irradiance`,            :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeFace`,            :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeSequence`,            :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle`        ]
           Instance of Layertype Class for this sensor feature











   ..
       !! processed by numpydoc !!




Method detail
-------------

.. py:method:: set_dimensions()

   
   Set the dimensions of the sensor.





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.Dimensions`
           Dimension class











   ..
       !! processed by numpydoc !!

.. py:method:: set_type_photometric()

   
   Set type photometric.
   The sensor considers the visible spectrum and gets the results in lm/m2 or lx.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor











   ..
       !! processed by numpydoc !!

.. py:method:: set_type_colorimetric()

   
   Set type colorimetric.
   The sensor will generate color results without any spectral data or layer separation (in lx or W//m2).





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.Colorimetric`
           Colorimetric type.











   ..
       !! processed by numpydoc !!

.. py:method:: set_type_radiometric()

   
   Set type radiometric.
   The sensor considers the entire spectrum and gets the results in W/m2.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_type_spectral()

   
   Set type spectral.
   The sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.Spectral`
           Spectral type.











   ..
       !! processed by numpydoc !!

.. py:method:: set_illuminance_type_planar(integration_direction = None)

   
   Set illuminance type planar.
   The integration is made orthogonally with the sensor plane.


   :Parameters:

       **integration_direction** : :obj:`List`\[:class:`python:float`], :obj:`optional`
           Sensor global integration direction [x,y,z].
           By default, ``None``. None means that a default direction is chosen (anti-normal of the sensor plane).



   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_illuminance_type_radial()

   
   Set illuminance type radial.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_illuminance_type_hemispherical()

   
   Set illuminance type hemispherical.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_illuminance_type_cylindrical()

   
   Set illuminance type cylindrical.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_illuminance_type_semi_cylindrical(integration_direction = None)

   
   Set illuminance type semi cylindrical.


   :Parameters:

       **integration_direction** : :obj:`List`\[:class:`python:float`], :obj:`optional`
           Sensor global integration direction [x,y,z].
           By default, ``None``. None means that a default direction is chosen (anti-normal of the sensor plane).



   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_axis_system(axis_system = None)

   
   Set position of the sensor.


   :Parameters:

       **axis_system** : :obj:`Optional`\[:obj:`List`\[:class:`python:float`]]
           Position of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].
           By default, ``[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]``.



   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_ray_file_type_none()

   
   Set no ray file generation.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_ray_file_type_classic()

   
   Set ray file generation without polarization data.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_ray_file_type_polarization()

   
   Set ray file generation with the polarization data for each ray.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_ray_file_type_tm25()

   
   Set ray file generation: a .tm25ray file with polarization data for each ray.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_ray_file_type_tm25_no_polarization()

   
   Set ray file generation: a .tm25ray file without polarization data.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_none()

   
   Defines layer separation type as None.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           irradiance class instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_source()

   
   Defines layer separation as by source.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           irradiance class instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_face()

   
   Defines layer separation as by face.





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeFace`
           LayerTypeFace property instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_sequence()

   
   Defines layer separation as by sequence.





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeSequence`
           LayerTypeSequence property instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_polarization()

   
   Define layer separation as by polarization.





   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance class instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_layer_type_incidence_angle()

   
   Defines layer separation as by incidence angle





   :Returns:

       :obj:`ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle`
           LayerTypeIncidenceAngle property instance











   ..
       !! processed by numpydoc !!

.. py:method:: set_output_face_geometries(geometries = None)

   
   Select output faces for inverse simulation optimization.


   :Parameters:

       **geometries** : :obj:`List`\[:obj:`ansys.speos.core.geo_ref.GeoRef`]
           List of geometries that will be considered as output faces.
           By default, ``[]``, ie no output faces.



   :Returns:

       :obj:`ansys.speos.core.sensor.SensorIrradiance`
           Irradiance sensor.











   ..
       !! processed by numpydoc !!




