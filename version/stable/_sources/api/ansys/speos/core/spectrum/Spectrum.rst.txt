





:class:`Spectrum`
=================


.. py:class:: ansys.speos.core.spectrum.Spectrum(speos_client, name, description = '', metadata = None, key = '')

   
   Speos feature : Spectrum.

   By default, a monochromatic spectrum is created.

   :Parameters:

       **speos_client** : :obj:`ansys.speos.core.kernel.client.SpeosClient`
           The Speos instance client.

       **name** : :class:`python:str`
           Name of the feature.

       **description** : :class:`python:str`
           Description of the feature.
           By default, ``""``.

       **metadata** : :obj:`Optional`\[:obj:`Mapping`\[:class:`python:str`, :class:`python:str`]]
           Metadata of the feature.
           By default, ``{}``.

       **key** : :class:`python:str`
           Creation from an SpectrumLink key

   :Attributes:

       **spectrum_link** : :obj:`ansys.speos.core.kernel.spectrum.SpectrumLink`
           Link object for the spectrum in database.













   ..
       !! processed by numpydoc !!



.. py:currentmodule:: Spectrum

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~set_monochromatic`
            - Set the spectrum as monochromatic.
          * - :py:attr:`~set_blackbody`
            - Set the spectrum as blackbody.
          * - :py:attr:`~set_sampled`
            - Set the spectrum as sampled.
          * - :py:attr:`~set_library`
            - Set the spectrum as library.
          * - :py:attr:`~set_incandescent`
            - Set the spectrum as incandescent (predefined spectrum).
          * - :py:attr:`~set_warmwhitefluorescent`
            - Set the spectrum as warmwhitefluorescent (predefined spectrum).
          * - :py:attr:`~set_daylightfluorescent`
            - Set the spectrum as daylightfluorescent (predefined spectrum).
          * - :py:attr:`~set_whiteLED`
            - Set the spectrum as white led (predefined spectrum).
          * - :py:attr:`~set_white_led`
            - Set the spectrum as white led (predefined spectrum).
          * - :py:attr:`~set_halogen`
            - Set the spectrum as halogen (predefined spectrum).
          * - :py:attr:`~set_metalhalide`
            - Set the spectrum as metalhalide (predefined spectrum).
          * - :py:attr:`~set_highpressuresodium`
            - Set the spectrum as highpressuresodium (predefined spectrum).
          * - :py:attr:`~commit`
            - Save feature: send the local data to the speos server database.
          * - :py:attr:`~reset`
            - Reset feature: override local data by the one from the speos server database.
          * - :py:attr:`~delete`
            - Delete feature: delete data from the speos server database.



   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~spectrum_link`
            - Link object for the spectrum in database.



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - Return the string representation of the spectrum.




Import detail
-------------

.. code-block:: python

    from ansys.speos.core.spectrum import Spectrum


Attribute detail
----------------

.. py:attribute:: spectrum_link
   :value: None


   
   Link object for the spectrum in database.
















   ..
       !! processed by numpydoc !!



Method detail
-------------

.. py:method:: set_monochromatic(wavelength = 555.0)

   
   Set the spectrum as monochromatic.


   :Parameters:

       **wavelength** : :class:`python:float`
           Wavelength of the spectrum, in nm.
           By default, ``555.0``.



   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_blackbody(temperature = 2856)

   
   Set the spectrum as blackbody.


   :Parameters:

       **temperature** : :class:`python:float`
           Temperature of the blackbody, in K.
           By default, ``2856``.



   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_sampled(wavelengths, values)

   
   Set the spectrum as sampled.


   :Parameters:

       **wavelengths** : :obj:`List`\[:class:`python:float`]
           List of wavelengths, in nm

       **values** : :obj:`List`\[:class:`python:float`]
           List of values, expected from 0. to 100. in %



   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_library(file_uri)

   
   Set the spectrum as library.


   :Parameters:

       **file_uri** : :class:`python:str`
           uri of the spectrum file.



   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_incandescent()

   
   Set the spectrum as incandescent (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_warmwhitefluorescent()

   
   Set the spectrum as warmwhitefluorescent (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_daylightfluorescent()

   
   Set the spectrum as daylightfluorescent (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_whiteLED()

   
   Set the spectrum as white led (predefined spectrum).

   .. deprecated:: 0.2.2
       `set_whiteLed` will be removed with 0.3.0
       `set_white_led` shall be used to comply with PEP8 naming convention




   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_white_led()

   
   Set the spectrum as white led (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_halogen()

   
   Set the spectrum as halogen (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_metalhalide()

   
   Set the spectrum as metalhalide (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: set_highpressuresodium()

   
   Set the spectrum as highpressuresodium (predefined spectrum).





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: __str__()

   
   Return the string representation of the spectrum.
















   ..
       !! processed by numpydoc !!

.. py:method:: commit()

   
   Save feature: send the local data to the speos server database.





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: reset()

   
   Reset feature: override local data by the one from the speos server database.





   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!

.. py:method:: delete()

   
   Delete feature: delete data from the speos server database.

   The local data are still available




   :Returns:

       :obj:`ansys.speos.core.spectrum.Spectrum`
           Spectrum feature.











   ..
       !! processed by numpydoc !!




