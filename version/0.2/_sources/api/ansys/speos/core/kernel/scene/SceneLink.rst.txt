





:class:`SceneLink`
==================

.. py:class:: ansys.speos.core.kernel.scene.SceneLink(db, key)

   Bases: :py:obj:`ansys.speos.core.kernel.crud.CrudItem`


   
   Link object for a scene in database.


   :Parameters:

       **db** : :obj:`ansys.speos.core.kernel.scene.SceneStub`
           Database to link to.

       **key** : :class:`python:str`
           Key of the scene in the database.













   .. rubric:: Examples

   >>> from ansys.speos.core.speos import Speos
   >>> from ansys.speos.core.kernel.scene import ProtoScene
   >>> speos = Speos(host="localhost", port=50098)
   >>> sce_db = speos.client.scenes()
   >>> sce_link = sce_db.create(message=ProtoScene(name="Empty_Scene"))

   ..
       !! processed by numpydoc !!



.. py:currentmodule:: SceneLink

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~get`
            - Get the datamodel from database.
          * - :py:attr:`~set`
            - Change datamodel in database.
          * - :py:attr:`~delete`
            - Remove datamodel from database.
          * - :py:attr:`~load_file`
            - Load speos file to fill the scene.
          * - :py:attr:`~get_source_ray_paths`
            - Retrieve source ray paths.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__str__`
            - Return the string representation of the scene.




Import detail
-------------

.. code-block:: python

    from ansys.speos.core.kernel.scene import SceneLink



Method detail
-------------

.. py:method:: __str__()

   
   Return the string representation of the scene.
















   ..
       !! processed by numpydoc !!

.. py:method:: get()

   
   Get the datamodel from database.





   :Returns:

       :obj:`scene.Scene`
           Scene datamodel.











   ..
       !! processed by numpydoc !!

.. py:method:: set(data)

   
   Change datamodel in database.


   :Parameters:

       **data** : :obj:`scene.Scene`
           New scene datamodel.














   ..
       !! processed by numpydoc !!

.. py:method:: delete()

   
   Remove datamodel from database.
















   ..
       !! processed by numpydoc !!

.. py:method:: load_file(file_uri)

   
   Load speos file to fill the scene.


   :Parameters:

       **file_uri** : :class:`python:str`
           File to be loaded.














   ..
       !! processed by numpydoc !!

.. py:method:: get_source_ray_paths(source_path, rays_nb = 100)

   
   Retrieve source ray paths.


   :Parameters:

       **source_path** : :class:`python:str`
           Path to the source in the Scene : "<source name>" for a specific source in the current scene,
           or "<sub-scene name>/<source name>" for a specific source in a specific sub scene.

       **rays_nb** : :class:`python:int`, :obj:`optional`
           Number of rays generated by the source.
           By default, ``100``.



   :Returns:

       :obj:`Iterator`\[:obj:`ansys.api.speos.results.v1.ray_path_pb2.RayPath`]
           Ray paths generated by the source.











   ..
       !! processed by numpydoc !!




