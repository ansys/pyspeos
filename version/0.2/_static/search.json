[
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#scenelink",
        "title": "SceneLink",
        "section": "SceneLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a scene in database.\nDatabase to link to.\nKey of the scene in the database.\nkey (str)\nSceneLink\nSceneLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.scene.SceneStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#ansys.speos.core.kernel.scene.SceneLink",
        "title": "SceneLink > SceneLink > SceneLink",
        "section": "SceneLink > SceneLink",
        "text": "class ansys.speos.core.kernel.scene.SceneLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a scene in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.scene.SceneStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the scene in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.scene import ProtoScene\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sce_db = speos.client.scenes()\n>>> sce_link = sce_db.create(message=ProtoScene(name=\"Empty_Scene\"))\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#overview",
        "title": "SceneLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\nload_file\nLoad speos file to fill the scene.\nget_source_ray_paths\nRetrieve source ray paths.\n__str__\nReturn the string representation of the scene.\nOverview\nget\nset\ndelete\nload_file\nget_source_ray_paths\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#import-detail",
        "title": "SceneLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#method-detail",
        "title": "SceneLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the scene.\nGet the datamodel from database.\nScene datamodel.\nChange datamodel in database.\nNew scene datamodel.\nRemove datamodel from database.\nLoad speos file to fill the scene.\nFile to be loaded.\nRetrieve source ray paths.\nPath to the source in the Scene : “<source name>” for a specific source in the current scene,\nor “<sub-scene name>/<source name>” for a specific source in a specific sub scene.\nNumber of rays generated by the source.\nBy default, 100.\nRay paths generated by the source.\nMethod detail\nscene.Scene\nscene.Scene\npython:str\npython:str\npython:int\noptional\n100\nIterator\nansys.api.speos.results.v1.ray_path_pb2.RayPath"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.__str__",
        "title": "SceneLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SceneLink.__str__()\n\nReturn the string representation of the scene.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.get",
        "title": "SceneLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SceneLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nscene.Scene\n\nScene datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.set",
        "title": "SceneLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SceneLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nscene.Scene\n\nNew scene datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.delete",
        "title": "SceneLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SceneLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.load_file",
        "title": "SceneLink > Method detail > load_file",
        "section": "Method detail > load_file",
        "text": "SceneLink.load_file(file_uri)\n\nLoad speos file to fill the scene.\n\nParameters\n\nfile_uri\n\npython:str\n\nFile to be loaded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneLink",
        "href": "api/ansys/speos/core/kernel/scene/SceneLink.html#SceneLink.get_source_ray_paths",
        "title": "SceneLink > Method detail > get_source_ray_paths",
        "section": "Method detail > get_source_ray_paths",
        "text": "SceneLink.get_source_ray_paths(source_path, rays_nb=100)\n\nRetrieve source ray paths.\n\nParameters\n\nsource_path\n\npython:str\n\nPath to the source in the Scene : “<source name>” for a specific source in the current scene,\nor “<sub-scene name>/<source name>” for a specific source in a specific sub scene.\n\nrays_nb\n\npython:int, optional\n\nNumber of rays generated by the source.\nBy default, 100.\n\nReturns\n\nIterator[ansys.api.speos.results.v1.ray_path_pb2.RayPath]\n\nRay paths generated by the source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#soptemplatestub",
        "title": "SOPTemplateStub",
        "section": "SOPTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for Surface Optical Properties templates.\nChannel to use for the stub.\nThe best way to get a SOPTemplateStub is to retrieve it from SpeosClient via sop_templates() method.\nLike in the following example:\nSOPTemplateStub\nSOPTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#ansys.speos.core.kernel.sop_template.SOPTemplateStub",
        "title": "SOPTemplateStub > SOPTemplateStub > SOPTemplateStub",
        "section": "SOPTemplateStub > SOPTemplateStub",
        "text": "class ansys.speos.core.kernel.sop_template.SOPTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for Surface Optical Properties templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SOPTemplateStub is to retrieve it from SpeosClient via sop_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sop_t_db = speos.client.sop_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#overview",
        "title": "SOPTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#import-detail",
        "title": "SOPTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#method-detail",
        "title": "SOPTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nsop_template.SOPTemplate\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nsop_template.SOPTemplate\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nsop_template.SOPTemplate\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nList\nansys.speos.core.kernel.sop_template.SOPTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#SOPTemplateStub.create",
        "title": "SOPTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SOPTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsop_template.SOPTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#SOPTemplateStub.read",
        "title": "SOPTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SOPTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to read.\n\nReturns\n\nsop_template.SOPTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#SOPTemplateStub.update",
        "title": "SOPTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SOPTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to update.\n\ndata\n\nsop_template.SOPTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#SOPTemplateStub.delete",
        "title": "SOPTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SOPTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sop_template.SOPTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateStub.html#SOPTemplateStub.list",
        "title": "SOPTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SOPTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.sop_template.SOPTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#raysnumberpersource",
        "title": "RaysNumberPerSource",
        "section": "RaysNumberPerSource",
        "text": "Structure to describe the number of rays requested for a specific source.\nSource selected via its path (“SourceName”).\nNumber of rays to be emitted by the source.\nIf None is given, 100 rays will be sent.\nsource_path (str)\nrays_nb (Optional[int])\nRaysNumberPerSource\nRaysNumberPerSource\npython:str\npython:int\noptional"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#ansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource",
        "title": "RaysNumberPerSource > RaysNumberPerSource > RaysNumberPerSource",
        "section": "RaysNumberPerSource > RaysNumberPerSource",
        "text": "class ansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource(source_path, rays_nb)\n\nStructure to describe the number of rays requested for a specific source.\n\nParameters\n\nsource_path\n\npython:str\n\nSource selected via its path (“SourceName”).\n\nrays_nb\n\npython:int, optional\n\nNumber of rays to be emitted by the source.\nIf None is given, 100 rays will be sent.\n\nParameters\n\nsource_path (str)\n\nrays_nb (Optional[int])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#overview",
        "title": "RaysNumberPerSource > Overview",
        "section": "Overview",
        "text": "source_path\nSource path.\nrays_nb\nNumber of rays to be emitted by the source. If None, it means 100 rays.\nOverview\nsource_path\nrays_nb"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#import-detail",
        "title": "RaysNumberPerSource > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#attribute-detail",
        "title": "RaysNumberPerSource > Attribute detail",
        "section": "Attribute detail",
        "text": "Source path.\nNumber of rays to be emitted by the source. If None, it means 100 rays.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#RaysNumberPerSource.source_path",
        "title": "RaysNumberPerSource > Attribute detail > source_path",
        "section": "Attribute detail > source_path",
        "text": "RaysNumberPerSource.source_path\n\nSource path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.RaysNumberPerSource.html#RaysNumberPerSource.rays_nb",
        "title": "RaysNumberPerSource > Attribute detail > rays_nb",
        "section": "Attribute detail > rays_nb",
        "text": "RaysNumberPerSource.rays_nb\n\nNumber of rays to be emitted by the source. If None, it means 100 rays.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#the-lxppy-module",
        "title": "The lxp.py module",
        "section": "The lxp.py module",
        "text": "The lxp.py module\nlxp.py"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#summary",
        "title": "The lxp.py module > Summary",
        "section": "Summary",
        "text": "RayPath\nFramework representing a singular ray path.\nLightPathFinder\nDefine an interface to read LPF files.\nwavelength_to_rgb\nConvert a given wavelength of light to an approximate RGB color value.\nERROR_IDS\nIntersection types indicating an error state.\nNO_ERROR_IDS\nIntersection types indicating a correct ray state.\nSummary\nRayPath\nLightPathFinder\nwavelength_to_rgb\nERROR_IDS\nNO_ERROR_IDS"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#description",
        "title": "The lxp.py module > Description",
        "section": "Description",
        "text": "The lxp module contains classes and functions to simplify the interaction with ray data (LPF file).\nLPF files contain a set of simulated rays with all their intersections and properties.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#module-detail",
        "title": "The lxp.py module > Module detail",
        "section": "Module detail",
        "text": "Convert a given wavelength of light to an approximate RGB color value.\nThe wavelength must be given in nanometers in the range from 380 nm to 750 nm (789 THz to 400 THz).\nBased on the code from http://www.physics.sfasu.edu/astro/color/spectra.html\nWavelength in nanometer between 380-750 nm\nGamma value.\nBy default : 0.8\nIntersection types indicating an error state.\nIntersection types indicating a correct ray state.\nModule detail\npython:float\npython:float\n0.8"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#lxp.wavelength_to_rgb",
        "title": "The lxp.py module > Module detail > wavelength_to_rgb",
        "section": "Module detail > wavelength_to_rgb",
        "text": "lxp.wavelength_to_rgb(wavelength, gamma=0.8)\n\nConvert a given wavelength of light to an approximate RGB color value.\n\nThe wavelength must be given in nanometers in the range from 380 nm to 750 nm (789 THz to 400 THz).\nBased on the code from http://www.physics.sfasu.edu/astro/color/spectra.html\n\nParameters\n\nwavelength\n\npython:float\n\nWavelength in nanometer between 380-750 nm\n\ngamma\n\npython:float\n\nGamma value.\nBy default : 0.8\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#lxp.ERROR_IDS",
        "title": "The lxp.py module > Module detail > ERROR_IDS",
        "section": "Module detail > ERROR_IDS",
        "text": "lxp.ERROR_IDS = [7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nIntersection types indicating an error state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/index",
        "href": "api/ansys/speos/core/lxp/index.html#lxp.NO_ERROR_IDS",
        "title": "The lxp.py module > Module detail > NO_ERROR_IDS",
        "section": "Module detail > NO_ERROR_IDS",
        "text": "lxp.NO_ERROR_IDS\n\nIntersection types indicating a correct ray state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#jobstub",
        "title": "JobStub",
        "section": "JobStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for job.\nChannel to use for the stub.\nThe best way to get a JobStub is to retrieve it from SpeosClient via jobs() method.\nLike in the following example:\nJobStub\nJobStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#ansys.speos.core.kernel.job.JobStub",
        "title": "JobStub > JobStub > JobStub",
        "section": "JobStub > JobStub",
        "text": "class ansys.speos.core.kernel.job.JobStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for job.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a JobStub is to retrieve it from SpeosClient via jobs() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> job_db = speos.client.jobs()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#overview",
        "title": "JobStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#import-detail",
        "title": "JobStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#method-detail",
        "title": "JobStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\njob.Job\nansys.speos.core.kernel.job.JobLink\nansys.speos.core.kernel.job.JobLink\njob.Job\nansys.speos.core.kernel.job.JobLink\njob.Job\nansys.speos.core.kernel.job.JobLink\nList\nansys.speos.core.kernel.job.JobLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#JobStub.create",
        "title": "JobStub > Method detail > create",
        "section": "Method detail > create",
        "text": "JobStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\njob.Job\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.job.JobLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#JobStub.read",
        "title": "JobStub > Method detail > read",
        "section": "Method detail > read",
        "text": "JobStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to read.\n\nReturns\n\njob.Job\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#JobStub.update",
        "title": "JobStub > Method detail > update",
        "section": "Method detail > update",
        "text": "JobStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to update.\n\ndata\n\njob.Job\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#JobStub.delete",
        "title": "JobStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "JobStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.job.JobLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobStub",
        "href": "api/ansys/speos/core/kernel/job/JobStub.html#JobStub.list",
        "title": "JobStub > Method detail > list",
        "section": "Method detail > list",
        "text": "JobStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.job.JobLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#facestub",
        "title": "FaceStub",
        "section": "FaceStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for face.\nChannel to use for the stub.\nThe best way to get a FaceStub is to retrieve it from SpeosClient via faces() method.\nLike in the following example:\nFaceStub\nFaceStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#ansys.speos.core.kernel.face.FaceStub",
        "title": "FaceStub > FaceStub > FaceStub",
        "section": "FaceStub > FaceStub",
        "text": "class ansys.speos.core.kernel.face.FaceStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for face.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a FaceStub is to retrieve it from SpeosClient via faces() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> face_db = speos.client.faces()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#overview",
        "title": "FaceStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#import-detail",
        "title": "FaceStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#method-detail",
        "title": "FaceStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nface.Face\nansys.speos.core.kernel.face.FaceLink\nansys.speos.core.kernel.face.FaceLink\nface.Face\nansys.speos.core.kernel.face.FaceLink\nface.Face\nansys.speos.core.kernel.face.FaceLink\nList\nansys.speos.core.kernel.face.FaceLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#FaceStub.create",
        "title": "FaceStub > Method detail > create",
        "section": "Method detail > create",
        "text": "FaceStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nface.Face\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#FaceStub.read",
        "title": "FaceStub > Method detail > read",
        "section": "Method detail > read",
        "text": "FaceStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to read.\n\nReturns\n\nface.Face\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#FaceStub.update",
        "title": "FaceStub > Method detail > update",
        "section": "Method detail > update",
        "text": "FaceStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to update.\n\ndata\n\nface.Face\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#FaceStub.delete",
        "title": "FaceStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "FaceStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceStub",
        "href": "api/ansys/speos/core/kernel/face/FaceStub.html#FaceStub.list",
        "title": "FaceStub > Method detail > list",
        "section": "Method detail > list",
        "text": "FaceStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.face.FaceLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pyspeos-documentation-021",
        "title": "PySpeos documentation 0.2.1",
        "section": "PySpeos documentation 0.2.1",
        "text": "PySpeos is a Python client library that gathers functionalities and tools based on remote API of Ansys software\nSpeos .\nOverview of the PySpeos library.\nLearn how to run the Linux Docker container, install the\nPySpeos image, and launch and connect to the Speos\nservice.\nUnderstand PySpeos API endpoints, their capabilities,\nand how to interact with them programmatically.\nLearn how to use PySpeos with examples that demonstrate its capabilities.\nLearn how to contribute to the PySpeos codebase\nor documentation.\nPySpeos documentation 0.2.1\nPySpeos"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PySpeos.\nThe following contribution information is specific to PySpeos.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest PySpeos release in development mode, run\nthese commands:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PySpeos Issues\npage to submit questions, report bugs, and request new features. When possible, you\nshould use these issue templates:\nBug, problem, error: For filing a bug report\nDocumentation error: For requesting modifications to the documentation\nAdding an example: For proposing a new example\nNew feature: For requesting enhancements to the code\nIf your issue does not fit into one of these template categories, you can click\nthe link for opening a blank issue.\nTo reach the project support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PySpeos is hosted at\nPySpeos Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PySpeos follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-the-documentation",
        "title": "Contribute > Build the documentation",
        "section": "Build the documentation",
        "text": "To build the full documentation, you must have a running SpeosRPC server\nbecause it is used to generate the examples in the documentation. It is also\nrecommended that the service is running as a Docker container.\nIf you do not have the SpeosRPC server installed, you can still build the\ndocumentation, but the examples are not generated. To build the\ndocumentation without the examples, define the following environment variable:\nTo build the documentation locally, you must run this command to install the\ndocumentation dependencies:\nThen, navigate to the docs directory and run this command:\nThe documentation is built in the docs/_build/html directory.\nYou can clean the documentation build by running this command:\nBuild the documentation\ndocs\ndocs/_build/html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-tests",
        "title": "Contribute > Run tests",
        "section": "Run tests",
        "text": "PySpeos uses pytest for testing.\nRun tests"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#prerequisites",
        "title": "Contribute > Prerequisites",
        "section": "Prerequisites",
        "text": "Prior to running the tests, you must run this command to install the test dependencies:\nPrerequisites"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#running-the-tests",
        "title": "Contribute > Running the tests",
        "section": "Running the tests",
        "text": "To run the tests, you need to first start navigate to the root directory of the repository and run this command:\nThe tests require the SpeosRPC server to be installed and running on your machine.\nThe tests fail if the service is not running. It is recommended for the SpeosRPC server\nto be running as a Docker container.\nRunning the tests"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#layertypeface",
        "title": "LayerTypeFace",
        "section": "LayerTypeFace",
        "text": "Type of layer : Face.\nIncludes in the result one layer per surface selected.\nBy default, a filtering mode by last impact is chosen.\nLayerTypeFace protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nlayer_type_face (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeFace)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_layer_type_face method available in sensor classes.\nLayerTypeFace\nLayerTypeFace\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeFace"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#ansys.speos.core.sensor.BaseSensor.LayerTypeFace",
        "title": "LayerTypeFace > LayerTypeFace > LayerTypeFace",
        "section": "LayerTypeFace > LayerTypeFace",
        "text": "class ansys.speos.core.sensor.BaseSensor.LayerTypeFace(layer_type_face, default_values=True, stable_ctr=False)\n\nType of layer : Face.\n\nIncludes in the result one layer per surface selected.\nBy default, a filtering mode by last impact is chosen.\n\nParameters\n\nlayer_type_face\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeFace\n\nLayerTypeFace protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_face (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeFace)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_face method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#overview",
        "title": "LayerTypeFace > Overview",
        "section": "Overview",
        "text": "set_sca_filtering_mode_intersected_one_time\nSet the filtering mode as intersected one time.\nset_sca_filtering_mode_last_impact\nSet the filtering mode as last impact.\nset_layers\nSet the layers.\nOverview\nset_sca_filtering_mode_intersected_one_time\nset_sca_filtering_mode_last_impact\nset_layers"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#import-detail",
        "title": "LayerTypeFace > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#method-detail",
        "title": "LayerTypeFace > Method detail",
        "section": "Method detail",
        "text": "Set the filtering mode as intersected one time.\nLayerTypeFace.\nSet the filtering mode as last impact.\nLayerTypeFace.\nSet the layers.\nList of layers\nLayerTypeFace.\nMethod detail\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nList\nansys.speos.core.sensor.BaseSensor.FaceLayer\nansys.speos.core.sensor.BaseSensor.LayerTypeFace"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#LayerTypeFace.set_sca_filtering_mode_intersected_one_time",
        "title": "LayerTypeFace > Method detail > set_sca_filtering_mode_intersected_one_time",
        "section": "Method detail > set_sca_filtering_mode_intersected_one_time",
        "text": "LayerTypeFace.set_sca_filtering_mode_intersected_one_time()\n\nSet the filtering mode as intersected one time.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#LayerTypeFace.set_sca_filtering_mode_last_impact",
        "title": "LayerTypeFace > Method detail > set_sca_filtering_mode_last_impact",
        "section": "Method detail > set_sca_filtering_mode_last_impact",
        "text": "LayerTypeFace.set_sca_filtering_mode_last_impact()\n\nSet the filtering mode as last impact.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeFace.html#LayerTypeFace.set_layers",
        "title": "LayerTypeFace > Method detail > set_layers",
        "section": "Method detail > set_layers",
        "text": "LayerTypeFace.set_layers(values)\n\nSet the layers.\n\nParameters\n\nvalues\n\nList[ansys.speos.core.sensor.BaseSensor.FaceLayer]\n\nList of layers\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#raypath",
        "title": "RayPath",
        "section": "RayPath",
        "text": "Framework representing a singular ray path.\nRayPath object\nDefines if sensor contributions are stored within the data.\nBy default False.\nraypath (ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath)\nsensor_contribution (bool)\nRayPath\nRayPath\nansys.api.speos.lpf.v2.lpf_file_reader__v2__pb2.RayPath\nFalse"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#ansys.speos.core.lxp.RayPath",
        "title": "RayPath > RayPath > RayPath",
        "section": "RayPath > RayPath",
        "text": "class ansys.speos.core.lxp.RayPath(raypath, sensor_contribution=False)\n\nFramework representing a singular ray path.\n\nParameters\n\nraypath\n\nansys.api.speos.lpf.v2.lpf_file_reader__v2__pb2.RayPath\n\nRayPath object\n\nsensor_contribution\n\nbool\n\nDefines if sensor contributions are stored within the data.\nBy default False.\n\nParameters\n\nraypath (ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath)\n\nsensor_contribution (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#overview",
        "title": "RayPath > Overview",
        "section": "Overview",
        "text": "get\nRetrieve any information from the RayPath object.\nnb_impacts\nNumber of impacts contained in ray path.\nimpacts\nXYZ coordinates for each impact.\nwl\nWavelength of the ray.\nbody_ids\nBody ID of interacted body for each impact.\nface_ids\nFace ID of interacted body for each impact.\nlast_direction\nLast direction of the ray.\nintersection_type\nIntersection type of the ray for each impact.\nsensor_contribution\nProvide the sensor contribution information for each sensor.\n__str__\nCreate string representation of a RayPath.\nOverview\nget\nnb_impacts\nimpacts\nwl\nbody_ids\nface_ids\nlast_direction\nintersection_type\nsensor_contribution\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#import-detail",
        "title": "RayPath > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#property-detail",
        "title": "RayPath > Property detail",
        "section": "Property detail",
        "text": "Number of impacts contained in ray path.\nNumber of impacts\nXYZ coordinates for each impact.\nlist containing the impact coordinates [[x0,y0,z0],[x1,y1,z1],…]\nWavelength of the ray.\nWavelength in nm\nBody ID of interacted body for each impact.\nList of body IDs for each impact.\nFace ID of interacted body for each impact.\nList of face IDs for each impact.\nLast direction of the ray.\nLast direction of the rays as list[x,y,z].\nIntersection type of the ray for each impact.\nIntersection type at each impact.\nAvailable intersection types:\nStatusAbsorbed = 0\nStatusSpecularTransmitted = 1\nStatusGaussianTransmitted = 2\nStatusLambertianTransmitted = 3\nStatusVolumicDiffused = 4\nStatusJustEmitted = 5\nStatusDiracTransmitted = 6\nStatusError = 7\nStatusErrorVolumicBodyNotClosed = 8\nStatusErrorVolumeConflict = 9\nStatusError2DTangency = 10\nStatusError2DIntersect3DWarning = 11\nStatusErrorNonOpticalMaterial = 12\nStatusErrorIntersection = 13\nStatusErrorNonOpticalMaterialAtEmission = 14\nStatusError3DTextureSupportTangency = 15\nStatusLast = 16\nStatusFirst = -7\nStatusDiracReflected = -6\nStatusReserved = -5\nStatusGrinStep = -4\nStatusLambertianReflected = -3\nStatusGaussianReflected = -2\nStatusSpecularReflected = -1\nProvide the sensor contribution information for each sensor.\nIf no sensor contribution, None will be returned. If there is sensor contribution, a dictionary with             the following information is returned:            {“sensor_id”: sc.sensor_id,\n“position”: [sc.coordinates.x, sc.coordinates.y]}\nProperty detail\npython:int\npython:list\npython:list\npython:float\npython:float\npython:list\npython:int\npython:list\npython:int\npython:list\npython:float\npython:list\npython:int\nUnion\npython:None\npython:list\npython:dict"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.nb_impacts",
        "title": "RayPath > Property detail > nb_impacts",
        "section": "Property detail > nb_impacts",
        "text": "property RayPath.nb_impacts: int\n\nNumber of impacts contained in ray path.\n\nReturns\n\npython:int\n\nNumber of impacts\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.impacts",
        "title": "RayPath > Property detail > impacts",
        "section": "Property detail > impacts",
        "text": "property RayPath.impacts: list[list[float]]\n\nXYZ coordinates for each impact.\n\nReturns\n\npython:list[python:list[python:float]]\n\nlist containing the impact coordinates [[x0,y0,z0],[x1,y1,z1],…]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.wl",
        "title": "RayPath > Property detail > wl",
        "section": "Property detail > wl",
        "text": "property RayPath.wl: float\n\nWavelength of the ray.\n\nReturns\n\npython:float\n\nWavelength in nm\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.body_ids",
        "title": "RayPath > Property detail > body_ids",
        "section": "Property detail > body_ids",
        "text": "property RayPath.body_ids: list[int]\n\nBody ID of interacted body for each impact.\n\nReturns\n\npython:list[python:int]\n\nList of body IDs for each impact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.face_ids",
        "title": "RayPath > Property detail > face_ids",
        "section": "Property detail > face_ids",
        "text": "property RayPath.face_ids: list[int]\n\nFace ID of interacted body for each impact.\n\nReturns\n\npython:list[python:int]\n\nList of face IDs for each impact.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.last_direction",
        "title": "RayPath > Property detail > last_direction",
        "section": "Property detail > last_direction",
        "text": "property RayPath.last_direction: list[float]\n\nLast direction of the ray.\n\nReturns\n\npython:list[python:float]\n\nLast direction of the rays as list[x,y,z].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.intersection_type",
        "title": "RayPath > Property detail > intersection_type",
        "section": "Property detail > intersection_type",
        "text": "property RayPath.intersection_type: list[int]\n\nIntersection type of the ray for each impact.\n\nReturns\n\npython:list[python:int]\n\nIntersection type at each impact.\n\nNotes\n\nAvailable intersection types:\n\nStatusAbsorbed = 0\n\nStatusSpecularTransmitted = 1\n\nStatusGaussianTransmitted = 2\n\nStatusLambertianTransmitted = 3\n\nStatusVolumicDiffused = 4\n\nStatusJustEmitted = 5\n\nStatusDiracTransmitted = 6\n\nStatusError = 7\n\nStatusErrorVolumicBodyNotClosed = 8\n\nStatusErrorVolumeConflict = 9\n\nStatusError2DTangency = 10\n\nStatusError2DIntersect3DWarning = 11\n\nStatusErrorNonOpticalMaterial = 12\n\nStatusErrorIntersection = 13\n\nStatusErrorNonOpticalMaterialAtEmission = 14\n\nStatusError3DTextureSupportTangency = 15\n\nStatusLast = 16\n\nStatusFirst = -7\n\nStatusDiracReflected = -6\n\nStatusReserved = -5\n\nStatusGrinStep = -4\n\nStatusLambertianReflected = -3\n\nStatusGaussianReflected = -2\n\nStatusSpecularReflected = -1\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.sensor_contribution",
        "title": "RayPath > Property detail > sensor_contribution",
        "section": "Property detail > sensor_contribution",
        "text": "property RayPath.sensor_contribution: None | list[dict]\n\nProvide the sensor contribution information for each sensor.\n\nReturns\n\nUnion[python:None, python:list[python:dict]]\n\nIf no sensor contribution, None will be returned. If there is sensor contribution, a dictionary with             the following information is returned:            {“sensor_id”: sc.sensor_id,\n“position”: [sc.coordinates.x, sc.coordinates.y]}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#method-detail",
        "title": "RayPath > Method detail",
        "section": "Method detail",
        "text": "Retrieve any information from the RayPath object.\nName of the property.\nValues/content of the associated property.\nCreate string representation of a RayPath.\nMethod detail\npython:str\nproperty"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.get",
        "title": "RayPath > Method detail > get",
        "section": "Method detail > get",
        "text": "RayPath.get(key='')\n\nRetrieve any information from the RayPath object.\n\nParameters\n\nkey\n\npython:str\n\nName of the property.\n\nReturns\n\nproperty\n\nValues/content of the associated property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/RayPath",
        "href": "api/ansys/speos/core/lxp/RayPath.html#RayPath.__str__",
        "title": "RayPath > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "RayPath.__str__()\n\nCreate string representation of a RayPath.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#the-launcherpy-module",
        "title": "The launcher.py module",
        "section": "The launcher.py module",
        "text": "The launcher.py module\nlauncher.py"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#summary",
        "title": "The launcher.py module > Summary",
        "section": "Summary",
        "text": "launch_speos\nStart the Speos Service remotely using the product instance management API.\nlaunch_remote_speos\nStart the Speos Service remotely using the product instance management API.\nMAX_MESSAGE_LENGTH\nSummary\nlaunch_speos\nlaunch_remote_speos\nMAX_MESSAGE_LENGTH"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#description",
        "title": "The launcher.py module > Description",
        "section": "Description",
        "text": "Module to start Speos RPC Server.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#module-detail",
        "title": "The launcher.py module > Module detail",
        "section": "Module detail",
        "text": "Start the Speos Service remotely using the product instance management API.\nPrerequisite : product instance management configured.\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\nAn instance of the Speos Service.\nStart the Speos Service remotely using the product instance management API.\nWhen calling this method, you need to ensure that you are in an\nenvironment where PyPIM is configured. This can be verified with\npypim.is_configured.\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\nAn instance of the Speos Service.\nModule detail\npython:str\noptional\nansys.speos.core.speos.Speos\npypim.is_configured\npython:str\noptional\nansys.speos.core.speos.Speos"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#launcher.launch_speos",
        "title": "The launcher.py module > Module detail > launch_speos",
        "section": "Module detail > launch_speos",
        "text": "launcher.launch_speos(version=None)\n\nStart the Speos Service remotely using the product instance management API.\n\nPrerequisite : product instance management configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\n\nReturns\n\nansys.speos.core.speos.Speos\n\nAn instance of the Speos Service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#launcher.launch_remote_speos",
        "title": "The launcher.py module > Module detail > launch_remote_speos",
        "section": "Module detail > launch_remote_speos",
        "text": "launcher.launch_remote_speos(version=None)\n\nStart the Speos Service remotely using the product instance management API.\n\nWhen calling this method, you need to ensure that you are in an\nenvironment where PyPIM is configured. This can be verified with\npypim.is_configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nThe Speos Service version to run, in the 3 digits format, such as “242”.\nIf unspecified, the version will be chosen by the server.\n\nReturns\n\nansys.speos.core.speos.Speos\n\nAn instance of the Speos Service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/launcher/index",
        "href": "api/ansys/speos/core/launcher/index.html#launcher.MAX_MESSAGE_LENGTH",
        "title": "The launcher.py module > Module detail > MAX_MESSAGE_LENGTH",
        "section": "Module detail > MAX_MESSAGE_LENGTH",
        "text": "launcher.MAX_MESSAGE_LENGTH\n\n"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#frequently-asked-questions",
        "title": "Frequently asked questions",
        "section": "Frequently asked questions",
        "text": "Frequently asked questions"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#what-is-pyansys",
        "title": "Frequently asked questions > What is PyAnsys?",
        "section": "What is PyAnsys?",
        "text": "PyAnsys is a set of open source Python libraries that allow you to interface\nwith Ansys Electronics Desktop (AEDT), Ansys Mechanical, Ansys Parametric\nDesign Language (APDL), Ansys Fluent, and other Ansys products.\nYou can use PyAnsys libraries within a Python environment of your choice\nin conjunction with external Python libraries.\nWhat is PyAnsys?"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#what-ansys-license-is-needed-to-run-the-speos-service",
        "title": "Frequently asked questions > What Ansys license is needed to run the Speos service?",
        "section": "What Ansys license is needed to run the Speos service?",
        "text": "The Speos service requires an Ansys Speos license to run.\nGo to Getting started\nWhat Ansys license is needed to run the Speos service?"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#layertypesequence",
        "title": "LayerTypeSequence",
        "section": "LayerTypeSequence",
        "text": "Type of layer : Sequence.\nIncludes in the result one layer per sequence.\nBy default, the sequence is defined per geometries, with a maximum number of 10 sequences.\nLayerTypeSequence protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nlayer_type_sequence (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeSequence)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_layer_type_sequence method available in sensor classes.\nLayerTypeSequence\nLayerTypeSequence\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeSequence"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#ansys.speos.core.sensor.BaseSensor.LayerTypeSequence",
        "title": "LayerTypeSequence > LayerTypeSequence > LayerTypeSequence",
        "section": "LayerTypeSequence > LayerTypeSequence",
        "text": "class ansys.speos.core.sensor.BaseSensor.LayerTypeSequence(layer_type_sequence, default_values=True, stable_ctr=False)\n\nType of layer : Sequence.\n\nIncludes in the result one layer per sequence.\nBy default, the sequence is defined per geometries, with a maximum number of 10 sequences.\n\nParameters\n\nlayer_type_sequence\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeSequence\n\nLayerTypeSequence protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_sequence (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeSequence)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_sequence method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#overview",
        "title": "LayerTypeSequence > Overview",
        "section": "Overview",
        "text": "set_maximum_nb_of_sequence\nSet the maximum number of sequences.\nset_define_sequence_per_geometries\nDefine sequence per geometries.\nset_define_sequence_per_faces\nDefine sequence per faces.\nOverview\nset_maximum_nb_of_sequence\nset_define_sequence_per_geometries\nset_define_sequence_per_faces"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#import-detail",
        "title": "LayerTypeSequence > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#method-detail",
        "title": "LayerTypeSequence > Method detail",
        "section": "Method detail",
        "text": "Set the maximum number of sequences.\nMaximum number of sequences.\nBy default, 10.\nLayerTypeSequence.\nDefine sequence per geometries.\nLayerTypeSequence.\nDefine sequence per faces.\nLayerTypeSequence.\nMethod detail\npython:int\n10\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#LayerTypeSequence.set_maximum_nb_of_sequence",
        "title": "LayerTypeSequence > Method detail > set_maximum_nb_of_sequence",
        "section": "Method detail > set_maximum_nb_of_sequence",
        "text": "LayerTypeSequence.set_maximum_nb_of_sequence(value=10)\n\nSet the maximum number of sequences.\n\nParameters\n\nvalue\n\npython:int\n\nMaximum number of sequences.\nBy default, 10.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#LayerTypeSequence.set_define_sequence_per_geometries",
        "title": "LayerTypeSequence > Method detail > set_define_sequence_per_geometries",
        "section": "Method detail > set_define_sequence_per_geometries",
        "text": "LayerTypeSequence.set_define_sequence_per_geometries()\n\nDefine sequence per geometries.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeSequence.html#LayerTypeSequence.set_define_sequence_per_faces",
        "title": "LayerTypeSequence > Method detail > set_define_sequence_per_faces",
        "section": "Method detail > set_define_sequence_per_faces",
        "text": "LayerTypeSequence.set_define_sequence_per_faces()\n\nDefine sequence per faces.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#soptemplatelink",
        "title": "SOPTemplateLink",
        "section": "SOPTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for Surface Optical Properties template in database.\nDatabase to link to.\nKey of the sop_template in the database.\nkey (str)\nSOPTemplateLink\nSOPTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.sop_template.SOPTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#ansys.speos.core.kernel.sop_template.SOPTemplateLink",
        "title": "SOPTemplateLink > SOPTemplateLink > SOPTemplateLink",
        "section": "SOPTemplateLink > SOPTemplateLink",
        "text": "class ansys.speos.core.kernel.sop_template.SOPTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for Surface Optical Properties template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.sop_template.SOPTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the sop_template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.sop_template import ProtoSOPTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sop_t_db = speos.client.sop_templates()\n>>> sop_t_message = ProtoSOPTemplate(name=\"Mirror_50\")\n>>> sop_t_message.mirror.reflectance = 50\n>>> sop_t_link = sop_t_db.create(message=sop_t_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#overview",
        "title": "SOPTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the sop_template.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#import-detail",
        "title": "SOPTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#method-detail",
        "title": "SOPTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the sop_template.\nGet the datamodel from database.\nSOPTemplate datamodel.\nChange datamodel in database.\nNew SOPTemplate datamodel.\nRemove datamodel from database.\nMethod detail\nsop_template.SOPTemplate\nsop_template.SOPTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#SOPTemplateLink.__str__",
        "title": "SOPTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SOPTemplateLink.__str__()\n\nReturn the string representation of the sop_template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#SOPTemplateLink.get",
        "title": "SOPTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SOPTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsop_template.SOPTemplate\n\nSOPTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#SOPTemplateLink.set",
        "title": "SOPTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SOPTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsop_template.SOPTemplate\n\nNew SOPTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/sop_template/SOPTemplateLink.html#SOPTemplateLink.delete",
        "title": "SOPTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SOPTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#colorimetric",
        "title": "Colorimetric",
        "section": "Colorimetric",
        "text": "Type of sensor : Colorimetric.\nThis kind of sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\nBy default, it uses a default wavelengths range.\nSensorTypeColorimetric protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nsensor_type_colorimetric (ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_type_colorimetric method available in sensor classes.\nColorimetric\nColorimetric\nansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#ansys.speos.core.sensor.BaseSensor.Colorimetric",
        "title": "Colorimetric > Colorimetric > Colorimetric",
        "section": "Colorimetric > Colorimetric",
        "text": "class ansys.speos.core.sensor.BaseSensor.Colorimetric(sensor_type_colorimetric, default_values=True, stable_ctr=False)\n\nType of sensor : Colorimetric.\n\nThis kind of sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\nBy default, it uses a default wavelengths range.\n\nParameters\n\nsensor_type_colorimetric\n\nansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric\n\nSensorTypeColorimetric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_colorimetric (ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_colorimetric method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#overview",
        "title": "Colorimetric > Overview",
        "section": "Overview",
        "text": "set_wavelengths_range\nSet the range of wavelengths.\nOverview\nset_wavelengths_range"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#import-detail",
        "title": "Colorimetric > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#method-detail",
        "title": "Colorimetric > Method detail",
        "section": "Method detail",
        "text": "Set the range of wavelengths.\nWavelengths range.\nMethod detail\nansys.speos.core.sensor.BaseSensor.WavelengthsRange"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Colorimetric.html#Colorimetric.set_wavelengths_range",
        "title": "Colorimetric > Method detail > set_wavelengths_range",
        "section": "Method detail > set_wavelengths_range",
        "text": "Colorimetric.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#balancemodeuserwhite",
        "title": "BalanceModeUserWhite",
        "section": "BalanceModeUserWhite",
        "text": "BalanceMode : UserWhite.\nIn addition to the basic treatment, it allows to apply specific coefficients to the red, green, blue images.\nBy default, coefficients of 1 are chosen for red, green and blue images.\nSensorCameraBalanceModeUserwhite protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nbalance_mode_user_white (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeUserwhite)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_balance_mode_user_white method available in color class.\nBalanceModeUserWhite\nBalanceModeUserWhite\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeUserwhite"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "title": "BalanceModeUserWhite > BalanceModeUserWhite > BalanceModeUserWhite",
        "section": "BalanceModeUserWhite > BalanceModeUserWhite",
        "text": "class ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite(balance_mode_user_white, default_values=True, stable_ctr=False)\n\nBalanceMode : UserWhite.\n\nIn addition to the basic treatment, it allows to apply specific coefficients to the red, green, blue images.\nBy default, coefficients of 1 are chosen for red, green and blue images.\n\nParameters\n\nbalance_mode_user_white\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeUserwhite\n\nSensorCameraBalanceModeUserwhite protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nbalance_mode_user_white (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeUserwhite)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_balance_mode_user_white method available in color class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#overview",
        "title": "BalanceModeUserWhite > Overview",
        "section": "Overview",
        "text": "set_red_gain\nSet red gain.\nset_green_gain\nSet green gain.\nset_blue_gain\nSet blue gain.\nOverview\nset_red_gain\nset_green_gain\nset_blue_gain"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#import-detail",
        "title": "BalanceModeUserWhite > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#method-detail",
        "title": "BalanceModeUserWhite > Method detail",
        "section": "Method detail",
        "text": "Set red gain.\nRed gain.\nBy default, 1.\nBalanceModeUserWhite.\nSet green gain.\nGreen gain.\nBy default, 1.\nBalanceModeUserWhite.\nSet blue gain.\nBlue gain.\nBy default, 1.\nBalanceModeUserWhite.\nMethod detail\npython:float\n1\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\npython:float\n1\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\npython:float\n1\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#BalanceModeUserWhite.set_red_gain",
        "title": "BalanceModeUserWhite > Method detail > set_red_gain",
        "section": "Method detail > set_red_gain",
        "text": "BalanceModeUserWhite.set_red_gain(value=1)\n\nSet red gain.\n\nParameters\n\nvalue\n\npython:float\n\nRed gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#BalanceModeUserWhite.set_green_gain",
        "title": "BalanceModeUserWhite > Method detail > set_green_gain",
        "section": "Method detail > set_green_gain",
        "text": "BalanceModeUserWhite.set_green_gain(value=1)\n\nSet green gain.\n\nParameters\n\nvalue\n\npython:float\n\nGreen gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeUserWhite.html#BalanceModeUserWhite.set_blue_gain",
        "title": "BalanceModeUserWhite > Method detail > set_blue_gain",
        "section": "Method detail > set_blue_gain",
        "text": "BalanceModeUserWhite.set_blue_gain(value=1)\n\nSet blue gain.\n\nParameters\n\nvalue\n\npython:float\n\nBlue gain.\nBy default, 1.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalanceModeUserWhite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#how-to-create-a-sensor",
        "title": "Examples > How to create a sensor",
        "section": "How to create a sensor",
        "text": "This tutorial demonstrates how to create a sensor.\nThere are different type of sensors available: irradiance sensor, radiance sensor, camera sensor.\nHow to create a sensor"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create a sensor > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#create-a-new-project",
        "title": "Examples > How to create a sensor > Create a new project",
        "section": "Create a new project",
        "text": "The only way to create a sensor, is to create it from a project.\nCreate a new project"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#create",
        "title": "Examples > How to create a sensor > Create",
        "section": "Create",
        "text": "Create locally.\nThe mention “local: “ is added when printing the sensor\nCreate"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#push-it-to-the-server",
        "title": "Examples > How to create a sensor > Push it to the server.",
        "section": "Push it to the server.",
        "text": "Now that it is committed to the server, the mention “local: “ is no more present when printing the sensor.\nPush it to the server."
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#another-example",
        "title": "Examples > How to create a sensor > Another example",
        "section": "Another example",
        "text": "Set more characteristics.\nCamera feature is created with the same default values as the GUI speos.\nIf the user would like to modify the camera characteristics, it is possible to do so as below.\nAnother example"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#read",
        "title": "Examples > How to create a sensor > Read",
        "section": "Read",
        "text": "Read"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#sensor-instance",
        "title": "Examples > How to create a sensor > Sensor Instance",
        "section": "Sensor Instance",
        "text": "A mention “local: “ is added if it is not yet committed to the server\nSensor Instance"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#project",
        "title": "Examples > How to create a sensor > Project",
        "section": "Project",
        "text": "Committed feature will appear in the project.\nProject"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#update",
        "title": "Examples > How to create a sensor > Update",
        "section": "Update",
        "text": "Tipp: if you are manipulating a source already committed, don’t forget to commit your changes.\nIf you don’t, you will still only watch what is committed on the server.\nUpdate"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#reset",
        "title": "Examples > How to create a sensor > Reset",
        "section": "Reset",
        "text": "Possibility to reset local values from the one available in the server.\nReset"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#delete",
        "title": "Examples > How to create a sensor > Delete",
        "section": "Delete",
        "text": "Once the data is deleted from the server, you can still work with local data and maybe commit later.\nDelete"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#other-sensors",
        "title": "Examples > How to create a sensor > Other sensors",
        "section": "Other sensors",
        "text": "Other sensors"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#irradiance-sensor",
        "title": "Examples > How to create a sensor > Irradiance sensor",
        "section": "Irradiance sensor",
        "text": "Irradiance sensor"
    },
    {
        "objectID": "examples/core/sensor",
        "href": "examples/core/sensor.html#radiance-sensor",
        "title": "Examples > How to create a sensor > radiance sensor",
        "section": "radiance sensor",
        "text": "radiance sensor"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/index",
        "href": "api/ansys/speos/core/kernel/scene/index.html#the-scenepy-module",
        "title": "The scene.py module",
        "section": "The scene.py module",
        "text": "The scene.py module\nscene.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/index",
        "href": "api/ansys/speos/core/kernel/scene/index.html#summary",
        "title": "The scene.py module > Summary",
        "section": "Summary",
        "text": "SceneLink\nLink object for a scene in database.\nSceneStub\nDatabase interactions for scenes.\nProtoScene\nScene protobuf class : ansys.api.speos.scene.v2.scene_pb2.Scene\nSummary\nSceneLink\nSceneStub\nProtoScene"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/index",
        "href": "api/ansys/speos/core/kernel/scene/index.html#description",
        "title": "The scene.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/index",
        "href": "api/ansys/speos/core/kernel/scene/index.html#module-detail",
        "title": "The scene.py module > Module detail",
        "section": "Module detail",
        "text": "Scene protobuf class : ansys.api.speos.scene.v2.scene_pb2.Scene\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/index",
        "href": "api/ansys/speos/core/kernel/scene/index.html#scene.ProtoScene",
        "title": "The scene.py module > Module detail > ProtoScene",
        "section": "Module detail > ProtoScene",
        "text": "scene.ProtoScene\n\nScene protobuf class : ansys.api.speos.scene.v2.scene_pb2.Scene\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#sensorradiance",
        "title": "SensorRadiance",
        "section": "SensorRadiance",
        "text": "Bases: BaseSensor\nSensor feature: Radiance.\nBy default, regarding inherent characteristics, a radiance sensor of type photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor and no layer separation is chosen.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nBy default, True.\nproject (SensorRadiance.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\ndefault_values (bool)\nSensorRadiance\nSensorRadiance\nBaseSensor\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance\noptional\nNone\nTrue"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#ansys.speos.core.sensor.SensorRadiance",
        "title": "SensorRadiance > SensorRadiance > SensorRadiance",
        "section": "SensorRadiance > SensorRadiance",
        "text": "class ansys.speos.core.sensor.SensorRadiance(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Radiance.\n\nBy default, regarding inherent characteristics, a radiance sensor of type photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor and no layer separation is chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorRadiance.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#overview",
        "title": "SensorRadiance > Overview",
        "section": "Overview",
        "text": "set_dimensions\nSet the dimensions of the sensor.\nset_type_photometric\nSet type photometric.\nset_type_colorimetric\nSet type colorimetric.\nset_type_radiometric\nSet type radiometric.\nset_type_spectral\nSet type spectral.\nset_focal\nSet the focal value.\nset_integration_angle\nSet the integration angle.\nset_axis_system\nSet position of the sensor.\nset_observer_point\nSet the position of the observer point. This is optional, because the focal length is used by default.\nset_layer_type_none\nDefine layer separation type as None.\nset_layer_type_source\nDefine layer separation as by source.\nset_layer_type_face\nDefine layer separation as by face.\nset_layer_type_sequence\nDefine layer separation as by sequence.\ndimensions\nProperty containing all options in regard to the Dimensions sensor properties.\ntype\nType of sensor.\ncolorimetric\nProperty containing all options in regard to the Colorimetric sensor properties.\nspectral\nProperty containing all options in regard to the Spectral sensor properties.\nlayer\nProperty containing all options in regard to the layer separation property.\nOverview\nset_dimensions\nset_type_photometric\nset_type_colorimetric\nset_type_radiometric\nset_type_spectral\nset_focal\nset_integration_angle\nset_axis_system\nset_observer_point\nset_layer_type_none\nset_layer_type_source\nset_layer_type_face\nset_layer_type_sequence\ndimensions\ntype\ncolorimetric\nspectral\nlayer"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#import-detail",
        "title": "SensorRadiance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#property-detail",
        "title": "SensorRadiance > Property detail",
        "section": "Property detail",
        "text": "Property containing all options in regard to the Dimensions sensor properties.\nInstance of Dimensions Class for this sensor feature\nType of sensor.\nSensor type as string\nProperty containing all options in regard to the Colorimetric sensor properties.\nInstance of Colorimetric Class for this sensor feature\nProperty containing all options in regard to the Spectral sensor properties.\nInstance of Spectral Class for this sensor feature\nProperty containing all options in regard to the layer separation property.\nInstance of Layer type Class for this sensor feature\nProperty detail\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:str\nansys.speos.core.sensor.BaseSensor.Colorimetric\nansys.speos.core.sensor.BaseSensor.Spectral\nUnion\npython:None\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.dimensions",
        "title": "SensorRadiance > Property detail > dimensions",
        "section": "Property detail > dimensions",
        "text": "property SensorRadiance.dimensions: BaseSensor\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nInstance of Dimensions Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.type",
        "title": "SensorRadiance > Property detail > type",
        "section": "Property detail > type",
        "text": "property SensorRadiance.type: str\n\nType of sensor.\n\nReturns\n\npython:str\n\nSensor type as string\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.colorimetric",
        "title": "SensorRadiance > Property detail > colorimetric",
        "section": "Property detail > colorimetric",
        "text": "property SensorRadiance.colorimetric: None | BaseSensor\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nInstance of Colorimetric Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.spectral",
        "title": "SensorRadiance > Property detail > spectral",
        "section": "Property detail > spectral",
        "text": "property SensorRadiance.spectral: None | BaseSensor\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nInstance of Spectral Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.layer",
        "title": "SensorRadiance > Property detail > layer",
        "section": "Property detail > layer",
        "text": "property SensorRadiance.layer: None | BaseSensor | BaseSensor\n\nProperty containing all options in regard to the layer separation property.\n\nReturns\n\nUnion[python:None, ansys.speos.core.sensor.BaseSensor.LayerTypeFace, ansys.speos.core.sensor.BaseSensor.LayerTypeSequence]\n\nInstance of Layer type Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#method-detail",
        "title": "SensorRadiance > Method detail",
        "section": "Method detail",
        "text": "Set the dimensions of the sensor.\nDimension class\nSet type photometric.\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\nRadiance sensor.\nSet type colorimetric.\nThe sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\nColorimetric type.\nSet type radiometric.\nThe sensor considers the entire spectrum and gets the results in W/m2.\nRadiance sensor.\nSet type spectral.\nThe sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\nSpectral type.\nSet the focal value.\nFocal (mm).\nBy default, 250.\nRadiance sensor.\nSet the integration angle.\nintegration angle (degree)\nBy default, 5.\nRadiance sensor.\nSet position of the sensor.\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nRadiance sensor.\nSet the position of the observer point. This is optional, because the focal length is used by default.\nChoosing to set an observer point will make the focal length ignored.\nPosition of the observer point [Ox Oy Oz].\nBy default, None. None means that the focal length is used.\nRadiance sensor.\nDefine layer separation type as None.\nRadiance sensor\nDefine layer separation as by source.\nRadiance sensor\nDefine layer separation as by face.\nLayerTypeFace property instance\nDefine layer separation as by sequence.\nLayerTypeSequence property instance\nMethod detail\nansys.speos.core.sensor.BaseSensor.Dimensions\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.BaseSensor.Colorimetric\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.BaseSensor.Spectral\npython:float\n250\nansys.speos.core.sensor.SensorRadiance\npython:float\n5\nansys.speos.core.sensor.SensorRadiance\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.sensor.SensorRadiance\nList\npython:float\noptional\nNone\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_dimensions",
        "title": "SensorRadiance > Method detail > set_dimensions",
        "section": "Method detail > set_dimensions",
        "text": "SensorRadiance.set_dimensions()\n\nSet the dimensions of the sensor.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimension class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_type_photometric",
        "title": "SensorRadiance > Method detail > set_type_photometric",
        "section": "Method detail > set_type_photometric",
        "text": "SensorRadiance.set_type_photometric()\n\nSet type photometric.\n\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_type_colorimetric",
        "title": "SensorRadiance > Method detail > set_type_colorimetric",
        "section": "Method detail > set_type_colorimetric",
        "text": "SensorRadiance.set_type_colorimetric()\n\nSet type colorimetric.\n\nThe sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nColorimetric type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_type_radiometric",
        "title": "SensorRadiance > Method detail > set_type_radiometric",
        "section": "Method detail > set_type_radiometric",
        "text": "SensorRadiance.set_type_radiometric()\n\nSet type radiometric.\n\nThe sensor considers the entire spectrum and gets the results in W/m2.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_type_spectral",
        "title": "SensorRadiance > Method detail > set_type_spectral",
        "section": "Method detail > set_type_spectral",
        "text": "SensorRadiance.set_type_spectral()\n\nSet type spectral.\n\nThe sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nSpectral type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_focal",
        "title": "SensorRadiance > Method detail > set_focal",
        "section": "Method detail > set_focal",
        "text": "SensorRadiance.set_focal(value=250)\n\nSet the focal value.\n\nParameters\n\nvalue\n\npython:float\n\nFocal (mm).\nBy default, 250.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_integration_angle",
        "title": "SensorRadiance > Method detail > set_integration_angle",
        "section": "Method detail > set_integration_angle",
        "text": "SensorRadiance.set_integration_angle(value=5)\n\nSet the integration angle.\n\nParameters\n\nvalue\n\npython:float\n\nintegration angle (degree)\nBy default, 5.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_axis_system",
        "title": "SensorRadiance > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SensorRadiance.set_axis_system(axis_system=None)\n\nSet position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_observer_point",
        "title": "SensorRadiance > Method detail > set_observer_point",
        "section": "Method detail > set_observer_point",
        "text": "SensorRadiance.set_observer_point(value=None)\n\nSet the position of the observer point. This is optional, because the focal length is used by default.\n\nChoosing to set an observer point will make the focal length ignored.\n\nParameters\n\nvalue\n\nList[python:float], optional\n\nPosition of the observer point [Ox Oy Oz].\nBy default, None. None means that the focal length is used.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_layer_type_none",
        "title": "SensorRadiance > Method detail > set_layer_type_none",
        "section": "Method detail > set_layer_type_none",
        "text": "SensorRadiance.set_layer_type_none()\n\nDefine layer separation type as None.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_layer_type_source",
        "title": "SensorRadiance > Method detail > set_layer_type_source",
        "section": "Method detail > set_layer_type_source",
        "text": "SensorRadiance.set_layer_type_source()\n\nDefine layer separation as by source.\n\nReturns\n\nansys.speos.core.sensor.SensorRadiance\n\nRadiance sensor\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_layer_type_face",
        "title": "SensorRadiance > Method detail > set_layer_type_face",
        "section": "Method detail > set_layer_type_face",
        "text": "SensorRadiance.set_layer_type_face()\n\nDefine layer separation as by face.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace property instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorRadiance",
        "href": "api/ansys/speos/core/sensor/SensorRadiance.html#SensorRadiance.set_layer_type_sequence",
        "title": "SensorRadiance > Method detail > set_layer_type_sequence",
        "section": "Method detail > set_layer_type_sequence",
        "text": "SensorRadiance.set_layer_type_sequence()\n\nDefine layer separation as by sequence.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence property instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/index",
        "href": "api/ansys/speos/core/opt_prop/index.html#the-opt_proppy-module",
        "title": "The opt_prop.py module",
        "section": "The opt_prop.py module",
        "text": "The opt_prop.py module\nopt_prop.py"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/index",
        "href": "api/ansys/speos/core/opt_prop/index.html#summary",
        "title": "The opt_prop.py module > Summary",
        "section": "Summary",
        "text": "OptProp\nSpeos feature: optical property.\nSummary\nOptProp"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/index",
        "href": "api/ansys/speos/core/opt_prop/index.html#description",
        "title": "The opt_prop.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Optical Property.\nDescription"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#how-to-open-result-windows-os",
        "title": "Examples > How to open result (windows os)",
        "section": "How to open result (windows os)",
        "text": "This tutorial demonstrates how to open and review results using workflow method.\nHow to open result (windows os)"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to open result (windows os) > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#create-project-from-speos-file",
        "title": "Examples > How to open result (windows os) > Create project from speos file",
        "section": "Create project from speos file",
        "text": "Create project from speos file"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#retrieve-the-simulation-feature",
        "title": "Examples > How to open result (windows os) > Retrieve the simulation feature",
        "section": "Retrieve the simulation feature",
        "text": "Use find method from project class to retrieve the simulation feature.\nRetrieve the simulation feature"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#run-simulation",
        "title": "Examples > How to open result (windows os) > Run simulation",
        "section": "Run simulation",
        "text": "simulation can be run using CPU via compute_CPU method or using GPU via compute_GPU method.\nRun simulation"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#open-result-only-windows",
        "title": "Examples > How to open result (windows os) > Open result (only windows):",
        "section": "Open result (only windows):",
        "text": "Display one result as image.\nA full path can be given, or the name of the result.\nOpen result (only windows):"
    },
    {
        "objectID": "examples/workflow/open-result",
        "href": "examples/workflow/open-result.html#display-result-in-viewer-only-windows",
        "title": "Examples > How to open result (windows os) > Display result in viewer (only windows).",
        "section": "Display result in viewer (only windows).",
        "text": "Display one result in a result viewer.\nA full path can be given, or the name of the result.\nDisplay result in viewer (only windows)."
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#gaussian",
        "title": "Gaussian",
        "section": "Gaussian",
        "text": "Intensity of type: Gaussian.\nBy default, full width at half maximum following x and y are set at 30 degrees, and total angle at 180 degrees.\nBy default, no axis system is chosen, that means normal to surface map.\nGaussian to complete.\nGaussian properties to complete.\nUses default values when True.\ngaussian (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Gaussian)\ngaussian_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.GaussianProperties)\ndefault_values (bool)\nGaussian\nGaussian\nansys.api.speos.intensity.v1.IntensityTemplate.Gaussian\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.GaussianProperties"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#ansys.speos.core.intensity.Intensity.Gaussian",
        "title": "Gaussian > Gaussian > Gaussian",
        "section": "Gaussian > Gaussian",
        "text": "class ansys.speos.core.intensity.Intensity.Gaussian(gaussian, gaussian_props, default_values=True)\n\nIntensity of type: Gaussian.\n\nBy default, full width at half maximum following x and y are set at 30 degrees, and total angle at 180 degrees.\nBy default, no axis system is chosen, that means normal to surface map.\n\nParameters\n\ngaussian\n\nansys.api.speos.intensity.v1.IntensityTemplate.Gaussian\n\nGaussian to complete.\n\ngaussian_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.GaussianProperties\n\nGaussian properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\ngaussian (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Gaussian)\n\ngaussian_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.GaussianProperties)\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#overview",
        "title": "Gaussian > Overview",
        "section": "Overview",
        "text": "set_FWHM_angle_x\nSet the full width following x at half maximum.\nset_FWHM_angle_y\nSet the full width following y at half maximum.\nset_total_angle\nSet the total angle of the emission of the light source.\nset_axis_system\nSet the intensity distribution orientation.\nOverview\nset_FWHM_angle_x\nset_FWHM_angle_y\nset_total_angle\nset_axis_system"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#import-detail",
        "title": "Gaussian > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#method-detail",
        "title": "Gaussian > Method detail",
        "section": "Method detail",
        "text": "Set the full width following x at half maximum.\nFull Width in degrees following x at Half Maximum.\nBy default, 30.0.\nGaussian intensity.\nSet the full width following y at half maximum.\nFull Width in degrees following y at Half Maximum.\nBy default, 30.0.\nGaussian intensity.\nSet the total angle of the emission of the light source.\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\nGaussian intensity.\nSet the intensity distribution orientation.\nOrientation of the intensity distribution [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, None : normal to surface map.\nGaussian intensity.\nMethod detail\npython:float\n30.0\nansys.speos.core.intensity.Intensity.Gaussian\npython:float\n30.0\nansys.speos.core.intensity.Intensity.Gaussian\npython:float\n180.0\nansys.speos.core.intensity.Intensity.Gaussian\nList\npython:float\noptional\nNone\nansys.speos.core.intensity.Intensity.Gaussian"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#Gaussian.set_FWHM_angle_x",
        "title": "Gaussian > Method detail > set_FWHM_angle_x",
        "section": "Method detail > set_FWHM_angle_x",
        "text": "Gaussian.set_FWHM_angle_x(value=30)\n\nSet the full width following x at half maximum.\n\nParameters\n\nvalue\n\npython:float\n\nFull Width in degrees following x at Half Maximum.\nBy default, 30.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#Gaussian.set_FWHM_angle_y",
        "title": "Gaussian > Method detail > set_FWHM_angle_y",
        "section": "Method detail > set_FWHM_angle_y",
        "text": "Gaussian.set_FWHM_angle_y(value=30)\n\nSet the full width following y at half maximum.\n\nParameters\n\nvalue\n\npython:float\n\nFull Width in degrees following y at Half Maximum.\nBy default, 30.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#Gaussian.set_total_angle",
        "title": "Gaussian > Method detail > set_total_angle",
        "section": "Method detail > set_total_angle",
        "text": "Gaussian.set_total_angle(value=180)\n\nSet the total angle of the emission of the light source.\n\nParameters\n\nvalue\n\npython:float\n\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Gaussian",
        "href": "api/ansys/speos/core/intensity/Intensity.Gaussian.html#Gaussian.set_axis_system",
        "title": "Gaussian > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "Gaussian.set_axis_system(axis_system=None)\n\nSet the intensity distribution orientation.\n\nParameters\n\naxis_system\n\nList[python:float], optional\n\nOrientation of the intensity distribution [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, None : normal to surface map.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#sensortemplatelink",
        "title": "SensorTemplateLink",
        "section": "SensorTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for sensor template in database.\nDatabase to link to.\nKey of the sensor template in the database.\nkey (str)\nSensorTemplateLink\nSensorTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.sensor_template.SensorTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#ansys.speos.core.kernel.sensor_template.SensorTemplateLink",
        "title": "SensorTemplateLink > SensorTemplateLink > SensorTemplateLink",
        "section": "SensorTemplateLink > SensorTemplateLink",
        "text": "class ansys.speos.core.kernel.sensor_template.SensorTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for sensor template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.sensor_template.SensorTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the sensor template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.sensor_template import ProtoSensorTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> ssr_t_db = speos.client.sensor_templates()\n>>> ssr_t_message = ProtoSensorTemplate(name=\"Irradiance\")\n>>> ssr_t_message.irradiance_sensor_template.sensor_type_photometric.SetInParent()\n>>> ssr_t_message.irradiance_sensor_template.illuminance_type_planar.SetInParent()\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_start = -50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_end = 50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.x_sampling = 100\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_start = -50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_end = 50\n>>> ssr_t_message.irradiance_sensor_template.dimensions.y_sampling = 100\n>>> ssr_t_link = ssr_t_db.create(message=ssr_t_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#overview",
        "title": "SensorTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the sensor template.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#import-detail",
        "title": "SensorTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#method-detail",
        "title": "SensorTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the sensor template.\nGet the datamodel from database.\nSensor template datamodel.\nChange datamodel in database.\nNew sensor template datamodel.\nRemove datamodel from database.\nMethod detail\nsensor_template.SensorTemplate\nsensor_template.SensorTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#SensorTemplateLink.__str__",
        "title": "SensorTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SensorTemplateLink.__str__()\n\nReturn the string representation of the sensor template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#SensorTemplateLink.get",
        "title": "SensorTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SensorTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsensor_template.SensorTemplate\n\nSensor template datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#SensorTemplateLink.set",
        "title": "SensorTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SensorTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsensor_template.SensorTemplate\n\nNew sensor template datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateLink.html#SensorTemplateLink.delete",
        "title": "SensorTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SensorTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/index",
        "href": "api/ansys/speos/core/kernel/face/index.html#the-facepy-module",
        "title": "The face.py module",
        "section": "The face.py module",
        "text": "The face.py module\nface.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/index",
        "href": "api/ansys/speos/core/kernel/face/index.html#summary",
        "title": "The face.py module > Summary",
        "section": "Summary",
        "text": "FaceLink\nLink object for job in database.\nFaceStub\nDatabase interactions for face.\nProtoFace\nFace protobuf class : ansys.api.speos.part.v1.face_pb2.Face\nSummary\nFaceLink\nFaceStub\nProtoFace"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/index",
        "href": "api/ansys/speos/core/kernel/face/index.html#description",
        "title": "The face.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/index",
        "href": "api/ansys/speos/core/kernel/face/index.html#module-detail",
        "title": "The face.py module > Module detail",
        "section": "Module detail",
        "text": "Face protobuf class : ansys.api.speos.part.v1.face_pb2.Face\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/index",
        "href": "api/ansys/speos/core/kernel/face/index.html#face.ProtoFace",
        "title": "The face.py module > Module detail > ProtoFace",
        "section": "Module detail > ProtoFace",
        "text": "face.ProtoFace\n\nFace protobuf class : ansys.api.speos.part.v1.face_pb2.Face\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#sensorcamera",
        "title": "SensorCamera",
        "section": "SensorCamera",
        "text": "Bases: BaseSensor\nSensor feature: Camera.\nBy default, regarding inherent characteristics, a camera with mode photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor, and no layer separation is chosen.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nBy default, True.\nproject (SensorCamera.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\ndefault_values (bool)\nSensorCamera\nSensorCamera\nBaseSensor\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance\noptional\nNone\nTrue"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#ansys.speos.core.sensor.SensorCamera",
        "title": "SensorCamera > SensorCamera > SensorCamera",
        "section": "SensorCamera > SensorCamera",
        "text": "class ansys.speos.core.sensor.SensorCamera(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Camera.\n\nBy default, regarding inherent characteristics, a camera with mode photometric is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor, and no layer separation is chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorCamera.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#overview",
        "title": "SensorCamera > Overview",
        "section": "Overview",
        "text": "set_focal_length\nSet the focal length.\nset_imager_distance\nSet the imager distance.\nset_f_number\nSet the f number.\nset_distortion_file_uri\nSet the distortion file.\nset_horz_pixel\nSet the horizontal pixels number corresponding to the camera resolution.\nset_vert_pixel\nSet the vertical pixels number corresponding to the camera resolution.\nset_width\nSet the width of the sensor.\nset_height\nSet the height of the sensor.\nset_mode_geometric\nSet mode geometric for the camera sensor.\nset_mode_photometric\nSet mode photometric for the camera sensor.\nset_axis_system\nSet the position of the sensor.\nphotometric\nProperty containing the instance of Camera.Photometric used to build the sensor.\nOverview\nset_focal_length\nset_imager_distance\nset_f_number\nset_distortion_file_uri\nset_horz_pixel\nset_vert_pixel\nset_width\nset_height\nset_mode_geometric\nset_mode_photometric\nset_axis_system\nphotometric"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#import-detail",
        "title": "SensorCamera > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#property-detail",
        "title": "SensorCamera > Property detail",
        "section": "Property detail",
        "text": "Property containing the instance of Camera.Photometric used to build the sensor.\nPhotometric class instance if it exists\nProperty detail\nUnion\nansys.speos.core.sensor.SensorCamera.Photometric\npython:None"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.photometric",
        "title": "SensorCamera > Property detail > photometric",
        "section": "Property detail > photometric",
        "text": "property SensorCamera.photometric: SensorCamera | None\n\nProperty containing the instance of Camera.Photometric used to build the sensor.\n\nReturns\n\nUnion[ansys.speos.core.sensor.SensorCamera.Photometric, python:None]\n\nPhotometric class instance if it exists\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#method-detail",
        "title": "SensorCamera > Method detail",
        "section": "Method detail",
        "text": "Set the focal length.\nDistance between the center of the optical system and the focus. (mm)\nBy default, 5.0.\nCamera feature\nSet the imager distance.\nImager distance (mm). The imager is located at the focal point. The Imager distance has no impact on the result.\nBy default, 10.\nCamera feature\nSet the f number.\nF-number represents the aperture of the front lens. F number has no impact on the result.\nBy default, 20.\nCamera feature\nSet the distortion file.\nOptical aberration that deforms and bends straight lines. The distortion is expressed in a .OPTDistortion file.\nCamera feature\nSet the horizontal pixels number corresponding to the camera resolution.\nThe horizontal pixels number corresponding to the camera resolution.\nBy default, 640.\nCamera feature\nSet the vertical pixels number corresponding to the camera resolution.\nThe vertical pixels number corresponding to the camera resolution.\nBy default, 480.\nCamera feature\nSet the width of the sensor.\nSensor’s width (mm).\nBy default, 5.0.\nCamera feature\nSet the height of the sensor.\nSensor’s height (mm).\nBy default, 5.0.\nCamera feature\nSet mode geometric for the camera sensor.\nThis is a simplified version of the Camera Sensor.\nGeometric Camera feature\nSet mode photometric for the camera sensor.\nThis allows setting every Camera Sensor parameter, including the photometric definition parameters.\nPhotometric Camera Sensor feature\nSet the position of the sensor.\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nCamera Sensor feature\nMethod detail\npython:float\n5.0\nansys.speos.core.sensor.SensorCamera\npython:float\n10\nansys.speos.core.sensor.SensorCamera\npython:float\n20\nansys.speos.core.sensor.SensorCamera\npython:str\nansys.speos.core.sensor.SensorCamera\npython:int\n640\nansys.speos.core.sensor.SensorCamera\npython:int\n480\nansys.speos.core.sensor.SensorCamera\npython:float\n5.0\nansys.speos.core.sensor.SensorCamera\npython:float\n5.0\nansys.speos.core.sensor.SensorCamera\nansys.speos.core.sensor.SensorCamera\nansys.speos.core.sensor.SensorCamera.Photometric\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.sensor.SensorCamera"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_focal_length",
        "title": "SensorCamera > Method detail > set_focal_length",
        "section": "Method detail > set_focal_length",
        "text": "SensorCamera.set_focal_length(value=5.0)\n\nSet the focal length.\n\nParameters\n\nvalue\n\npython:float\n\nDistance between the center of the optical system and the focus. (mm)\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_imager_distance",
        "title": "SensorCamera > Method detail > set_imager_distance",
        "section": "Method detail > set_imager_distance",
        "text": "SensorCamera.set_imager_distance(value=10)\n\nSet the imager distance.\n\nParameters\n\nvalue\n\npython:float\n\nImager distance (mm). The imager is located at the focal point. The Imager distance has no impact on the result.\nBy default, 10.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_f_number",
        "title": "SensorCamera > Method detail > set_f_number",
        "section": "Method detail > set_f_number",
        "text": "SensorCamera.set_f_number(value=20)\n\nSet the f number.\n\nParameters\n\nvalue\n\npython:float\n\nF-number represents the aperture of the front lens. F number has no impact on the result.\nBy default, 20.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_distortion_file_uri",
        "title": "SensorCamera > Method detail > set_distortion_file_uri",
        "section": "Method detail > set_distortion_file_uri",
        "text": "SensorCamera.set_distortion_file_uri(uri)\n\nSet the distortion file.\n\nParameters\n\nuri\n\npython:str\n\nOptical aberration that deforms and bends straight lines. The distortion is expressed in a .OPTDistortion file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_horz_pixel",
        "title": "SensorCamera > Method detail > set_horz_pixel",
        "section": "Method detail > set_horz_pixel",
        "text": "SensorCamera.set_horz_pixel(value=640)\n\nSet the horizontal pixels number corresponding to the camera resolution.\n\nParameters\n\nvalue\n\npython:int\n\nThe horizontal pixels number corresponding to the camera resolution.\nBy default, 640.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_vert_pixel",
        "title": "SensorCamera > Method detail > set_vert_pixel",
        "section": "Method detail > set_vert_pixel",
        "text": "SensorCamera.set_vert_pixel(value=480)\n\nSet the vertical pixels number corresponding to the camera resolution.\n\nParameters\n\nvalue\n\npython:int\n\nThe vertical pixels number corresponding to the camera resolution.\nBy default, 480.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_width",
        "title": "SensorCamera > Method detail > set_width",
        "section": "Method detail > set_width",
        "text": "SensorCamera.set_width(value=5.0)\n\nSet the width of the sensor.\n\nParameters\n\nvalue\n\npython:float\n\nSensor’s width (mm).\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_height",
        "title": "SensorCamera > Method detail > set_height",
        "section": "Method detail > set_height",
        "text": "SensorCamera.set_height(value=5.0)\n\nSet the height of the sensor.\n\nParameters\n\nvalue\n\npython:float\n\nSensor’s height (mm).\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_mode_geometric",
        "title": "SensorCamera > Method detail > set_mode_geometric",
        "section": "Method detail > set_mode_geometric",
        "text": "SensorCamera.set_mode_geometric()\n\nSet mode geometric for the camera sensor.\n\nThis is a simplified version of the Camera Sensor.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nGeometric Camera feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_mode_photometric",
        "title": "SensorCamera > Method detail > set_mode_photometric",
        "section": "Method detail > set_mode_photometric",
        "text": "SensorCamera.set_mode_photometric()\n\nSet mode photometric for the camera sensor.\n\nThis allows setting every Camera Sensor parameter, including the photometric definition parameters.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric Camera Sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#SensorCamera.set_axis_system",
        "title": "SensorCamera > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SensorCamera.set_axis_system(axis_system=None)\n\nSet the position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorCamera\n\nCamera Sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera",
        "href": "api/ansys/speos/core/sensor/SensorCamera.html#classes",
        "title": "SensorCamera > Classes",
        "section": "Classes",
        "text": "Photometric\nMode of camera sensor : Photometric.\nClasses\nPhotometric"
    },
    {
        "objectID": "getting_started/local/index",
        "href": "getting_started/local/index.html#launch-a-local-service",
        "title": "Launch a local service",
        "section": "Launch a local service",
        "text": "To launch the service you need to use the following commands:\nGo to Getting started\nLaunch a local service"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#bodystub",
        "title": "BodyStub",
        "section": "BodyStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for body.\nChannel to use for the stub.\nThe best way to get a BodyStub is to retrieve it from SpeosClient via bodies() method.\nLike in the following example:\nBodyStub\nBodyStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#ansys.speos.core.kernel.body.BodyStub",
        "title": "BodyStub > BodyStub > BodyStub",
        "section": "BodyStub > BodyStub",
        "text": "class ansys.speos.core.kernel.body.BodyStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for body.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a BodyStub is to retrieve it from SpeosClient via bodies() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> body_db = speos.client.bodies()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#overview",
        "title": "BodyStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#import-detail",
        "title": "BodyStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#method-detail",
        "title": "BodyStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nbody.Body\nansys.speos.core.kernel.body.BodyLink\nansys.speos.core.kernel.body.BodyLink\nbody.Body\nansys.speos.core.kernel.body.BodyLink\nbody.Body\nansys.speos.core.kernel.body.BodyLink\nList\nansys.speos.core.kernel.body.BodyLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#BodyStub.create",
        "title": "BodyStub > Method detail > create",
        "section": "Method detail > create",
        "text": "BodyStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nbody.Body\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#BodyStub.read",
        "title": "BodyStub > Method detail > read",
        "section": "Method detail > read",
        "text": "BodyStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to read.\n\nReturns\n\nbody.Body\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#BodyStub.update",
        "title": "BodyStub > Method detail > update",
        "section": "Method detail > update",
        "text": "BodyStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to update.\n\ndata\n\nbody.Body\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#BodyStub.delete",
        "title": "BodyStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "BodyStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyStub",
        "href": "api/ansys/speos/core/kernel/body/BodyStub.html#BodyStub.list",
        "title": "BodyStub > Method detail > list",
        "section": "Method detail > list",
        "text": "BodyStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.body.BodyLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#sensorirradiance",
        "title": "SensorIrradiance",
        "section": "SensorIrradiance",
        "text": "Bases: BaseSensor\nSensor feature: Irradiance.\nBy default, regarding inherent characteristics, an irradiance sensor of type photometric and illuminance type planar is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor, no layer separation and no ray file generation\nare chosen.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nBy default, True.\nproject (SensorIrradiance.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\ndefault_values (bool)\nSensorIrradiance\nSensorIrradiance\nBaseSensor\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance\noptional\nNone\nTrue"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#ansys.speos.core.sensor.SensorIrradiance",
        "title": "SensorIrradiance > SensorIrradiance > SensorIrradiance",
        "section": "SensorIrradiance > SensorIrradiance",
        "text": "class ansys.speos.core.sensor.SensorIrradiance(project, name, description='', metadata=None, sensor_instance=None, default_values=True)\n\nBases: BaseSensor\n\nSensor feature: Irradiance.\n\nBy default, regarding inherent characteristics, an irradiance sensor of type photometric and illuminance type planar is chosen.\nBy default, regarding properties, an axis system is selected to position the sensor, no layer separation and no ray file generation\nare chosen.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\nBy default, True.\n\nParameters\n\nproject (SensorIrradiance.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#overview",
        "title": "SensorIrradiance > Overview",
        "section": "Overview",
        "text": "set_dimensions\nSet the dimensions of the sensor.\nset_type_photometric\nSet type photometric.\nset_type_colorimetric\nSet type colorimetric.\nset_type_radiometric\nSet type radiometric.\nset_type_spectral\nSet type spectral.\nset_illuminance_type_planar\nSet illuminance type planar.\nset_illuminance_type_radial\nSet illuminance type radial.\nset_illuminance_type_hemispherical\nSet illuminance type hemispherical.\nset_illuminance_type_cylindrical\nSet illuminance type cylindrical.\nset_illuminance_type_semi_cylindrical\nSet illuminance type semi cylindrical.\nset_axis_system\nSet position of the sensor.\nset_ray_file_type_none\nSet no ray file generation.\nset_ray_file_type_classic\nSet ray file generation without polarization data.\nset_ray_file_type_polarization\nSet ray file generation with the polarization data for each ray.\nset_ray_file_type_tm25\nSet ray file generation: a .tm25ray file with polarization data for each ray.\nset_ray_file_type_tm25_no_polarization\nSet ray file generation: a .tm25ray file without polarization data.\nset_layer_type_none\nDefine layer separation type as None.\nset_layer_type_source\nDefine layer separation as by source.\nset_layer_type_face\nDefine layer separation as by face.\nset_layer_type_sequence\nDefine layer separation as by sequence.\nset_layer_type_polarization\nDefine layer separation as by polarization.\nset_layer_type_incidence_angle\nDefine layer separation as by incidence angle.\nset_output_face_geometries\nSelect output faces for inverse simulation optimization.\ndimensions\nProperty containing all options in regard to the Dimensions sensor properties.\ntype\nType of sensor.\ncolorimetric\nProperty containing all options in regard to the Colorimetric sensor properties.\nspectral\nProperty containing all options in regard to the Spectral sensor properties.\nlayer\nProperty containing all options in regard to the layer separation properties.\nOverview\nset_dimensions\nset_type_photometric\nset_type_colorimetric\nset_type_radiometric\nset_type_spectral\nset_illuminance_type_planar\nset_illuminance_type_radial\nset_illuminance_type_hemispherical\nset_illuminance_type_cylindrical\nset_illuminance_type_semi_cylindrical\nset_axis_system\nset_ray_file_type_none\nset_ray_file_type_classic\nset_ray_file_type_polarization\nset_ray_file_type_tm25\nset_ray_file_type_tm25_no_polarization\nset_layer_type_none\nset_layer_type_source\nset_layer_type_face\nset_layer_type_sequence\nset_layer_type_polarization\nset_layer_type_incidence_angle\nset_output_face_geometries\ndimensions\ntype\ncolorimetric\nspectral\nlayer"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#import-detail",
        "title": "SensorIrradiance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#property-detail",
        "title": "SensorIrradiance > Property detail",
        "section": "Property detail",
        "text": "Property containing all options in regard to the Dimensions sensor properties.\nInstance of Dimensions Class for this sensor feature\nType of sensor.\nSensor type as string\nProperty containing all options in regard to the Colorimetric sensor properties.\nInstance of Colorimetric Class for this sensor feature\nProperty containing all options in regard to the Spectral sensor properties.\nInstance of Spectral Class for this sensor feature\nProperty containing all options in regard to the layer separation properties.\nInstance of Layertype Class for this sensor feature\nProperty detail\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:str\nUnion\npython:None\nansys.speos.core.sensor.BaseSensor.Colorimetric\nUnion\npython:None\nansys.speos.core.sensor.BaseSensor.Spectral\nUnion\npython:None\nansys.speos.core.sensor.Irradiance\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.dimensions",
        "title": "SensorIrradiance > Property detail > dimensions",
        "section": "Property detail > dimensions",
        "text": "property SensorIrradiance.dimensions: BaseSensor\n\nProperty containing all options in regard to the Dimensions sensor properties.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nInstance of Dimensions Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.type",
        "title": "SensorIrradiance > Property detail > type",
        "section": "Property detail > type",
        "text": "property SensorIrradiance.type: str\n\nType of sensor.\n\nReturns\n\npython:str\n\nSensor type as string\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.colorimetric",
        "title": "SensorIrradiance > Property detail > colorimetric",
        "section": "Property detail > colorimetric",
        "text": "property SensorIrradiance.colorimetric: None | BaseSensor\n\nProperty containing all options in regard to the Colorimetric sensor properties.\n\nReturns\n\nUnion[python:None, ansys.speos.core.sensor.BaseSensor.Colorimetric]\n\nInstance of Colorimetric Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.spectral",
        "title": "SensorIrradiance > Property detail > spectral",
        "section": "Property detail > spectral",
        "text": "property SensorIrradiance.spectral: None | BaseSensor\n\nProperty containing all options in regard to the Spectral sensor properties.\n\nReturns\n\nUnion[python:None, ansys.speos.core.sensor.BaseSensor.Spectral]\n\nInstance of Spectral Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.layer",
        "title": "SensorIrradiance > Property detail > layer",
        "section": "Property detail > layer",
        "text": "property SensorIrradiance.layer: None | SensorIrradiance | BaseSensor | BaseSensor | BaseSensor\n\nProperty containing all options in regard to the layer separation properties.\n\nReturns\n\nUnion[            python:None,            ansys.speos.core.sensor.Irradiance,            ansys.speos.core.sensor.BaseSensor.LayerTypeFace,            ansys.speos.core.sensor.BaseSensor.LayerTypeSequence,            ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle        ]\n\nInstance of Layertype Class for this sensor feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#method-detail",
        "title": "SensorIrradiance > Method detail",
        "section": "Method detail",
        "text": "Set the dimensions of the sensor.\nDimension class\nSet type photometric.\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\nIrradiance sensor\nSet type colorimetric.\nThe sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\nColorimetric type.\nSet type radiometric.\nThe sensor considers the entire spectrum and gets the results in W/m2.\nIrradiance sensor.\nSet type spectral.\nThe sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\nSpectral type.\nSet illuminance type planar.\nThe integration is made orthogonally with the sensor plane.\nSensor global integration direction [x,y,z].\nBy default, None. None means that a default direction is chosen (anti-normal of the sensor plane).\nIrradiance sensor.\nSet illuminance type radial.\nIrradiance sensor.\nSet illuminance type hemispherical.\nIrradiance sensor.\nSet illuminance type cylindrical.\nIrradiance sensor.\nSet illuminance type semi cylindrical.\nSensor global integration direction [x,y,z].\nBy default, None. None means that a default direction is chosen (anti-normal of the sensor plane).\nIrradiance sensor.\nSet position of the sensor.\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nIrradiance sensor.\nSet no ray file generation.\nIrradiance sensor.\nSet ray file generation without polarization data.\nIrradiance sensor.\nSet ray file generation with the polarization data for each ray.\nIrradiance sensor.\nSet ray file generation: a .tm25ray file with polarization data for each ray.\nIrradiance sensor.\nSet ray file generation: a .tm25ray file without polarization data.\nIrradiance sensor.\nDefine layer separation type as None.\nirradiance class instance\nDefine layer separation as by source.\nirradiance class instance\nDefine layer separation as by face.\nLayerTypeFace property instance\nDefine layer separation as by sequence.\nLayerTypeSequence property instance\nDefine layer separation as by polarization.\nIrradiance class instance\nDefine layer separation as by incidence angle.\nLayerTypeIncidenceAngle property instance\nSelect output faces for inverse simulation optimization.\nList of geometries that will be considered as output faces.\nBy default, [], ie no output faces.\nIrradiance sensor.\nMethod detail\nansys.speos.core.sensor.BaseSensor.Dimensions\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.BaseSensor.Colorimetric\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.BaseSensor.Spectral\nList\npython:float\noptional\nNone\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nList\npython:float\noptional\nNone\nansys.speos.core.sensor.SensorIrradiance\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\nansys.speos.core.sensor.SensorIrradiance\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle\nList\nansys.speos.core.geo_ref.GeoRef\n[]\nansys.speos.core.sensor.SensorIrradiance"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_dimensions",
        "title": "SensorIrradiance > Method detail > set_dimensions",
        "section": "Method detail > set_dimensions",
        "text": "SensorIrradiance.set_dimensions()\n\nSet the dimensions of the sensor.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimension class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_type_photometric",
        "title": "SensorIrradiance > Method detail > set_type_photometric",
        "section": "Method detail > set_type_photometric",
        "text": "SensorIrradiance.set_type_photometric()\n\nSet type photometric.\n\nThe sensor considers the visible spectrum and gets the results in lm/m2 or lx.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_type_colorimetric",
        "title": "SensorIrradiance > Method detail > set_type_colorimetric",
        "section": "Method detail > set_type_colorimetric",
        "text": "SensorIrradiance.set_type_colorimetric()\n\nSet type colorimetric.\n\nThe sensor will generate color results without any spectral data or layer separation (in lx or W//m2).\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Colorimetric\n\nColorimetric type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_type_radiometric",
        "title": "SensorIrradiance > Method detail > set_type_radiometric",
        "section": "Method detail > set_type_radiometric",
        "text": "SensorIrradiance.set_type_radiometric()\n\nSet type radiometric.\n\nThe sensor considers the entire spectrum and gets the results in W/m2.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_type_spectral",
        "title": "SensorIrradiance > Method detail > set_type_spectral",
        "section": "Method detail > set_type_spectral",
        "text": "SensorIrradiance.set_type_spectral()\n\nSet type spectral.\n\nThe sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Spectral\n\nSpectral type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_illuminance_type_planar",
        "title": "SensorIrradiance > Method detail > set_illuminance_type_planar",
        "section": "Method detail > set_illuminance_type_planar",
        "text": "SensorIrradiance.set_illuminance_type_planar(integration_direction=None)\n\nSet illuminance type planar.\n\nThe integration is made orthogonally with the sensor plane.\n\nParameters\n\nintegration_direction\n\nList[python:float], optional\n\nSensor global integration direction [x,y,z].\nBy default, None. None means that a default direction is chosen (anti-normal of the sensor plane).\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_illuminance_type_radial",
        "title": "SensorIrradiance > Method detail > set_illuminance_type_radial",
        "section": "Method detail > set_illuminance_type_radial",
        "text": "SensorIrradiance.set_illuminance_type_radial()\n\nSet illuminance type radial.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_illuminance_type_hemispherical",
        "title": "SensorIrradiance > Method detail > set_illuminance_type_hemispherical",
        "section": "Method detail > set_illuminance_type_hemispherical",
        "text": "SensorIrradiance.set_illuminance_type_hemispherical()\n\nSet illuminance type hemispherical.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_illuminance_type_cylindrical",
        "title": "SensorIrradiance > Method detail > set_illuminance_type_cylindrical",
        "section": "Method detail > set_illuminance_type_cylindrical",
        "text": "SensorIrradiance.set_illuminance_type_cylindrical()\n\nSet illuminance type cylindrical.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_illuminance_type_semi_cylindrical",
        "title": "SensorIrradiance > Method detail > set_illuminance_type_semi_cylindrical",
        "section": "Method detail > set_illuminance_type_semi_cylindrical",
        "text": "SensorIrradiance.set_illuminance_type_semi_cylindrical(integration_direction=None)\n\nSet illuminance type semi cylindrical.\n\nParameters\n\nintegration_direction\n\nList[python:float], optional\n\nSensor global integration direction [x,y,z].\nBy default, None. None means that a default direction is chosen (anti-normal of the sensor plane).\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_axis_system",
        "title": "SensorIrradiance > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SensorIrradiance.set_axis_system(axis_system=None)\n\nSet position of the sensor.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the sensor [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_ray_file_type_none",
        "title": "SensorIrradiance > Method detail > set_ray_file_type_none",
        "section": "Method detail > set_ray_file_type_none",
        "text": "SensorIrradiance.set_ray_file_type_none()\n\nSet no ray file generation.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_ray_file_type_classic",
        "title": "SensorIrradiance > Method detail > set_ray_file_type_classic",
        "section": "Method detail > set_ray_file_type_classic",
        "text": "SensorIrradiance.set_ray_file_type_classic()\n\nSet ray file generation without polarization data.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_ray_file_type_polarization",
        "title": "SensorIrradiance > Method detail > set_ray_file_type_polarization",
        "section": "Method detail > set_ray_file_type_polarization",
        "text": "SensorIrradiance.set_ray_file_type_polarization()\n\nSet ray file generation with the polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_ray_file_type_tm25",
        "title": "SensorIrradiance > Method detail > set_ray_file_type_tm25",
        "section": "Method detail > set_ray_file_type_tm25",
        "text": "SensorIrradiance.set_ray_file_type_tm25()\n\nSet ray file generation: a .tm25ray file with polarization data for each ray.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_ray_file_type_tm25_no_polarization",
        "title": "SensorIrradiance > Method detail > set_ray_file_type_tm25_no_polarization",
        "section": "Method detail > set_ray_file_type_tm25_no_polarization",
        "text": "SensorIrradiance.set_ray_file_type_tm25_no_polarization()\n\nSet ray file generation: a .tm25ray file without polarization data.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_none",
        "title": "SensorIrradiance > Method detail > set_layer_type_none",
        "section": "Method detail > set_layer_type_none",
        "text": "SensorIrradiance.set_layer_type_none()\n\nDefine layer separation type as None.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nirradiance class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_source",
        "title": "SensorIrradiance > Method detail > set_layer_type_source",
        "section": "Method detail > set_layer_type_source",
        "text": "SensorIrradiance.set_layer_type_source()\n\nDefine layer separation as by source.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nirradiance class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_face",
        "title": "SensorIrradiance > Method detail > set_layer_type_face",
        "section": "Method detail > set_layer_type_face",
        "text": "SensorIrradiance.set_layer_type_face()\n\nDefine layer separation as by face.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeFace\n\nLayerTypeFace property instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_sequence",
        "title": "SensorIrradiance > Method detail > set_layer_type_sequence",
        "section": "Method detail > set_layer_type_sequence",
        "text": "SensorIrradiance.set_layer_type_sequence()\n\nDefine layer separation as by sequence.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeSequence\n\nLayerTypeSequence property instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_polarization",
        "title": "SensorIrradiance > Method detail > set_layer_type_polarization",
        "section": "Method detail > set_layer_type_polarization",
        "text": "SensorIrradiance.set_layer_type_polarization()\n\nDefine layer separation as by polarization.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_layer_type_incidence_angle",
        "title": "SensorIrradiance > Method detail > set_layer_type_incidence_angle",
        "section": "Method detail > set_layer_type_incidence_angle",
        "text": "SensorIrradiance.set_layer_type_incidence_angle()\n\nDefine layer separation as by incidence angle.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle property instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorIrradiance",
        "href": "api/ansys/speos/core/sensor/SensorIrradiance.html#SensorIrradiance.set_output_face_geometries",
        "title": "SensorIrradiance > Method detail > set_output_face_geometries",
        "section": "Method detail > set_output_face_geometries",
        "text": "SensorIrradiance.set_output_face_geometries(geometries=None)\n\nSelect output faces for inverse simulation optimization.\n\nParameters\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nList of geometries that will be considered as output faces.\nBy default, [], ie no output faces.\n\nReturns\n\nansys.speos.core.sensor.SensorIrradiance\n\nIrradiance sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/index",
        "href": "api/ansys/speos/core/kernel/sensor_template/index.html#the-sensor_templatepy-module",
        "title": "The sensor_template.py module",
        "section": "The sensor_template.py module",
        "text": "The sensor_template.py module\nsensor_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/index",
        "href": "api/ansys/speos/core/kernel/sensor_template/index.html#summary",
        "title": "The sensor_template.py module > Summary",
        "section": "Summary",
        "text": "SensorTemplateLink\nLink object for sensor template in database.\nSensorTemplateStub\nDatabase interactions for sensor templates.\nProtoSensorTemplate\nSensorTemplate protobuf class : ansys.api.speos.sensor.v1.sensor_pb2.SensorTemplate\nSummary\nSensorTemplateLink\nSensorTemplateStub\nProtoSensorTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/index",
        "href": "api/ansys/speos/core/kernel/sensor_template/index.html#description",
        "title": "The sensor_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/index",
        "href": "api/ansys/speos/core/kernel/sensor_template/index.html#module-detail",
        "title": "The sensor_template.py module > Module detail",
        "section": "Module detail",
        "text": "SensorTemplate protobuf class : ansys.api.speos.sensor.v1.sensor_pb2.SensorTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/index",
        "href": "api/ansys/speos/core/kernel/sensor_template/index.html#sensor_template.ProtoSensorTemplate",
        "title": "The sensor_template.py module > Module detail > ProtoSensorTemplate",
        "section": "Module detail > ProtoSensorTemplate",
        "text": "sensor_template.ProtoSensorTemplate\n\nSensorTemplate protobuf class : ansys.api.speos.sensor.v1.sensor_pb2.SensorTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/index",
        "href": "api/ansys/speos/core/face/index.html#the-facepy-module",
        "title": "The face.py module",
        "section": "The face.py module",
        "text": "The face.py module\nface.py"
    },
    {
        "objectID": "api/ansys/speos/core/face/index",
        "href": "api/ansys/speos/core/face/index.html#summary",
        "title": "The face.py module > Summary",
        "section": "Summary",
        "text": "Face\nFeature : Face.\nSummary\nFace"
    },
    {
        "objectID": "api/ansys/speos/core/face/index",
        "href": "api/ansys/speos/core/face/index.html#description",
        "title": "The face.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with feature: Face.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#spectrumlink",
        "title": "SpectrumLink",
        "section": "SpectrumLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a spectrum in database.\nDatabase to link to.\nKey of the spectrum in the database.\nkey (str)\nSpectrumLink\nSpectrumLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.spectrum.SpectrumStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#ansys.speos.core.kernel.spectrum.SpectrumLink",
        "title": "SpectrumLink > SpectrumLink > SpectrumLink",
        "section": "SpectrumLink > SpectrumLink",
        "text": "class ansys.speos.core.kernel.spectrum.SpectrumLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a spectrum in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.spectrum.SpectrumStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the spectrum in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.spectrum import ProtoSpectrum\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> spe_db = speos.client.spectrums()\n>>> spe_message = ProtoSpectrum(name=\"Monochromatic_600\")\n>>> spe_message.monochromatic.wavelength = 600\n>>> spe_link = spe_db.create(message=spe_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#overview",
        "title": "SpectrumLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the spectrum.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#import-detail",
        "title": "SpectrumLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#method-detail",
        "title": "SpectrumLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the spectrum.\nGet the datamodel from database.\nSpectrum datamodel.\nChange datamodel in database.\nNew spectrum datamodel.\nRemove datamodel from database.\nMethod detail\nspectrum.Spectrum\nspectrum.Spectrum"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#SpectrumLink.__str__",
        "title": "SpectrumLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SpectrumLink.__str__()\n\nReturn the string representation of the spectrum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#SpectrumLink.get",
        "title": "SpectrumLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SpectrumLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nspectrum.Spectrum\n\nSpectrum datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#SpectrumLink.set",
        "title": "SpectrumLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SpectrumLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nspectrum.Spectrum\n\nNew spectrum datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumLink",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumLink.html#SpectrumLink.delete",
        "title": "SpectrumLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SpectrumLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#basesource",
        "title": "BaseSource",
        "section": "BaseSource",
        "text": "Super Class for all sources.\nProject in which source shall be created.\nName of the source.\nDescription of the source.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSource instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nproject (BaseSource.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\nThis is a Super class, Do not instantiate this class yourself\nBaseSource\nBaseSource\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#ansys.speos.core.source.BaseSource",
        "title": "BaseSource > BaseSource > BaseSource",
        "section": "BaseSource > BaseSource",
        "text": "class ansys.speos.core.source.BaseSource(project, name, description='', metadata=None, source_instance=None)\n\nSuper Class for all sources.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which source shall be created.\n\nname\n\npython:str\n\nName of the source.\n\ndescription\n\npython:str\n\nDescription of the source.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsource_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance, optional\n\nSource instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nParameters\n\nproject (BaseSource.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#overview",
        "title": "BaseSource > Overview",
        "section": "Overview",
        "text": "get\nGet dictionary corresponding to the project - read only.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nsource_template_link\nLink object for the source template in database.\n__str__\nReturn the string representation of the source.\nOverview\nget\ncommit\nreset\ndelete\nsource_template_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#import-detail",
        "title": "BaseSource > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#attribute-detail",
        "title": "BaseSource > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the source template in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.source_template_link",
        "title": "BaseSource > Attribute detail > source_template_link",
        "section": "Attribute detail > source_template_link",
        "text": "BaseSource.source_template_link = None\n\nLink object for the source template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#method-detail",
        "title": "BaseSource > Method detail",
        "section": "Method detail",
        "text": "Get dictionary corresponding to the project - read only.\nReturn the string representation of the source.\nSave feature: send the local data to the speos server database.\nSource feature.\nReset feature: override local data by the one from the speos server database.\nSource feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nSource feature.\nMethod detail\npython:str\npython:dict\nansys.speos.core.source.BaseSource\nansys.speos.core.source.BaseSource\nansys.speos.core.source.BaseSource"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.get",
        "title": "BaseSource > Method detail > get",
        "section": "Method detail > get",
        "text": "BaseSource.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.__str__",
        "title": "BaseSource > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "BaseSource.__str__()\n\nReturn the string representation of the source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.commit",
        "title": "BaseSource > Method detail > commit",
        "section": "Method detail > commit",
        "text": "BaseSource.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.reset",
        "title": "BaseSource > Method detail > reset",
        "section": "Method detail > reset",
        "text": "BaseSource.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/BaseSource",
        "href": "api/ansys/speos/core/source/BaseSource.html#BaseSource.delete",
        "title": "BaseSource > Method detail > delete",
        "section": "Method detail > delete",
        "text": "BaseSource.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.source.BaseSource\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#exitancevariable",
        "title": "ExitanceVariable",
        "section": "ExitanceVariable",
        "text": "Type of surface source existence : existence variable.\nExistence variable to complete.\nExistence variable properties to complete.\nstable_ctr : bool\nVariable to indicate if usage is inside class scope\nexitance_variable (ansys.speos.core.kernel.source_template.ProtoSourceTemplate.Surface.ExitanceVariable)\nexitance_variable_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.SurfaceProperties.ExitanceVariableProperties)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_exitance_variable method available in Source classes.\nExitanceVariable\nExitanceVariable\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface.ExitanceVariable\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.SurfaceProperties.ExitanceVariableProperties"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#ansys.speos.core.source.SourceSurface.ExitanceVariable",
        "title": "ExitanceVariable > ExitanceVariable > ExitanceVariable",
        "section": "ExitanceVariable > ExitanceVariable",
        "text": "class ansys.speos.core.source.SourceSurface.ExitanceVariable(exitance_variable, exitance_variable_props, default_values=True, stable_ctr=False)\n\nType of surface source existence : existence variable.\n\nParameters\n\nexitance_variable\n\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface.ExitanceVariable\n\nExistence variable to complete.\n\nexitance_variable_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.SurfaceProperties.ExitanceVariableProperties\n\nExistence variable properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr : bool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nexitance_variable (ansys.speos.core.kernel.source_template.ProtoSourceTemplate.Surface.ExitanceVariable)\n\nexitance_variable_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.SurfaceProperties.ExitanceVariableProperties)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_exitance_variable method available in Source classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#overview",
        "title": "ExitanceVariable > Overview",
        "section": "Overview",
        "text": "set_xmp_file_uri\nSet existence xmp file.\nset_axis_plane\nSet position of the existence map.\nOverview\nset_xmp_file_uri\nset_axis_plane"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#import-detail",
        "title": "ExitanceVariable > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#method-detail",
        "title": "ExitanceVariable > Method detail",
        "section": "Method detail",
        "text": "Set existence xmp file.\nXMP file describing existence.\nExitanceVariable of surface source.\nSet position of the existence map.\nPosition of the existence map [Ox Oy Oz Xx Xy Xz Yx Yy Yz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0].\nExitanceVariable of surface Source.\nMethod detail\npython:str\nansys.speos.core.source.SourceSurface.ExitanceVariable\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0]\nansys.speos.core.source.SourceSurface.ExitanceVariable"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#ExitanceVariable.set_xmp_file_uri",
        "title": "ExitanceVariable > Method detail > set_xmp_file_uri",
        "section": "Method detail > set_xmp_file_uri",
        "text": "ExitanceVariable.set_xmp_file_uri(uri)\n\nSet existence xmp file.\n\nParameters\n\nuri\n\npython:str\n\nXMP file describing existence.\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable",
        "href": "api/ansys/speos/core/source/SourceSurface.ExitanceVariable.html#ExitanceVariable.set_axis_plane",
        "title": "ExitanceVariable > Method detail > set_axis_plane",
        "section": "Method detail > set_axis_plane",
        "text": "ExitanceVariable.set_axis_plane(axis_plane=None)\n\nSet position of the existence map.\n\nParameters\n\naxis_plane\n\nOptional[List[python:float]]\n\nPosition of the existence map [Ox Oy Oz Xx Xy Xz Yx Yy Yz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0].\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface Source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#how-to-preview-a-light-expert-result",
        "title": "Examples > How to preview a light expert result",
        "section": "How to preview a light expert result",
        "text": "This tutorial demonstrates how to review the light expert simulation result.\nHow to preview a light expert result"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to preview a light expert result > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#create-a-new-project",
        "title": "Examples > How to preview a light expert result > Create a new project",
        "section": "Create a new project",
        "text": "In this example, a project is created via reading a pre-defined .speos file.\nUser can preview the part and mesh information.\nBy providing viz_args to the preview function, project part can be viewed in a semi-transparent way.\nIt can be found there is volume conflict in this project.\nCreate a new project"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#retrieve-the-simulation-feature-and-run",
        "title": "Examples > How to preview a light expert result > Retrieve the simulation feature and run",
        "section": "Retrieve the simulation feature and run",
        "text": "If looking to the simulation report, we will find that we have 40% simulation error\nRetrieve the simulation feature and run"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#create-a-simulation-with-light-expert",
        "title": "Examples > How to preview a light expert result > Create a simulation with light expert",
        "section": "Create a simulation with light expert",
        "text": "We will define an interactive simulation to have a look at the rays in error\nCreate a simulation with light expert"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#preview-the-light-expert-result",
        "title": "Examples > How to preview a light expert result > Preview the light expert result",
        "section": "Preview the light expert result",
        "text": "Here, we will run the simulation and preview the result via LightPathFinder class.\nBy default, the LightPathFinder class will preview all the rays collected in the simulation.\nPreview the light expert result"
    },
    {
        "objectID": "examples/core/lpf-preview",
        "href": "examples/core/lpf-preview.html#preview-the-light-expert-result-with-error-filter",
        "title": "Examples > How to preview a light expert result > Preview the light expert result with error filter",
        "section": "Preview the light expert result with error filter",
        "text": "ray_filter option is provided in the preview function that user can filter the rays to see only rays in error.\nIn this example, error rays are generated due to a volume conflict between two solids.\nPreview the light expert result with error filter"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#spectrumstub",
        "title": "SpectrumStub",
        "section": "SpectrumStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for spectrums.\nChannel to use for the stub.\nThe best way to get a SpectrumStub is to retrieve it from SpeosClient via spectrums() method.\nLike in the following example:\nSpectrumStub\nSpectrumStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#ansys.speos.core.kernel.spectrum.SpectrumStub",
        "title": "SpectrumStub > SpectrumStub > SpectrumStub",
        "section": "SpectrumStub > SpectrumStub",
        "text": "class ansys.speos.core.kernel.spectrum.SpectrumStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for spectrums.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SpectrumStub is to retrieve it from SpeosClient via spectrums() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> spe_db = speos.client.spectrums()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#overview",
        "title": "SpectrumStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#import-detail",
        "title": "SpectrumStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#method-detail",
        "title": "SpectrumStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nspectrum.Spectrum\nansys.speos.core.kernel.spectrum.SpectrumLink\nansys.speos.core.kernel.spectrum.SpectrumLink\nspectrum.Spectrum\nansys.speos.core.kernel.spectrum.SpectrumLink\nspectrum.Spectrum\nansys.speos.core.kernel.spectrum.SpectrumLink\nList\nansys.speos.core.kernel.spectrum.SpectrumLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#SpectrumStub.create",
        "title": "SpectrumStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SpectrumStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nspectrum.Spectrum\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#SpectrumStub.read",
        "title": "SpectrumStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SpectrumStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to read.\n\nReturns\n\nspectrum.Spectrum\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#SpectrumStub.update",
        "title": "SpectrumStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SpectrumStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to update.\n\ndata\n\nspectrum.Spectrum\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#SpectrumStub.delete",
        "title": "SpectrumStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SpectrumStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/SpectrumStub",
        "href": "api/ansys/speos/core/kernel/spectrum/SpectrumStub.html#SpectrumStub.list",
        "title": "SpectrumStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SpectrumStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.spectrum.SpectrumLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#subpart",
        "title": "SubPart",
        "section": "SubPart",
        "text": "Feature : SubPart.\nThe Speos instance client.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nPart containing this sub part.\nBy default, None.\nLink object for the part in database.\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\nname (str)\ndescription (str)\nparent_part (Optional[Part])\nSubPart\nSubPart\nansys.speos.core.kernel.client.SpeosClient\npython:str\npython:str\n\"\"\nansys.speos.core.part.Part\noptional\nNone\nansys.speos.core.kernel.part.PartLink"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#ansys.speos.core.part.Part.SubPart",
        "title": "SubPart > SubPart > SubPart",
        "section": "SubPart > SubPart",
        "text": "class ansys.speos.core.part.Part.SubPart(speos_client, name, description='', parent_part=None)\n\nFeature : SubPart.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nparent_part\n\nansys.speos.core.part.Part, optional\n\nPart containing this sub part.\nBy default, None.\n\nAttributes\n\npart_link\n\nansys.speos.core.kernel.part.PartLink\n\nLink object for the part in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nparent_part (Optional[Part])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#overview",
        "title": "SubPart > Overview",
        "section": "Overview",
        "text": "create_body\nCreate a body in this element.\ncreate_sub_part\nCreate a sub part in this element.\nset_axis_system\nSet the sub part orientation (relatively to parent element).\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nfind\nFind feature(s).\npart_link\nLink object for the part in database.\n__str__\nReturn the string representation of the sub part.\nOverview\ncreate_body\ncreate_sub_part\nset_axis_system\ncommit\nreset\ndelete\nfind\npart_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#import-detail",
        "title": "SubPart > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#attribute-detail",
        "title": "SubPart > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the part in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.part_link",
        "title": "SubPart > Attribute detail > part_link",
        "section": "Attribute detail > part_link",
        "text": "SubPart.part_link = None\n\nLink object for the part in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#method-detail",
        "title": "SubPart > Method detail",
        "section": "Method detail",
        "text": "Create a body in this element.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nBody feature.\nCreate a sub part in this element.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nSubPart feature.\nSet the sub part orientation (relatively to parent element).\nOrientation of the sub part [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nSubPart feature.\nReturn the string representation of the sub part.\nSave feature: send the local data to the speos server database.\nSubPart feature.\nReset feature: override local data by the one from the speos server database.\nSubPart feature.\nDelete feature: delete data from the speos server database.\nSubPart feature.\nFind feature(s).\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\nType of the wanted feature (example: ansys.speos.core.body.Body, ansys.speos.core.face.Face,\nansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\nFound features.\nMethod detail\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.body.Body\npython:str\npython:str\n\"\"\nansys.speos.core.part.Part.SubPart\nList\npython:float\noptional\nansys.speos.core.part.Part.SubPart\nansys.speos.core.part.Part.SubPart\nansys.speos.core.part.Part.SubPart\nansys.speos.core.part.Part.SubPart\npython:str\nFalse\ntype\nNone\nList\nUnion\nansys.speos.core.body.Body\nansys.speos.core.face.Face\nansys.speos.core.part.Part.SubPart"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.create_body",
        "title": "SubPart > Method detail > create_body",
        "section": "Method detail > create_body",
        "text": "SubPart.create_body(name, description='', metadata=None)\n\nCreate a body in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.create_sub_part",
        "title": "SubPart > Method detail > create_sub_part",
        "section": "Method detail > create_sub_part",
        "text": "SubPart.create_sub_part(name, description='')\n\nCreate a sub part in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.set_axis_system",
        "title": "SubPart > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SubPart.set_axis_system(axis_system)\n\nSet the sub part orientation (relatively to parent element).\n\nParameters\n\naxis_system\n\nList[python:float], optional\n\nOrientation of the sub part [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.__str__",
        "title": "SubPart > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SubPart.__str__()\n\nReturn the string representation of the sub part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.commit",
        "title": "SubPart > Method detail > commit",
        "section": "Method detail > commit",
        "text": "SubPart.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.reset",
        "title": "SubPart > Method detail > reset",
        "section": "Method detail > reset",
        "text": "SubPart.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.delete",
        "title": "SubPart > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SubPart.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part.SubPart",
        "href": "api/ansys/speos/core/part/Part.SubPart.html#SubPart.find",
        "title": "SubPart > Method detail > find",
        "section": "Method detail > find",
        "text": "SubPart.find(name, name_regex=False, feature_type=None)\n\nFind feature(s).\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.body.Body, ansys.speos.core.face.Face,\nansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[Union[ansys.speos.core.body.Body, ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart]]\n\nFound features.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#launch-a-remote-service",
        "title": "Launch a remote service",
        "section": "Launch a remote service",
        "text": "If a remote server is running Ansys Release 2025 R1 or later and is also running PIM (Product\nInstance Manager), you can use PIM to start a SpeosRPC server Session that PySpeos\ncan connect to.\nA usage example of the remote service can be accessed via AnsysLAB.\nThis option is only available for Ansys employees.\nOnly Ansys employees with credentials to the Artifact Repository Browser\ncan download ZIP files for PIM.\nLaunch a remote service"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#use-pyspeos-launcher",
        "title": "Launch a remote service > Use PySpeos launcher",
        "section": "Use PySpeos launcher",
        "text": "To launch a remote Speos service:\nThe preceding commands launch a remote Speos service (version 2025 R1).\nYou receive a Speos object in return that you then use as a Speos session.\nUse PySpeos launcher\nSpeos"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#end-the-session",
        "title": "Launch a remote service > End the session",
        "section": "End the session",
        "text": "The session can be ended via the object SpeosClient like this:\nThis closes the channel to the Speos service and also shuts down the remote Speos service.\nGo to Getting started\nEnd the session\nSpeosClient"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#overview",
        "title": "Overview",
        "section": "Overview",
        "text": "This section provides an overview of the PySpeos library,\nexplaining its key concepts.\nOverview"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#pyspeos-overview",
        "title": "Overview > PySpeos overview",
        "section": "PySpeos overview",
        "text": "PySpeos is a Python client to communicate with the Ansys SpeosRPC server.\nThe SpeosRPC server is based on gRPC and provides APIs to interact with Speos Solver.\nPlease be aware that the server is intended to work with a single user.\nThe server is under development, so all Speos features are not available yet.\nPySpeos overview"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#why-speosrpc-server",
        "title": "Overview > Why SpeosRPC server?",
        "section": "Why SpeosRPC server?",
        "text": "This allows the user to use the Speos capabilities without starting any CAD.\nThis offers the possibility to manage Speos capabilities with more liberty:\nData preparation\nRunning jobs\nResult post processing\nWhy SpeosRPC server?"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#grpc-usage-advantages",
        "title": "Overview > gRPC usage advantages",
        "section": "gRPC usage advantages",
        "text": "There are several advantages to using gRPC.\nLanguage independency between client and server. This means that the user has a large choice of languages to write the API calls. The user does not have to write the same language as the server.\nOS independency between client and server. The client does not have to run on the same OS as the server. The SpeosRPC server is provided for Linux and Windows.\nThe client and server can run on different machines.\ngRPC usage advantages"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#schema",
        "title": "Overview > Schema",
        "section": "Schema",
        "text": "The schema shows different ways to use Speos capabilities:\nvia CADs / Labs / Viewers GUI\nvia SpeosRPC server APIs\nSchema"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#speos-solver",
        "title": "Overview > Speos Solver",
        "section": "Speos Solver",
        "text": "The Speos Solver represents the intelligence that is used to handle the light simulation.\nSpeos Solver"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#speosrpc-server",
        "title": "Overview > SpeosRPC server",
        "section": "SpeosRPC server",
        "text": "The SpeosRPC server allows to translate the provided gRPC API calls into features understood by the Speos Solver.\nSpeosRPC server"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#pyspeos-layering",
        "title": "Overview > PySpeos layering",
        "section": "PySpeos layering",
        "text": "PySpeos is composed of several code layers, each of them having a different level of complexity and range of capabilities:\ncore\nworkflow\nkernel\nExamples of usage for each layer are available in the Examples section.\nNew users should avoid using kernel layer at a first usage.\nPySpeos layering"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#core",
        "title": "Overview > Core",
        "section": "Core",
        "text": "The Core layer is the entry point of PySpeos.\nIt is designed to be representative of a classic Speos UI usage.\nFor instance, users can create a project (from scratch or from SPEOS file), add/modify/delete sources, sensors, simulations, materials, geometries, and compute simulations.\nCore"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#workflow",
        "title": "Overview > Workflow",
        "section": "Workflow",
        "text": "The Workflow layer offers a list of user workflows combining several actions into simple usage.\nFor instance, users can access a workflow that combines several Speos files into a single project. Another workflow allows users to display a simulation result (on windows environment only).\nWorkflow"
    },
    {
        "objectID": "overview/index",
        "href": "overview/index.html#kernel",
        "title": "Overview > Kernel",
        "section": "Kernel",
        "text": "The Kernel layer offers more flexibility and capabilities than Core and Workflow.\nIt is designed to be a low level wrapper, and is close to the Speos gRPC APIs.\nWith the Kernel layer, users need to understand the notion about Template and Instances. Refer to the SpeosRPC server documentation on the Developer portal, Speos section to get a full understanding.\nThe Kernel layer is recommended for experienced users only.\nKernel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#partstub",
        "title": "PartStub",
        "section": "PartStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for part.\nChannel to use for the stub.\nThe best way to get a PartStub is to retrieve it from SpeosClient via parts() method.\nLike in the following example:\nPartStub\nPartStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#ansys.speos.core.kernel.part.PartStub",
        "title": "PartStub > PartStub > PartStub",
        "section": "PartStub > PartStub",
        "text": "class ansys.speos.core.kernel.part.PartStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for part.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a PartStub is to retrieve it from SpeosClient via parts() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> part_db = speos.client.parts()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#overview",
        "title": "PartStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#import-detail",
        "title": "PartStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#method-detail",
        "title": "PartStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\npart.Part\nansys.speos.core.kernel.part.PartLink\nansys.speos.core.kernel.part.PartLink\npart.Part\nansys.speos.core.kernel.part.PartLink\npart.Part\nansys.speos.core.kernel.part.PartLink\nList\nansys.speos.core.kernel.part.PartLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#PartStub.create",
        "title": "PartStub > Method detail > create",
        "section": "Method detail > create",
        "text": "PartStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\npart.Part\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.part.PartLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#PartStub.read",
        "title": "PartStub > Method detail > read",
        "section": "Method detail > read",
        "text": "PartStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to read.\n\nReturns\n\npart.Part\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#PartStub.update",
        "title": "PartStub > Method detail > update",
        "section": "Method detail > update",
        "text": "PartStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to update.\n\ndata\n\npart.Part\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#PartStub.delete",
        "title": "PartStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "PartStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.part.PartLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartStub",
        "href": "api/ansys/speos/core/kernel/part/PartStub.html#PartStub.list",
        "title": "PartStub > Method detail > list",
        "section": "Method detail > list",
        "text": "PartStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.part.PartLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#prism-example",
        "title": "Examples > Prism example",
        "section": "Prism example",
        "text": "This tutorial demonstrates how to run a prism use case.\nPrism example"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#create-connection-with-speos-rpc-server",
        "title": "Examples > Prism example > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#create-project",
        "title": "Examples > Prism example > Create project",
        "section": "Create project",
        "text": "Load a project from .speos file.\nCreate project"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#preview",
        "title": "Examples > Prism example > Preview.",
        "section": "Preview.",
        "text": "Preview."
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#retrieve-the-simulation-feature-and-open-result",
        "title": "Examples > Prism example > Retrieve the simulation feature and open result",
        "section": "Retrieve the simulation feature and open result",
        "text": "Run the simulation\nUse the open_result_image method to review the result\nRetrieve the simulation feature and open result"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#work-with-sensor",
        "title": "Examples > Prism example > Work with sensor",
        "section": "Work with sensor",
        "text": "Retrieve the sensor feature.\nModify the sensor setting, e.g. set the spectral type, etc.\nWork with sensor"
    },
    {
        "objectID": "examples/core/prism-example",
        "href": "examples/core/prism-example.html#re-run-the-simulation-with-new-sensor-definition",
        "title": "Examples > Prism example > Re-run the simulation with new sensor definition",
        "section": "Re-run the simulation with new sensor definition",
        "text": "Re-run the simulation with new sensor definition"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#basesensor",
        "title": "BaseSensor",
        "section": "BaseSensor",
        "text": "Base class for Sensor.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nLink object for the sensor template in database.\nproject (BaseSensor.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\nThis is a Super class, Do not instantiate this class yourself\nBaseSensor\nBaseSensor\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance\noptional\nNone\nansys.speos.core.kernel.sensor_template.SensorTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#ansys.speos.core.sensor.BaseSensor",
        "title": "BaseSensor > BaseSensor > BaseSensor",
        "section": "BaseSensor > BaseSensor",
        "text": "class ansys.speos.core.sensor.BaseSensor(project, name, description='', metadata=None, sensor_instance=None)\n\nBase class for Sensor.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nsensor_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance, optional\n\nSensor instance to provide if the feature does not has to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nAttributes\n\nsensor_template_link\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object for the sensor template in database.\n\nParameters\n\nproject (BaseSensor.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsensor_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SensorInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#overview",
        "title": "BaseSensor > Overview",
        "section": "Overview",
        "text": "get\nGet dictionary corresponding to the project - read only.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nsensor_template_link\nLink object for the sensor template in database.\n__str__\nReturn the string representation of the sensor.\nOverview\nget\ncommit\nreset\ndelete\nsensor_template_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#import-detail",
        "title": "BaseSensor > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#attribute-detail",
        "title": "BaseSensor > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the sensor template in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.sensor_template_link",
        "title": "BaseSensor > Attribute detail > sensor_template_link",
        "section": "Attribute detail > sensor_template_link",
        "text": "BaseSensor.sensor_template_link = None\n\nLink object for the sensor template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#method-detail",
        "title": "BaseSensor > Method detail",
        "section": "Method detail",
        "text": "Get dictionary corresponding to the project - read only.\nReturn the string representation of the sensor.\nSave feature: send the local data to the speos server database.\nSensor feature.\nReset feature: override local data by the one from the speos server database.\nSensor feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nSensor feature.\nMethod detail\npython:str\npython:dict\nansys.speos.core.sensor.BaseSensor\nansys.speos.core.sensor.BaseSensor\nansys.speos.core.sensor.BaseSensor"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.get",
        "title": "BaseSensor > Method detail > get",
        "section": "Method detail > get",
        "text": "BaseSensor.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.__str__",
        "title": "BaseSensor > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "BaseSensor.__str__()\n\nReturn the string representation of the sensor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.commit",
        "title": "BaseSensor > Method detail > commit",
        "section": "Method detail > commit",
        "text": "BaseSensor.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.reset",
        "title": "BaseSensor > Method detail > reset",
        "section": "Method detail > reset",
        "text": "BaseSensor.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#BaseSensor.delete",
        "title": "BaseSensor > Method detail > delete",
        "section": "Method detail > delete",
        "text": "BaseSensor.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.sensor.BaseSensor\n\nSensor feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor",
        "href": "api/ansys/speos/core/sensor/BaseSensor.html#classes",
        "title": "BaseSensor > Classes",
        "section": "Classes",
        "text": "WavelengthsRange\nRange of wavelengths.\nDimensions\nDimensions of the sensor.\nColorimetric\nType of sensor : Colorimetric.\nSpectral\nType of sensor : Spectral.\nFaceLayer\nLayer composed of name and geometries.\nLayerTypeFace\nType of layer : Face.\nLayerTypeSequence\nType of layer : Sequence.\nLayerTypeIncidenceAngle\nType of layer : IncidenceAngle.\nClasses\nWavelengthsRange\nDimensions\nColorimetric\nSpectral\nFaceLayer\nLayerTypeFace\nLayerTypeSequence\nLayerTypeIncidenceAngle"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#georef",
        "title": "GeoRef",
        "section": "GeoRef",
        "text": "Represent a CAD object.\nname (str)\ndescription (str)\nmetadata (Mapping[str, str])\nGeoRef\nGeoRef"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#ansys.speos.core.geo_ref.GeoRef",
        "title": "GeoRef > GeoRef > GeoRef",
        "section": "GeoRef > GeoRef",
        "text": "class ansys.speos.core.geo_ref.GeoRef(name, description, metadata)\n\nRepresent a CAD object.\n\n!! processed by numpydoc !!\n\nParameters\n\nname (str)\n\ndescription (str)\n\nmetadata (Mapping[str, str])"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#overview",
        "title": "GeoRef > Overview",
        "section": "Overview",
        "text": "to_native_link\nConvert to a native link.\nname\ndescription\nmetadata\nfrom_native_link\nConvert a native link to a GeoRef.\nOverview\nto_native_link\nname\ndescription\nmetadata\nfrom_native_link"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#import-detail",
        "title": "GeoRef > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#attribute-detail",
        "title": "GeoRef > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#GeoRef.name",
        "title": "GeoRef > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "GeoRef.name\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#GeoRef.description",
        "title": "GeoRef > Attribute detail > description",
        "section": "Attribute detail > description",
        "text": "GeoRef.description\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#GeoRef.metadata",
        "title": "GeoRef > Attribute detail > metadata",
        "section": "Attribute detail > metadata",
        "text": "GeoRef.metadata\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#method-detail",
        "title": "GeoRef > Method detail",
        "section": "Method detail",
        "text": "Convert a native link to a GeoRef.\nGeometry path.\nConvert to a native link.\nGeometry path.\nMethod detail\npython:str\nGeoRef\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#GeoRef.from_native_link",
        "title": "GeoRef > Method detail > from_native_link",
        "section": "Method detail > from_native_link",
        "text": "static GeoRef.from_native_link(geopath)\n\nConvert a native link to a GeoRef.\n\nParameters\n\ngeopath\n\npython:str\n\nGeometry path.\n\nReturns\n\nGeoRef\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/GeoRef",
        "href": "api/ansys/speos/core/geo_ref/GeoRef.html#GeoRef.to_native_link",
        "title": "GeoRef > Method detail > to_native_link",
        "section": "Method detail > to_native_link",
        "text": "GeoRef.to_native_link()\n\nConvert to a native link.\n\nReturns\n\npython:str\n\nGeometry path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#the-proto_message_utilspy-module",
        "title": "The proto_message_utils.py module",
        "section": "The proto_message_utils.py module",
        "text": "The proto_message_utils.py module\nproto_message_utils.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#summary",
        "title": "The proto_message_utils.py module > Summary",
        "section": "Summary",
        "text": "protobuf_message_to_str\nConvert a protobuf message to formatted json string.\nprotobuf_message_to_dict\nConvert protobuf message to a formatted json dict.\nSummary\nprotobuf_message_to_str\nprotobuf_message_to_dict"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#description",
        "title": "The proto_message_utils.py module > Description",
        "section": "Description",
        "text": "Module with utility elements for protobuf messages from Speos RPC server.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#module-detail",
        "title": "The proto_message_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Convert a protobuf message to formatted json string.\nProtobuf message.\nPrepend the returned string with protobuf message full name.\nBy default, True.\nprotobuf message formatted to be logged/printed.\nConvert protobuf message to a formatted json dict.\nProtobuf message.\nprotobuf message formatted as dict.\nModule detail\ngoogle.protobuf.message.Message\nTrue\npython:str\ngoogle.protobuf.message.Message\npython:dict"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#proto_message_utils.protobuf_message_to_str",
        "title": "The proto_message_utils.py module > Module detail > protobuf_message_to_str",
        "section": "Module detail > protobuf_message_to_str",
        "text": "proto_message_utils.protobuf_message_to_str(message, with_full_name=True)\n\nConvert a protobuf message to formatted json string.\n\nParameters\n\nmessage\n\ngoogle.protobuf.message.Message\n\nProtobuf message.\n\nwith_full_name\n\nbool\n\nPrepend the returned string with protobuf message full name.\nBy default, True.\n\nReturns\n\npython:str\n\nprotobuf message formatted to be logged/printed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/proto_message_utils/index",
        "href": "api/ansys/speos/core/kernel/proto_message_utils/index.html#proto_message_utils.protobuf_message_to_dict",
        "title": "The proto_message_utils.py module > Module detail > protobuf_message_to_dict",
        "section": "Module detail > protobuf_message_to_dict",
        "text": "proto_message_utils.protobuf_message_to_dict(message)\n\nConvert protobuf message to a formatted json dict.\n\nParameters\n\nmessage\n\ngoogle.protobuf.message.Message\n\nProtobuf message.\n\nReturns\n\npython:dict\n\nprotobuf message formatted as dict.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/kernel/scene-job",
        "href": "examples/kernel/scene-job.html#how-to-use-scene-and-job",
        "title": "Examples > How to use scene and job",
        "section": "How to use scene and job",
        "text": "This tutorial demonstrates how to create a scene, and fill it from a speos file. Then this demonstrates how to create a job from the scene, and run it.\nCreate connection with speos rpc server\nHow to use scene and job"
    },
    {
        "objectID": "examples/kernel/scene-job",
        "href": "examples/kernel/scene-job.html#scene",
        "title": "Examples > How to use scene and job > Scene",
        "section": "Scene",
        "text": "Create an empty scene\nLoad a file to fill the scene\nPrint scene data model\nHere it is possible to see that the scene contains two surface sources, one irradiance sensor.\nScene"
    },
    {
        "objectID": "examples/kernel/scene-job",
        "href": "examples/kernel/scene-job.html#job",
        "title": "Examples > How to use scene and job > Job",
        "section": "Job",
        "text": "Create a job for the first simulation. When loaded from a speos file, there is always only one simulation in the scene.\nStart the job\nVerify state of the job\nWait that the job is finished\nRetrieve results of the job\nTwo results are generated : the result of irradiance sensor: ASSEMBLY1.DS (0).Dom Irradiance Sensor (0).xmp and the simulation report in html\nOnce no more needed: delete the job\nWhen loading a speos file into a scene, this creates many objects (source templates, sensor templates, vop template, sop templates). Then at the end of the example, we just clean all databases\nJob"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#layertypeincidenceangle",
        "title": "LayerTypeIncidenceAngle",
        "section": "LayerTypeIncidenceAngle",
        "text": "Type of layer : IncidenceAngle.\nIncludes in the result one layer per range of incident angles.\nBy default, a sampling of 9 is chosen.\nLayerTypeIncidenceAngle protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nlayer_type_incidence_angle (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeIncidenceAngle)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_layer_type_incidence_angle method available in sensor classes.\nLayerTypeIncidenceAngle\nLayerTypeIncidenceAngle\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeIncidenceAngle"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle",
        "title": "LayerTypeIncidenceAngle > LayerTypeIncidenceAngle > LayerTypeIncidenceAngle",
        "section": "LayerTypeIncidenceAngle > LayerTypeIncidenceAngle",
        "text": "class ansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle(layer_type_incidence_angle, default_values=True, stable_ctr=False)\n\nType of layer : IncidenceAngle.\n\nIncludes in the result one layer per range of incident angles.\nBy default, a sampling of 9 is chosen.\n\nParameters\n\nlayer_type_incidence_angle\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SensorInstance.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nlayer_type_incidence_angle (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.LayerTypeIncidenceAngle)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_layer_type_incidence_angle method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#overview",
        "title": "LayerTypeIncidenceAngle > Overview",
        "section": "Overview",
        "text": "set_sampling\nSet the sampling for incidence angles.\nOverview\nset_sampling"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#import-detail",
        "title": "LayerTypeIncidenceAngle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#method-detail",
        "title": "LayerTypeIncidenceAngle > Method detail",
        "section": "Method detail",
        "text": "Set the sampling for incidence angles.\nSampling for incidence angles.\nBy default, 9.\nLayerTypeIncidenceAngle.\nMethod detail\npython:int\n9\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle",
        "href": "api/ansys/speos/core/sensor/BaseSensor.LayerTypeIncidenceAngle.html#LayerTypeIncidenceAngle.set_sampling",
        "title": "LayerTypeIncidenceAngle > Method detail > set_sampling",
        "section": "Method detail > set_sampling",
        "text": "LayerTypeIncidenceAngle.set_sampling(value=9)\n\nSet the sampling for incidence angles.\n\nParameters\n\nvalue\n\npython:int\n\nSampling for incidence angles.\nBy default, 9.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.LayerTypeIncidenceAngle\n\nLayerTypeIncidenceAngle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#sourcesurface",
        "title": "SourceSurface",
        "section": "SourceSurface",
        "text": "Bases: BaseSource\nType of Source : Surface.\nBy default, a luminous flux and existence constant are chosen. With a monochromatic spectrum,\nand lambertian intensity (cos with N = 1).\nThe Speos instance client.\nName of the source feature.\nSurface source to complete.\nSurface source properties to complete.\nUses default values when True.\nproject (SourceSurface.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\ndefault_values (bool)\nSourceSurface\nSourceSurface\nBaseSource\nansys.speos.core.kernel.client.SpeosClient\npython:str\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.SurfaceProperties"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#ansys.speos.core.source.SourceSurface",
        "title": "SourceSurface > SourceSurface > SourceSurface",
        "section": "SourceSurface > SourceSurface",
        "text": "class ansys.speos.core.source.SourceSurface(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nType of Source : Surface.\n\nBy default, a luminous flux and existence constant are chosen. With a monochromatic spectrum,\nand lambertian intensity (cos with N = 1).\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the source feature.\n\nsurface\n\nansys.api.speos.source.v1.source_pb2.SourceTemplate.Surface\n\nSurface source to complete.\n\nsurface_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.SurfaceProperties\n\nSurface source properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceSurface.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#overview",
        "title": "SourceSurface > Overview",
        "section": "Overview",
        "text": "set_flux_from_intensity_file\nTake flux from intensity file provided.\nset_flux_luminous\nSet luminous flux.\nset_flux_radiant\nSet radiant flux.\nset_flux_luminous_intensity\nSet luminous intensity flux.\nset_intensity\nSet intensity.\nset_exitance_constant\nSet existence constant.\nset_exitance_variable\nSet existence variable, taken from XMP map.\nset_spectrum_from_xmp_file\nTake spectrum from xmp file provided.\nset_spectrum\nSet spectrum of the Source.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nOverview\nset_flux_from_intensity_file\nset_flux_luminous\nset_flux_radiant\nset_flux_luminous_intensity\nset_intensity\nset_exitance_constant\nset_exitance_variable\nset_spectrum_from_xmp_file\nset_spectrum\ncommit\nreset\ndelete"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#import-detail",
        "title": "SourceSurface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#method-detail",
        "title": "SourceSurface > Method detail",
        "section": "Method detail",
        "text": "Take flux from intensity file provided.\nSurface source.\nSet luminous flux.\nLuminous flux in lumens.\nBy default, 683.0.\nSurface source.\nSet radiant flux.\nRadiant flux in watts.\nBy default, 1.0.\nSurface source.\nSet luminous intensity flux.\nLuminous intensity in candelas.\nBy default, 5.0.\nSurface source.\nSet intensity.\nIntensity.\nSet existence constant.\nList of (face, reverseNormal).\nSurface source.\nSet existence variable, taken from XMP map.\nExitanceVariable of surface source.\nTake spectrum from xmp file provided.\nSurface source.\nSet spectrum of the Source.\nSpectrum.\nSave feature: send the local data to the speos server database.\nSource feature.\nReset feature: override local data by the one from the speos server database.\nSource feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nSource feature.\nMethod detail\nansys.speos.core.source.SourceSurface\npython:float\n683.0\nansys.speos.core.source.SourceSurface\npython:float\n1.0\nansys.speos.core.source.SourceSurface\npython:float\n5.0\nansys.speos.core.source.SourceSurface\nansys.speos.core.intensity.Intensity\nList\npython:tuple\nansys.speos.core.geo_ref.GeoRef\nansys.speos.core.source.SourceSurface\nansys.speos.core.source.SourceSurface.ExitanceVariable\nansys.speos.core.source.SourceSurface\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.source.SourceSurface\nansys.speos.core.source.SourceSurface\nansys.speos.core.source.SourceSurface"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_flux_from_intensity_file",
        "title": "SourceSurface > Method detail > set_flux_from_intensity_file",
        "section": "Method detail > set_flux_from_intensity_file",
        "text": "SourceSurface.set_flux_from_intensity_file()\n\nTake flux from intensity file provided.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_flux_luminous",
        "title": "SourceSurface > Method detail > set_flux_luminous",
        "section": "Method detail > set_flux_luminous",
        "text": "SourceSurface.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_flux_radiant",
        "title": "SourceSurface > Method detail > set_flux_radiant",
        "section": "Method detail > set_flux_radiant",
        "text": "SourceSurface.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_flux_luminous_intensity",
        "title": "SourceSurface > Method detail > set_flux_luminous_intensity",
        "section": "Method detail > set_flux_luminous_intensity",
        "text": "SourceSurface.set_flux_luminous_intensity(value=5)\n\nSet luminous intensity flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous intensity in candelas.\nBy default, 5.0.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_intensity",
        "title": "SourceSurface > Method detail > set_intensity",
        "section": "Method detail > set_intensity",
        "text": "SourceSurface.set_intensity()\n\nSet intensity.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_exitance_constant",
        "title": "SourceSurface > Method detail > set_exitance_constant",
        "section": "Method detail > set_exitance_constant",
        "text": "SourceSurface.set_exitance_constant(geometries)\n\nSet existence constant.\n\nParameters\n\ngeometries\n\nList[python:tuple[ansys.speos.core.geo_ref.GeoRef, bool]]\n\nList of (face, reverseNormal).\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_exitance_variable",
        "title": "SourceSurface > Method detail > set_exitance_variable",
        "section": "Method detail > set_exitance_variable",
        "text": "SourceSurface.set_exitance_variable()\n\nSet existence variable, taken from XMP map.\n\nReturns\n\nansys.speos.core.source.SourceSurface.ExitanceVariable\n\nExitanceVariable of surface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_spectrum_from_xmp_file",
        "title": "SourceSurface > Method detail > set_spectrum_from_xmp_file",
        "section": "Method detail > set_spectrum_from_xmp_file",
        "text": "SourceSurface.set_spectrum_from_xmp_file()\n\nTake spectrum from xmp file provided.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSurface source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.set_spectrum",
        "title": "SourceSurface > Method detail > set_spectrum",
        "section": "Method detail > set_spectrum",
        "text": "SourceSurface.set_spectrum()\n\nSet spectrum of the Source.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.commit",
        "title": "SourceSurface > Method detail > commit",
        "section": "Method detail > commit",
        "text": "SourceSurface.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.reset",
        "title": "SourceSurface > Method detail > reset",
        "section": "Method detail > reset",
        "text": "SourceSurface.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#SourceSurface.delete",
        "title": "SourceSurface > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SourceSurface.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.source.SourceSurface\n\nSource feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceSurface",
        "href": "api/ansys/speos/core/source/SourceSurface.html#classes",
        "title": "SourceSurface > Classes",
        "section": "Classes",
        "text": "ExitanceVariable\nType of surface source existence : existence variable.\nClasses\nExitanceVariable"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#partlink",
        "title": "PartLink",
        "section": "PartLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a part in database.\nDatabase to link to.\nKey of the part in the database.\nkey (str)\nPartLink\nPartLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.part.PartStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#ansys.speos.core.kernel.part.PartLink",
        "title": "PartLink > PartLink > PartLink",
        "section": "PartLink > PartLink",
        "text": "class ansys.speos.core.kernel.part.PartLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a part in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.part.PartStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the part in the database.\n\nParameters\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#overview",
        "title": "PartLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the part.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#import-detail",
        "title": "PartLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#method-detail",
        "title": "PartLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the part.\nGet the datamodel from database.\nPart datamodel.\nChange datamodel in database.\nNew part datamodel.\nRemove datamodel from database.\nMethod detail\npart.Part\npart.Part"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#PartLink.__str__",
        "title": "PartLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "PartLink.__str__()\n\nReturn the string representation of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#PartLink.get",
        "title": "PartLink > Method detail > get",
        "section": "Method detail > get",
        "text": "PartLink.get()\n\nGet the datamodel from database.\n\nReturns\n\npart.Part\n\nPart datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#PartLink.set",
        "title": "PartLink > Method detail > set",
        "section": "Method detail > set",
        "text": "PartLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\npart.Part\n\nNew part datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/PartLink",
        "href": "api/ansys/speos/core/kernel/part/PartLink.html#PartLink.delete",
        "title": "PartLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "PartLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#facelayer",
        "title": "FaceLayer",
        "section": "FaceLayer",
        "text": "Layer composed of name and geometries.\nName of the layer.\nList of geometries included in this layer.\nname (str)\ngeometries (List[ansys.speos.core.geo_ref.GeoRef])\nFaceLayer\nFaceLayer\npython:str\nList\nansys.speos.core.geo_ref.GeoRef"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#ansys.speos.core.sensor.BaseSensor.FaceLayer",
        "title": "FaceLayer > FaceLayer > FaceLayer",
        "section": "FaceLayer > FaceLayer",
        "text": "class ansys.speos.core.sensor.BaseSensor.FaceLayer(name, geometries)\n\nLayer composed of name and geometries.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nList of geometries included in this layer.\n\nParameters\n\nname (str)\n\ngeometries (List[ansys.speos.core.geo_ref.GeoRef])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#overview",
        "title": "FaceLayer > Overview",
        "section": "Overview",
        "text": "name\nName of the layer\ngeometries\nList of geometries included in this layer.\nOverview\nname\ngeometries"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#import-detail",
        "title": "FaceLayer > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#attribute-detail",
        "title": "FaceLayer > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the layer\nList of geometries included in this layer.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#FaceLayer.name",
        "title": "FaceLayer > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "FaceLayer.name\n\nName of the layer\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer",
        "href": "api/ansys/speos/core/sensor/BaseSensor.FaceLayer.html#FaceLayer.geometries",
        "title": "FaceLayer > Attribute detail > geometries",
        "section": "Attribute detail > geometries",
        "text": "FaceLayer.geometries\n\nList of geometries included in this layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#basesimulation",
        "title": "BaseSimulation",
        "section": "BaseSimulation",
        "text": "Super Class for all simulations.\nProject in which simulation shall be created.\nName of the simulation.\nDescription of the Simulation.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nproject (BaseSimulation.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\nThis is a Super class, Do not instantiate this class yourself\nBaseSimulation\nBaseSimulation\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#ansys.speos.core.simulation.BaseSimulation",
        "title": "BaseSimulation > BaseSimulation > BaseSimulation",
        "section": "BaseSimulation > BaseSimulation",
        "text": "class ansys.speos.core.simulation.BaseSimulation(project, name, description='', metadata=None, simulation_instance=None)\n\nSuper Class for all simulations.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\nParameters\n\nproject (BaseSimulation.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\nNotes\n\nThis is a Super class, Do not instantiate this class yourself\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#overview",
        "title": "BaseSimulation > Overview",
        "section": "Overview",
        "text": "set_sensor_paths\nSet the sensors that the simulation will take into account.\nset_source_paths\nSet the sources that the simulation will take into account.\ncompute_CPU\nCompute the simulation on CPU.\ncompute_GPU\nCompute the simulation on GPU.\nget\nGet dictionary corresponding to the project - read only.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nsimulation_template_link\nLink object for the simulation template in database.\njob_link\nLink object for the job in database.\nresult_list\nList of results created after a simulation compute.\n__str__\nReturn the string representation of the simulation.\nOverview\nset_sensor_paths\nset_source_paths\ncompute_CPU\ncompute_GPU\nget\ncommit\nreset\ndelete\nsimulation_template_link\njob_link\nresult_list\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#import-detail",
        "title": "BaseSimulation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#attribute-detail",
        "title": "BaseSimulation > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the simulation template in database.\nLink object for the job in database.\nList of results created after a simulation compute.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.simulation_template_link",
        "title": "BaseSimulation > Attribute detail > simulation_template_link",
        "section": "Attribute detail > simulation_template_link",
        "text": "BaseSimulation.simulation_template_link = None\n\nLink object for the simulation template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.job_link",
        "title": "BaseSimulation > Attribute detail > job_link",
        "section": "Attribute detail > job_link",
        "text": "BaseSimulation.job_link = None\n\nLink object for the job in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.result_list",
        "title": "BaseSimulation > Attribute detail > result_list",
        "section": "Attribute detail > result_list",
        "text": "BaseSimulation.result_list = []\n\nList of results created after a simulation compute.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#method-detail",
        "title": "BaseSimulation > Method detail",
        "section": "Method detail",
        "text": "Set the sensors that the simulation will take into account.\nThe sensor paths.\nSimulation feature.\nSet the sources that the simulation will take into account.\nThe source paths.\nSimulation feature.\nCompute the simulation on CPU.\nList of simulation results.\nCompute the simulation on GPU.\nList of simulation results.\nGet dictionary corresponding to the project - read only.\nDictionary of Simulation Feature\nReturn the string representation of the simulation.\nSave feature: send the local data to the speos server database.\nSimulation feature.\nReset feature: override local data by the one from the speos server database.\nSimulation feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nSimulation feature.\nMethod detail\nList\npython:str\nansys.speos.core.simulation.BaseSimulation\nList\npython:str\nansys.speos.core.simulation.BaseSimulation\nList\nansys.api.speos.job.v2.job_pb2.Result\nList\nansys.api.speos.job.v2.job_pb2.Result\npython:str\npython:dict\nansys.speos.core.simulation.BaseSimulation\nansys.speos.core.simulation.BaseSimulation\nansys.speos.core.simulation.BaseSimulation"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.set_sensor_paths",
        "title": "BaseSimulation > Method detail > set_sensor_paths",
        "section": "Method detail > set_sensor_paths",
        "text": "BaseSimulation.set_sensor_paths(sensor_paths)\n\nSet the sensors that the simulation will take into account.\n\nParameters\n\nsensor_paths\n\nList[python:str]\n\nThe sensor paths.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.set_source_paths",
        "title": "BaseSimulation > Method detail > set_source_paths",
        "section": "Method detail > set_source_paths",
        "text": "BaseSimulation.set_source_paths(source_paths)\n\nSet the sources that the simulation will take into account.\n\nParameters\n\nsource_paths\n\nList[python:str]\n\nThe source paths.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.compute_CPU",
        "title": "BaseSimulation > Method detail > compute_CPU",
        "section": "Method detail > compute_CPU",
        "text": "BaseSimulation.compute_CPU()\n\nCompute the simulation on CPU.\n\nReturns\n\nList[ansys.api.speos.job.v2.job_pb2.Result]\n\nList of simulation results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.compute_GPU",
        "title": "BaseSimulation > Method detail > compute_GPU",
        "section": "Method detail > compute_GPU",
        "text": "BaseSimulation.compute_GPU()\n\nCompute the simulation on GPU.\n\nReturns\n\nList[ansys.api.speos.job.v2.job_pb2.Result]\n\nList of simulation results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.get",
        "title": "BaseSimulation > Method detail > get",
        "section": "Method detail > get",
        "text": "BaseSimulation.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\nDictionary of Simulation Feature\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.__str__",
        "title": "BaseSimulation > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "BaseSimulation.__str__()\n\nReturn the string representation of the simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.commit",
        "title": "BaseSimulation > Method detail > commit",
        "section": "Method detail > commit",
        "text": "BaseSimulation.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.reset",
        "title": "BaseSimulation > Method detail > reset",
        "section": "Method detail > reset",
        "text": "BaseSimulation.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#BaseSimulation.delete",
        "title": "BaseSimulation > Method detail > delete",
        "section": "Method detail > delete",
        "text": "BaseSimulation.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation\n\nSimulation feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.html#classes",
        "title": "BaseSimulation > Classes",
        "section": "Classes",
        "text": "Weight\nThe Weight represents the ray energy. In real life, a ray loses some energy (power) when it interacts with an object.\nClasses\nWeight"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/index",
        "href": "api/ansys/speos/core/kernel/simulation_template/index.html#the-simulation_templatepy-module",
        "title": "The simulation_template.py module",
        "section": "The simulation_template.py module",
        "text": "The simulation_template.py module\nsimulation_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/index",
        "href": "api/ansys/speos/core/kernel/simulation_template/index.html#summary",
        "title": "The simulation_template.py module > Summary",
        "section": "Summary",
        "text": "SimulationTemplateLink\nLink object for simulation template in database.\nSimulationTemplateStub\nDatabase interactions for simulation templates.\nProtoSimulationTemplate\nSimulationTemplate protobuf class : ansys.api.speos.simulation.v1.simulation_template_pb2.SimulationTemplate\nSummary\nSimulationTemplateLink\nSimulationTemplateStub\nProtoSimulationTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/index",
        "href": "api/ansys/speos/core/kernel/simulation_template/index.html#description",
        "title": "The simulation_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/index",
        "href": "api/ansys/speos/core/kernel/simulation_template/index.html#module-detail",
        "title": "The simulation_template.py module > Module detail",
        "section": "Module detail",
        "text": "SimulationTemplate protobuf class : ansys.api.speos.simulation.v1.simulation_template_pb2.SimulationTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/index",
        "href": "api/ansys/speos/core/kernel/simulation_template/index.html#simulation_template.ProtoSimulationTemplate",
        "title": "The simulation_template.py module > Module detail > ProtoSimulationTemplate",
        "section": "Module detail > ProtoSimulationTemplate",
        "text": "simulation_template.ProtoSimulationTemplate\n\nSimulationTemplate protobuf class : ansys.api.speos.simulation.v1.simulation_template_pb2.SimulationTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/index",
        "href": "api/ansys/speos/core/simulation/index.html#the-simulationpy-module",
        "title": "The simulation.py module",
        "section": "The simulation.py module",
        "text": "The simulation.py module\nsimulation.py"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/index",
        "href": "api/ansys/speos/core/simulation/index.html#summary",
        "title": "The simulation.py module > Summary",
        "section": "Summary",
        "text": "BaseSimulation\nSuper Class for all simulations.\nSimulationDirect\nType of Simulation: Direct.\nSimulationInverse\nType of simulation : Inverse.\nSimulationInteractive\nType of simulation : Interactive.\nSummary\nBaseSimulation\nSimulationDirect\nSimulationInverse\nSimulationInteractive"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/index",
        "href": "api/ansys/speos/core/simulation/index.html#description",
        "title": "The simulation.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Simulation.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/index",
        "href": "api/ansys/speos/core/kernel/spectrum/index.html#the-spectrumpy-module",
        "title": "The spectrum.py module",
        "section": "The spectrum.py module",
        "text": "The spectrum.py module\nspectrum.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/index",
        "href": "api/ansys/speos/core/kernel/spectrum/index.html#summary",
        "title": "The spectrum.py module > Summary",
        "section": "Summary",
        "text": "SpectrumLink\nLink object for a spectrum in database.\nSpectrumStub\nDatabase interactions for spectrums.\nProtoSpectrum\nSpectrum protobuf class : ansys.api.speos.spectrum.v1.spectrum_pb2.Spectrum\nSummary\nSpectrumLink\nSpectrumStub\nProtoSpectrum"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/index",
        "href": "api/ansys/speos/core/kernel/spectrum/index.html#description",
        "title": "The spectrum.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/index",
        "href": "api/ansys/speos/core/kernel/spectrum/index.html#module-detail",
        "title": "The spectrum.py module > Module detail",
        "section": "Module detail",
        "text": "Spectrum protobuf class : ansys.api.speos.spectrum.v1.spectrum_pb2.Spectrum\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/spectrum/index",
        "href": "api/ansys/speos/core/kernel/spectrum/index.html#spectrum.ProtoSpectrum",
        "title": "The spectrum.py module > Module detail > ProtoSpectrum",
        "section": "Module detail > ProtoSpectrum",
        "text": "spectrum.ProtoSpectrum\n\nSpectrum protobuf class : ansys.api.speos.spectrum.v1.spectrum_pb2.Spectrum\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#linux-docker-container",
        "title": "Linux Docker container",
        "section": "Linux Docker container",
        "text": "Linux Docker container\nDocker for Linux containers\nInstall the Speos service image\nLaunch the Speos service\nEnvironment variables\nDocker for Speos service\nConnect to the Speos service\nLinux Docker container\nContents"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#docker-for-linux-containers",
        "title": "Linux Docker container > Docker for Linux containers",
        "section": "Docker for Linux containers",
        "text": "To run the Linux Docker container for the Speos service, you need to install Docker.\nYou can choose one of the following possibilities:\nInstall Docker Engine (only for Linux environment).\nIn this case, you can interact with docker by command line.\nInstall Docker Desktop. (for all environments).\nIn this case, you can have a GUI and can also interact with docker by command line.\nDocker for Linux containers"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#install-the-speos-service-image",
        "title": "Linux Docker container > Install the Speos service image",
        "section": "Install the Speos service image",
        "text": "The Speos service image can be downloaded from the GitHub Container Registry\nThis option is only available for users who are members of the ansys organization.\nOnce Docker is installed on your machine, follow these steps to download the Linux Docker\ncontainer for the Speos service and install this image.\nUse a GitHub personal access token with permission for reading packages to authorize Docker\nto access this repository. For more information, see Managing your personal access tokens\nin the GitHub documentation.\nSave the token to a file with this command:\nAuthorize Docker to access the repository and run the commands for your OS. To see these commands, click the tab corresponding to your OS.\nInstall the Speos service image"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#launch-the-speos-service",
        "title": "Linux Docker container > Launch the Speos service",
        "section": "Launch the Speos service",
        "text": "Manually launch the Speos service.\nLaunch the Speos service"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#environment-variables",
        "title": "Linux Docker container > Environment variables",
        "section": "Environment variables",
        "text": "The Speos service requires this mandatory environment variable to function properly:\nANSYSLMD_LICENSE_FILE: License server (port and IP address or DNS) the Speos service connects to.\nFor example, 1055@127.0.0.1.\nYou can also specify other optional environment variables:\nSPEOS_LOG_LEVEL: Sets the Speos service logging level. The default is 2, in which case\nthe logging level is INFO.\nHere are some terms to keep in mind:\nhost: Machine that hosts the Speos service. It is typically on localhost.\nBut if you are deploying the service on a remote machine, then the machine’s IP address is expected.\nBy default, PySpeos assumes it is on localhost.\nport: Port that exposes the Speos service on the host machine. Its\nvalue is assumed to be 50098, but users can deploy the service on preferred ports.\nEnvironment variables\nANSYSLMD_LICENSE_FILE\n1055@127.0.0.1\nSPEOS_LOG_LEVEL\n2\nINFO\nlocalhost\nlocalhost\n50098"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#docker-for-speos-service",
        "title": "Linux Docker container > Docker for Speos service",
        "section": "Docker for Speos service",
        "text": "This method allows you to start the Speos service based on predefined environment variables and properties.\nAfterwards, see the next section to understand how to connect to this service instance from PySpeos.\nThe following snippet shows how to run Speos service 2025.1.\nTo use another product version, please modify the image label from 251 to the corresponding product version.\nDocker for Speos service"
    },
    {
        "objectID": "getting_started/docker/linux_container",
        "href": "getting_started/docker/linux_container.html#connect-to-the-speos-service",
        "title": "Linux Docker container > Connect to the Speos service",
        "section": "Connect to the Speos service",
        "text": "After the Speos service is launched, connect to it with these commands:\nBy default, the Speos instance connects to 127.0.0.1 (\"localhost\") on\nport 50098.\nYou can change this by modifying the host and port\nparameters of the Speos object, but note that you must also modify\nyour docker run command by changing the <HOST-PORT>-50098 argument.\nThe following tabs show the commands that set the environment variables and Speos\nfunction.\nGo to Docker containers\nGo to Getting started\nConnect to the Speos service\nSpeos\n127.0.0.1\n\"localhost\"\n50098\nhost\nport\nSpeos\ndocker run\n<HOST-PORT>-50098\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#sourceluminaire",
        "title": "SourceLuminaire",
        "section": "SourceLuminaire",
        "text": "Bases: BaseSource\nLuminaireSource.\nBy default, a flux from intensity file is chosen, with an incandescent spectrum.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nUses default values when True.\nproject (SourceLuminaire.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\ndefault_values (bool)\nSourceLuminaire\nSourceLuminaire\nBaseSource\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#ansys.speos.core.source.SourceLuminaire",
        "title": "SourceLuminaire > SourceLuminaire > SourceLuminaire",
        "section": "SourceLuminaire > SourceLuminaire",
        "text": "class ansys.speos.core.source.SourceLuminaire(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nLuminaireSource.\n\nBy default, a flux from intensity file is chosen, with an incandescent spectrum.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceLuminaire.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#overview",
        "title": "SourceLuminaire > Overview",
        "section": "Overview",
        "text": "set_flux_from_intensity_file\nTake flux from intensity file provided.\nset_flux_luminous\nSet luminous flux.\nset_flux_radiant\nSet radiant flux.\nset_intensity_file_uri\nSet intensity file.\nset_spectrum\nSet spectrum.\nset_axis_system\nSet the position of the source.\nOverview\nset_flux_from_intensity_file\nset_flux_luminous\nset_flux_radiant\nset_intensity_file_uri\nset_spectrum\nset_axis_system"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#import-detail",
        "title": "SourceLuminaire > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#method-detail",
        "title": "SourceLuminaire > Method detail",
        "section": "Method detail",
        "text": "Take flux from intensity file provided.\nLuminaire source.\nSet luminous flux.\nLuminous flux in lumens.\nBy default, 683.0.\nLuminaire source.\nSet radiant flux.\nRadiant flux in watts.\nBy default, 1.0.\nLuminaire source.\nSet intensity file.\nIES or EULUMDAT format file uri.\nLuminaire source.\nSet spectrum.\nSpectrum.\nSet the position of the source.\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nLuminaire source.\nMethod detail\nansys.speos.core.source.SourceLuminaire\npython:float\n683.0\nansys.speos.core.source.SourceLuminaire\npython:float\n1.0\nansys.speos.core.source.SourceLuminaire\npython:str\nansys.speos.core.source.SourceLuminaire\nansys.speos.core.spectrum.Spectrum\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.source.SourceLuminaire"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_flux_from_intensity_file",
        "title": "SourceLuminaire > Method detail > set_flux_from_intensity_file",
        "section": "Method detail > set_flux_from_intensity_file",
        "text": "SourceLuminaire.set_flux_from_intensity_file()\n\nTake flux from intensity file provided.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_flux_luminous",
        "title": "SourceLuminaire > Method detail > set_flux_luminous",
        "section": "Method detail > set_flux_luminous",
        "text": "SourceLuminaire.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_flux_radiant",
        "title": "SourceLuminaire > Method detail > set_flux_radiant",
        "section": "Method detail > set_flux_radiant",
        "text": "SourceLuminaire.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_intensity_file_uri",
        "title": "SourceLuminaire > Method detail > set_intensity_file_uri",
        "section": "Method detail > set_intensity_file_uri",
        "text": "SourceLuminaire.set_intensity_file_uri(uri)\n\nSet intensity file.\n\nParameters\n\nuri\n\npython:str\n\nIES or EULUMDAT format file uri.\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_spectrum",
        "title": "SourceLuminaire > Method detail > set_spectrum",
        "section": "Method detail > set_spectrum",
        "text": "SourceLuminaire.set_spectrum()\n\nSet spectrum.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceLuminaire",
        "href": "api/ansys/speos/core/source/SourceLuminaire.html#SourceLuminaire.set_axis_system",
        "title": "SourceLuminaire > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SourceLuminaire.set_axis_system(axis_system=None)\n\nSet the position of the source.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.source.SourceLuminaire\n\nLuminaire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#intensitytemplatestub",
        "title": "IntensityTemplateStub",
        "section": "IntensityTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for intensity templates.\nChannel to use for the stub.\nThe best way to get a IntensityTemplateStub is to retrieve it from SpeosClient via intensity_templates() method.\nLike in the following example:\nIntensityTemplateStub\nIntensityTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#ansys.speos.core.kernel.intensity_template.IntensityTemplateStub",
        "title": "IntensityTemplateStub > IntensityTemplateStub > IntensityTemplateStub",
        "section": "IntensityTemplateStub > IntensityTemplateStub",
        "text": "class ansys.speos.core.kernel.intensity_template.IntensityTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for intensity templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a IntensityTemplateStub is to retrieve it from SpeosClient via intensity_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> int_t_db = speos.client.intensity_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#overview",
        "title": "IntensityTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#import-detail",
        "title": "IntensityTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#method-detail",
        "title": "IntensityTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nintensity_template.IntensityTemplate\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nintensity_template.IntensityTemplate\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nintensity_template.IntensityTemplate\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nList\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#IntensityTemplateStub.create",
        "title": "IntensityTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "IntensityTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nintensity_template.IntensityTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#IntensityTemplateStub.read",
        "title": "IntensityTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "IntensityTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to read.\n\nReturns\n\nintensity_template.IntensityTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#IntensityTemplateStub.update",
        "title": "IntensityTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "IntensityTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to update.\n\ndata\n\nintensity_template.IntensityTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#IntensityTemplateStub.delete",
        "title": "IntensityTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "IntensityTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateStub.html#IntensityTemplateStub.list",
        "title": "IntensityTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "IntensityTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.intensity_template.IntensityTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#how-to-use-an-objectlink",
        "title": "Examples > How to use an ObjectLink",
        "section": "How to use an ObjectLink",
        "text": "This tutorial demonstrates how to use speos objects in layer core.\nHow to use an ObjectLink"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#what-is-an-objectlink",
        "title": "Examples > How to use an ObjectLink > What is an ObjectLink?",
        "section": "What is an ObjectLink?",
        "text": "The ObjectLink is an object that is created from a protobuf message and then stored in the server database.\nWhat is an ObjectLink?"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#which-speos-objects-are-used-via-objectlink",
        "title": "Examples > How to use an ObjectLink > Which speos objects are used via ObjectLink?",
        "section": "Which speos objects are used via ObjectLink?",
        "text": "Almost all speos objects are used via ObjectLink: like sources, sensors, simulations and more. For this tutorial we will use as example the surface optical property (sop)\nCreate connection with speos rpc server\nWhich speos objects are used via ObjectLink?"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#create-an-objectlink",
        "title": "Examples > How to use an ObjectLink > Create an ObjectLink",
        "section": "Create an ObjectLink",
        "text": "Retrieve the access to the database.\nCreate the protobuf message.\nCreate the ObjectLink (here a SOPTemplateLink).\nCreate another ObjectLink from another protobuf message.\nCreate an ObjectLink"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#modify-an-objectlink",
        "title": "Examples > How to use an ObjectLink > Modify an ObjectLink",
        "section": "Modify an ObjectLink",
        "text": "Retrieve the protobuf message corresponding to the ObjectLink.\nModify data locally\nUpdate on db\nModify an ObjectLink"
    },
    {
        "objectID": "examples/kernel/object-link",
        "href": "examples/kernel/object-link.html#delete-an-objectlink",
        "title": "Examples > How to use an ObjectLink > Delete an ObjectLink",
        "section": "Delete an ObjectLink",
        "text": "This means deleting data in db\nDelete an ObjectLink"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#speos",
        "title": "Speos",
        "section": "Speos",
        "text": "Allows the Speos session (client) to interact with the SpeosRPC server.\nHost where the server is running.\nBy default, DEFAULT_HOST.\nPort number where the server is running.\nBy default, DEFAULT_PORT.\ngRPC channel for server communication.\nBy default, None.\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\nThe logging level to be applied to the client.\nBy default, INFO.\nThe file to output the log, if requested. By default, None.\nhost (str)\nport (Union[str, int])\nchannel (Optional[grpc.Channel])\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\ntimeout (Optional[int])\nlogging_level (Optional[int])\nlogging_file (Optional[Union[pathlib.Path, str]])\nSpeos\nSpeos\npython:str\noptional\nDEFAULT_HOST\nUnion\npython:str\npython:int\noptional\nDEFAULT_PORT\nChannel\noptional\nNone\nansys.platform.instancemanagement.Instance\nSpeosClient.close\nReal\noptional\npython:int\noptional\nINFO\nOptional\npython:str\nPath\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#ansys.speos.core.speos.Speos",
        "title": "Speos > Speos > Speos",
        "section": "Speos > Speos",
        "text": "class ansys.speos.core.speos.Speos(host=DEFAULT_HOST, port=DEFAULT_PORT, channel=None, remote_instance=None, timeout=60, logging_level=logging.INFO, logging_file=None)\n\nAllows the Speos session (client) to interact with the SpeosRPC server.\n\nParameters\n\nhost\n\npython:str, optional\n\nHost where the server is running.\nBy default, DEFAULT_HOST.\n\nport\n\nUnion[python:str, python:int], optional\n\nPort number where the server is running.\nBy default, DEFAULT_PORT.\n\nchannel\n\nChannel, optional\n\ngRPC channel for server communication.\nBy default, None.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance\n\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\n\ntimeout\n\nReal, optional\n\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\n\nlogging_level\n\npython:int, optional\n\nThe logging level to be applied to the client.\nBy default, INFO.\n\nlogging_file\n\nOptional[python:str, Path]\n\nThe file to output the log, if requested. By default, None.\n\nParameters\n\nhost (str)\n\nport (Union[str, int])\n\nchannel (Optional[grpc.Channel])\n\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\n\ntimeout (Optional[int])\n\nlogging_level (Optional[int])\n\nlogging_file (Optional[Union[pathlib.Path, str]])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#overview",
        "title": "Speos > Overview",
        "section": "Overview",
        "text": "client\nThe Speos instance client.\nOverview\nclient\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#import-detail",
        "title": "Speos > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#property-detail",
        "title": "Speos > Property detail",
        "section": "Property detail",
        "text": "The Speos instance client.\nProperty detail\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/speos/Speos",
        "href": "api/ansys/speos/core/speos/Speos.html#Speos.client",
        "title": "Speos > Property detail > client",
        "section": "Property detail > client",
        "text": "property Speos.client: ansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#sourcetemplatestub",
        "title": "SourceTemplateStub",
        "section": "SourceTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for source templates.\nChannel to use for the stub.\nThe best way to get a SourceTemplateStub is to retrieve it from SpeosClient via source_templates() method.\nLike in the following example:\nSourceTemplateStub\nSourceTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#ansys.speos.core.kernel.source_template.SourceTemplateStub",
        "title": "SourceTemplateStub > SourceTemplateStub > SourceTemplateStub",
        "section": "SourceTemplateStub > SourceTemplateStub",
        "text": "class ansys.speos.core.kernel.source_template.SourceTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for source templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SourceTemplateStub is to retrieve it from SpeosClient via source_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> src_t_db = speos.client.source_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#overview",
        "title": "SourceTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#import-detail",
        "title": "SourceTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#method-detail",
        "title": "SourceTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nsource_template.SourceTemplate\nansys.speos.core.kernel.source_template.SourceTemplateLink\nansys.speos.core.kernel.source_template.SourceTemplateLink\nsource_template.SourceTemplate\nansys.speos.core.kernel.source_template.SourceTemplateLink\nsource_template.SourceTemplate\nansys.speos.core.kernel.source_template.SourceTemplateLink\nList\nansys.speos.core.kernel.source_template.SourceTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#SourceTemplateStub.create",
        "title": "SourceTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SourceTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsource_template.SourceTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#SourceTemplateStub.read",
        "title": "SourceTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SourceTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to read.\n\nReturns\n\nsource_template.SourceTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#SourceTemplateStub.update",
        "title": "SourceTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SourceTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to update.\n\ndata\n\nsource_template.SourceTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#SourceTemplateStub.delete",
        "title": "SourceTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SourceTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.source_template.SourceTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateStub.html#SourceTemplateStub.list",
        "title": "SourceTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SourceTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.source_template.SourceTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#speosfileinstance",
        "title": "SpeosFileInstance",
        "section": "SpeosFileInstance",
        "text": "Represents a SPEOS file containing geometries and materials.\nGeometries are placed in the root part of a project, and oriented according to the axis_system argument.\nSPEOS file to be loaded.\nLocation and orientation to define for the geometry of the SPEOS file, [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nName chosen for the imported geometry. This name is used as subpart name under the root part of the project.\nBy default, “” (meaning user has not defined a name), then the name of the SPEOS file without extension is taken.\nNote: Materials are named after the name. For instance name.material.1 representing the first material of the imported geometry.\nspeos_file (str)\naxis_system (Optional[List[float]])\nname (str)\nSpeosFileInstance\nSpeosFileInstance\npython:str\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#ansys.speos.core.workflow.combine_speos.SpeosFileInstance",
        "title": "SpeosFileInstance > SpeosFileInstance > SpeosFileInstance",
        "section": "SpeosFileInstance > SpeosFileInstance",
        "text": "class ansys.speos.core.workflow.combine_speos.SpeosFileInstance(speos_file, axis_system=None, name='')\n\nRepresents a SPEOS file containing geometries and materials.\n\nGeometries are placed in the root part of a project, and oriented according to the axis_system argument.\n\nParameters\n\nspeos_file\n\npython:str\n\nSPEOS file to be loaded.\n\naxis_system\n\nOptional[List[python:float]]\n\nLocation and orientation to define for the geometry of the SPEOS file, [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nname\n\npython:str\n\nName chosen for the imported geometry. This name is used as subpart name under the root part of the project.\nBy default, “” (meaning user has not defined a name), then the name of the SPEOS file without extension is taken.\nNote: Materials are named after the name. For instance name.material.1 representing the first material of the imported geometry.\n\nParameters\n\nspeos_file (str)\n\naxis_system (Optional[List[float]])\n\nname (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#overview",
        "title": "SpeosFileInstance > Overview",
        "section": "Overview",
        "text": "speos_file\nSPEOS file.\naxis_system\nLocation and orientation to define for the geometry of the SPEOS file.\nname\nName for the imported geometry, and used to name the materials.\nOverview\nspeos_file\naxis_system\nname"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#import-detail",
        "title": "SpeosFileInstance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#attribute-detail",
        "title": "SpeosFileInstance > Attribute detail",
        "section": "Attribute detail",
        "text": "SPEOS file.\nLocation and orientation to define for the geometry of the SPEOS file.\nName for the imported geometry, and used to name the materials.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#SpeosFileInstance.speos_file",
        "title": "SpeosFileInstance > Attribute detail > speos_file",
        "section": "Attribute detail > speos_file",
        "text": "SpeosFileInstance.speos_file\n\nSPEOS file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#SpeosFileInstance.axis_system",
        "title": "SpeosFileInstance > Attribute detail > axis_system",
        "section": "Attribute detail > axis_system",
        "text": "SpeosFileInstance.axis_system = None\n\nLocation and orientation to define for the geometry of the SPEOS file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance",
        "href": "api/ansys/speos/core/workflow/combine_speos/SpeosFileInstance.html#SpeosFileInstance.name",
        "title": "SpeosFileInstance > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "SpeosFileInstance.name = ''\n\nName for the imported geometry, and used to name the materials.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/open_result/index",
        "href": "api/ansys/speos/core/workflow/open_result/index.html#the-open_resultpy-module",
        "title": "The open_result.py module",
        "section": "The open_result.py module",
        "text": "The open_result.py module\nopen_result.py"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/open_result/index",
        "href": "api/ansys/speos/core/workflow/open_result/index.html#summary",
        "title": "The open_result.py module > Summary",
        "section": "Summary",
        "text": "open_result_image\nRetrieve an image from a specific simulation result.\nSummary\nopen_result_image"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/open_result/index",
        "href": "api/ansys/speos/core/workflow/open_result/index.html#description",
        "title": "The open_result.py module > Description",
        "section": "Description",
        "text": "Open one of the possible results generated out of the simulation.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/open_result/index",
        "href": "api/ansys/speos/core/workflow/open_result/index.html#module-detail",
        "title": "The open_result.py module > Module detail",
        "section": "Module detail",
        "text": "Retrieve an image from a specific simulation result.\nThe simulation feature.\nThe result name to open as an image.\nModule detail\nansys.speos.core.simulation.Simulation\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/open_result/index",
        "href": "api/ansys/speos/core/workflow/open_result/index.html#open_result.open_result_image",
        "title": "The open_result.py module > Module detail > open_result_image",
        "section": "Module detail > open_result_image",
        "text": "open_result.open_result_image(simulation_feature, result_name)\n\nRetrieve an image from a specific simulation result.\n\nParameters\n\nsimulation_feature\n\nansys.speos.core.simulation.Simulation\n\nThe simulation feature.\n\nresult_name\n\npython:str\n\nThe result name to open as an image.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-speos-core endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#project",
        "title": "Project",
        "section": "Project",
        "text": "A project describes all Speos features (optical properties, sources, sensors, simulations) that user can fill in.\nProject provides functions to create new feature, find a feature.\nIt can be created from empty or loaded from a specific file.\nSpeos session (connected to gRPC server).\nThe project will be loaded from this speos file.\nBy default, \"\", means create from empty.\nLink object for the scene in database.\nspeos (ansys.speos.core.speos.Speos)\npath (str)\nProject\nProject\nansys.speos.core.speos.Speos\npython:str\n\"\"\nansys.speos.core.kernel.scene.SceneLink"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#ansys.speos.core.project.Project",
        "title": "Project > Project > Project",
        "section": "Project > Project",
        "text": "class ansys.speos.core.project.Project(speos, path='')\n\nA project describes all Speos features (optical properties, sources, sensors, simulations) that user can fill in.\n\nProject provides functions to create new feature, find a feature.\nIt can be created from empty or loaded from a specific file.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos session (connected to gRPC server).\n\npath\n\npython:str\n\nThe project will be loaded from this speos file.\nBy default, \"\", means create from empty.\n\nAttributes\n\nscene_link\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object for the scene in database.\n\nParameters\n\nspeos (ansys.speos.core.speos.Speos)\n\npath (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#overview",
        "title": "Project > Overview",
        "section": "Overview",
        "text": "create_optical_property\nCreate a new Optical Property feature.\ncreate_source\nCreate a new Source feature.\ncreate_simulation\nCreate a new Simulation feature.\ncreate_sensor\nCreate a new Sensor feature.\ncreate_root_part\nCreate the project root part feature. If a root part is already created in the project, it is returned.\nfind\nFind feature(s) by name (possibility to use regex) and by feature type.\ndelete\nDelete project: erase scene data.\nget\nGet dictionary corresponding to the project - read only.\nfind_key\nGet values corresponding to the key in project dictionary - read only.\npreview\nPreview cad bodies inside the project’s scene.\nclient\nSpeos instance client.\nscene_link\nLink object for the scene in database.\n__str__\nReturn the string representation of the project’s scene.\nOverview\ncreate_optical_property\ncreate_source\ncreate_simulation\ncreate_sensor\ncreate_root_part\nfind\ndelete\nget\nfind_key\npreview\nclient\nscene_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#import-detail",
        "title": "Project > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#attribute-detail",
        "title": "Project > Attribute detail",
        "section": "Attribute detail",
        "text": "Speos instance client.\nLink object for the scene in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.client",
        "title": "Project > Attribute detail > client",
        "section": "Attribute detail > client",
        "text": "Project.client\n\nSpeos instance client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.scene_link",
        "title": "Project > Attribute detail > scene_link",
        "section": "Attribute detail > scene_link",
        "text": "Project.scene_link\n\nLink object for the scene in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#method-detail",
        "title": "Project > Method detail",
        "section": "Method detail",
        "text": "Create a new Optical Property feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nOptProp feature.\nCreate a new Source feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nSource type to be created.\nBy default, ansys.speos.core.source.SourceSurface.\nAllowed types:\nUnion[ansys.speos.core.source.SourceSurface, ansys.speos.core.source.SourceRayFile,             ansys.speos.core.source.SourceLuminaire].\nMetadata of the feature.\nBy default, {}.\nSource class instance.\nCreate a new Simulation feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nSimulation type to be created.\nBy default, ansys.speos.core.simulation.SimulationDirect.\nAllowed types: Union[ansys.speos.core.simulation.SimulationDirect,             ansys.speos.core.simulation.SimulationInteractive, ansys.speos.core.simulation.SimulationInverse].\nMetadata of the feature.\nBy default, {}.\nSimulation class instance\nCreate a new Sensor feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nSensor type to be created.\nBy default, ansys.speos.core.sensor.SensorIrradiance.\nAllowed types: Union[ansys.speos.core.sensor.SensorCamera, ansys.speos.core.sensor.SensorRadiance,             ansys.speos.core.sensor.SensorIrradiance].\nMetadata of the feature.\nBy default, {}.\nSensor class instance.\nCreate the project root part feature. If a root part is already created in the project, it is returned.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nPart feature.\nFind feature(s) by name (possibility to use regex) and by feature type.\nName of the feature.\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\nType of the wanted features.\nMandatory to fill for geometry features.\nBy default, None, means that all features will be considered (except geometry features).\nFound features.\nHere some examples when looking for a geometry feature:\n(always precise feature_type)\nDelete project: erase scene data.\nDelete all features contained in the project.\nProject feature.\nGet dictionary corresponding to the project - read only.\nGet values corresponding to the key in project dictionary - read only.\nKey to search in the project dictionary.\nList of matching objects containing for each its x_path and its value.\nReturn the string representation of the project’s scene.\nPreview cad bodies inside the project’s scene.\ncontains arguments in dict format passed to add mesh function\ne.g.\n- {‘style’: ‘wireframe’},\n- {‘style’: ‘surface’, ‘color’:’white’},\n- {‘opacity’: 0.7, ‘color’:’white’, ‘show_edges’: False},\nMethod detail\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.opt_prop.OptProp\npython:str\npython:str\n\"\"\nansys.speos.core.source.SourceSurface\nOptional\nMapping\npython:str\npython:str\n{}\nUnion\nansys.speos.core.source.SourceSurface\nansys.speos.core.source.SourceRayFile\nansys.speos.core.source.SourceLuminaire\npython:str\npython:str\n\"\"\nansys.speos.core.simulation.SimulationDirect\nOptional\nMapping\npython:str\npython:str\n{}\nUnion\nansys.speos.core.simulation.SimulationDirect\nansys.speos.core.simulation.SimulationInteractive\nansys.speos.core.simulation.SimulationInverse\npython:str\npython:str\n\"\"\nansys.speos.core.sensor.SensorIrradiance\nOptional\nMapping\npython:str\npython:str\n{}\nUnion\nansys.speos.core.sensor.SensorCamera\nansys.speos.core.sensor.SensorRadiance\nansys.speos.core.sensor.SensorIrradiance\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.part.Part\npython:str\nFalse\ntype\nNone\nList\nUnion\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.source.Surface\nansys.speos.core.source.RayFile\nansys.speos.core.source.Luminaire\nansys.speos.core.sensor.Camera\nansys.speos.core.sensor.Radiance\nansys.speos.core.sensor.Irradiance\nansys.speos.core.simulation.Direct\nansys.speos.core.simulation.Interactive\nansys.speos.core.simulation.Inverse\nansys.speos.core.part.Part\nansys.speos.core.body.Body\nansys.speos.core.face.Face\nansys.speos.core.part.Part.SubPart\nansys.speos.core.project.Project\npython:str\nList\npython:tuple\npython:str\npython:dict\npython:dict"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.create_optical_property",
        "title": "Project > Method detail > create_optical_property",
        "section": "Method detail > create_optical_property",
        "text": "Project.create_optical_property(name, description='', metadata=None)\n\nCreate a new Optical Property feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.create_source",
        "title": "Project > Method detail > create_source",
        "section": "Method detail > create_source",
        "text": "Project.create_source(name, description='', feature_type=SourceSurface, metadata=None)\n\nCreate a new Source feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSource type to be created.\nBy default, ansys.speos.core.source.SourceSurface.\nAllowed types:\nUnion[ansys.speos.core.source.SourceSurface, ansys.speos.core.source.SourceRayFile,             ansys.speos.core.source.SourceLuminaire].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.source.SourceSurface, ansys.speos.core.source.SourceRayFile, ansys.speos.core.source.SourceLuminaire]\n\nSource class instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.create_simulation",
        "title": "Project > Method detail > create_simulation",
        "section": "Method detail > create_simulation",
        "text": "Project.create_simulation(name, description='', feature_type=SimulationDirect, metadata=None)\n\nCreate a new Simulation feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSimulation type to be created.\nBy default, ansys.speos.core.simulation.SimulationDirect.\nAllowed types: Union[ansys.speos.core.simulation.SimulationDirect,             ansys.speos.core.simulation.SimulationInteractive, ansys.speos.core.simulation.SimulationInverse].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.simulation.SimulationDirect, ansys.speos.core.simulation.SimulationInteractive, ansys.speos.core.simulation.SimulationInverse]\n\nSimulation class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.create_sensor",
        "title": "Project > Method detail > create_sensor",
        "section": "Method detail > create_sensor",
        "text": "Project.create_sensor(name, description='', feature_type=SensorIrradiance, metadata=None)\n\nCreate a new Sensor feature.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nfeature_type: type\n\nSensor type to be created.\nBy default, ansys.speos.core.sensor.SensorIrradiance.\nAllowed types: Union[ansys.speos.core.sensor.SensorCamera, ansys.speos.core.sensor.SensorRadiance,             ansys.speos.core.sensor.SensorIrradiance].\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nUnion[ansys.speos.core.sensor.SensorCamera, ansys.speos.core.sensor.SensorRadiance, ansys.speos.core.sensor.SensorIrradiance]\n\nSensor class instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.create_root_part",
        "title": "Project > Method detail > create_root_part",
        "section": "Method detail > create_root_part",
        "text": "Project.create_root_part(description='', metadata=None)\n\nCreate the project root part feature. If a root part is already created in the project, it is returned.\n\nParameters\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.find",
        "title": "Project > Method detail > find",
        "section": "Method detail > find",
        "text": "Project.find(name, name_regex=False, feature_type=None)\n\nFind feature(s) by name (possibility to use regex) and by feature type.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted features.\nMandatory to fill for geometry features.\nBy default, None, means that all features will be considered (except geometry features).\n\nReturns\n\nList[Union[ansys.speos.core.opt_prop.OptProp, ansys.speos.core.source.Surface,         ansys.speos.core.source.RayFile, ansys.speos.core.source.Luminaire, ansys.speos.core.sensor.Camera,         ansys.speos.core.sensor.Radiance, ansys.speos.core.sensor.Irradiance,         ansys.speos.core.simulation.Direct, ansys.speos.core.simulation.Interactive,         ansys.speos.core.simulation.Inverse, ansys.speos.core.part.Part, ansys.speos.core.body.Body,         ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart]]\n\nFound features.\n\nExamples\n\n>>> # From name only\n>>> find(name=\"Camera.1\")\n>>> # Specify feature type\n>>> find(name=\"Camera.1\", feature_type=ansys.speos.core.sensor.SensorCamera)\n>>> # Using regex\n>>> find(name=\"Camera.*\", name_regex=True, feature_type=ansys.speos.core.sensor.SensorCamera)\n\nHere some examples when looking for a geometry feature:\n(always precise feature_type)\n\n>>> # Root part\n>>> find(name=\"\", feature_type=ansys.speos.core.part.Part)\n>>> # Body in root part\n>>> find(name=\"BodyName\", feature_type=ansys.speos.core.body.Body)\n>>> # Face from body in root part\n>>> find(name=\"BodyName/FaceName\", feature_type=ansys.speos.core.face.Face)\n>>> # Sub part in root part\n>>> find(name=\"SubPartName\", feature_type=ansys.speos.core.part.Part.SubPart)\n>>> # Face in a body from sub part in root part :\n>>> find(name=\"SubPartName/BodyName/FaceName\", feature_type=ansys.speos.core.face.Face)\n>>> # Regex can be use at each level separated by \"/\"\n>>> find(name=\"Body.*/Face.*\", name_regex=True, feature_type=ansys.speos.core.face.Face)\n>>> # All faces of a specific body\n>>> find(name=\"BodyName/.*\", name_regex=True, feature_type=ansys.speos.core.face.Face)\n>>> # All geometry features at first level (whatever their type: body, face, sub part)\n>>> find(name=\".*\", name_regex=True, feature_type=ansys.speos.core.part.Part)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.delete",
        "title": "Project > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Project.delete()\n\nDelete project: erase scene data.\n\nDelete all features contained in the project.\n\nReturns\n\nansys.speos.core.project.Project\n\nProject feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.get",
        "title": "Project > Method detail > get",
        "section": "Method detail > get",
        "text": "Project.get()\n\nGet dictionary corresponding to the project - read only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.find_key",
        "title": "Project > Method detail > find_key",
        "section": "Method detail > find_key",
        "text": "Project.find_key(key)\n\nGet values corresponding to the key in project dictionary - read only.\n\nParameters\n\nkey\n\npython:str\n\nKey to search in the project dictionary.\n\nReturns\n\nList[python:tuple[python:str, python:dict]]\n\nList of matching objects containing for each its x_path and its value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.__str__",
        "title": "Project > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Project.__str__()\n\nReturn the string representation of the project’s scene.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/Project",
        "href": "api/ansys/speos/core/project/Project.html#Project.preview",
        "title": "Project > Method detail > preview",
        "section": "Method detail > preview",
        "text": "Project.preview(viz_args=None)\n\nPreview cad bodies inside the project’s scene.\n\nParameters\n\nviz_args\n\npython:dict\n\ncontains arguments in dict format passed to add mesh function\ne.g.\n- {‘style’: ‘wireframe’},\n- {‘style’: ‘surface’, ‘color’:’white’},\n- {‘opacity’: 0.7, ‘color’:’white’, ‘show_edges’: False},\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/index",
        "href": "api/ansys/speos/core/body/index.html#the-bodypy-module",
        "title": "The body.py module",
        "section": "The body.py module",
        "text": "The body.py module\nbody.py"
    },
    {
        "objectID": "api/ansys/speos/core/body/index",
        "href": "api/ansys/speos/core/body/index.html#summary",
        "title": "The body.py module > Summary",
        "section": "Summary",
        "text": "Body\nFeature : Body.\nSummary\nBody"
    },
    {
        "objectID": "api/ansys/speos/core/body/index",
        "href": "api/ansys/speos/core/body/index.html#description",
        "title": "The body.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with feature: Body.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#part",
        "title": "Part",
        "section": "Part",
        "text": "Feature : Part.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nLink object for the part in database.\nproject (Part.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nPart\nPart\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.kernel.part.PartLink"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#ansys.speos.core.part.Part",
        "title": "Part > Part > Part",
        "section": "Part > Part",
        "text": "class ansys.speos.core.part.Part(project, name, description='', metadata=None)\n\nFeature : Part.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nAttributes\n\npart_link\n\nansys.speos.core.kernel.part.PartLink\n\nLink object for the part in database.\n\nParameters\n\nproject (Part.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#overview",
        "title": "Part > Overview",
        "section": "Overview",
        "text": "create_body\nCreate a body in this element.\ncreate_sub_part\nCreate a sub part in this element.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nfind\nFind feature(s).\npart_link\nLink object for the part in database.\n__str__\nReturn the string representation of the part.\nOverview\ncreate_body\ncreate_sub_part\ncommit\nreset\ndelete\nfind\npart_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#import-detail",
        "title": "Part > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#attribute-detail",
        "title": "Part > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the part in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.part_link",
        "title": "Part > Attribute detail > part_link",
        "section": "Attribute detail > part_link",
        "text": "Part.part_link = None\n\nLink object for the part in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#method-detail",
        "title": "Part > Method detail",
        "section": "Method detail",
        "text": "Create a body in this element.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nBody feature.\nCreate a sub part in this element.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nSubPart feature.\nReturn the string representation of the part.\nSave feature: send the local data to the speos server database.\nPart feature.\nReset feature: override local data by the one from the speos server database.\nPart feature.\nDelete feature: delete data from the speos server database.\nPart feature.\nFind feature(s).\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\nType of the wanted feature (example: ansys.speos.core.body.Body, ansys.speos.core.face.Face,\nansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\nFound features.\nMethod detail\npython:str\npython:str\n\"\"\nMapping\npython:str\npython:str\n{}\nansys.speos.core.body.Body\npython:str\npython:str\n\"\"\nansys.speos.core.part.Part.SubPart\nansys.speos.core.part.Part\nansys.speos.core.part.Part\nansys.speos.core.part.Part\npython:str\nFalse\ntype\nNone\nList\nUnion\nansys.speos.core.body.Body\nansys.speos.core.face.Face\nansys.speos.core.part.Part.SubPart"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.create_body",
        "title": "Part > Method detail > create_body",
        "section": "Method detail > create_body",
        "text": "Part.create_body(name, description='', metadata=None)\n\nCreate a body in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.create_sub_part",
        "title": "Part > Method detail > create_sub_part",
        "section": "Method detail > create_sub_part",
        "text": "Part.create_sub_part(name, description='')\n\nCreate a sub part in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nReturns\n\nansys.speos.core.part.Part.SubPart\n\nSubPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.__str__",
        "title": "Part > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Part.__str__()\n\nReturn the string representation of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.commit",
        "title": "Part > Method detail > commit",
        "section": "Method detail > commit",
        "text": "Part.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.reset",
        "title": "Part > Method detail > reset",
        "section": "Method detail > reset",
        "text": "Part.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.delete",
        "title": "Part > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Part.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.part.Part\n\nPart feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#Part.find",
        "title": "Part > Method detail > find",
        "section": "Method detail > find",
        "text": "Part.find(name, name_regex=False, feature_type=None)\n\nFind feature(s).\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nPossibility to look also for bodies, faces, subpart.\nExample “BodyName/FaceName”, “SubPartName/BodyName/FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.body.Body, ansys.speos.core.face.Face,\nansys.speos.core.part.Part.SubPart).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[Union[ansys.speos.core.body.Body, ansys.speos.core.face.Face, ansys.speos.core.part.Part.SubPart]]\n\nFound features.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/Part",
        "href": "api/ansys/speos/core/part/Part.html#classes",
        "title": "Part > Classes",
        "section": "Classes",
        "text": "SubPart\nFeature : SubPart.\nClasses\nSubPart"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PySpeos is a Python client library that gathers functionalities and tools based on\nremote API of Ansys software Speos .\nGetting started\nPySpeos"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "You can use pip to install PySpeos.\nInstallation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#available-modes",
        "title": "Getting started > Available modes",
        "section": "Available modes",
        "text": "This client library works with a Speos service backend. There are several ways of\nrunning this backend, although the preferred and high-performance mode is using Docker\ncontainers. Select the option that best suits your needs.\nLaunch the Speos service as a Docker container\nand connect to it from PySpeos.\nLaunch the Speos service locally on your machine\nand connect to it from PySpeos.\nLaunch the Speos service on a remote machine and\nconnect to it using PIM (Product Instance Manager).\nConnect to an existing Speos service locally or remotely.\nAvailable modes"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#development-installation",
        "title": "Getting started > Development installation",
        "section": "Development installation",
        "text": "In case you want to support the development of PySpeos, install the repository\nin development mode. For more information, refer to the README.\nDevelopment installation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#frequently-asked-questions",
        "title": "Getting started > Frequently asked questions",
        "section": "Frequently asked questions",
        "text": "Any questions? Refer to Q&A before submitting an issue.\nFrequently asked questions"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/index",
        "href": "api/ansys/speos/core/kernel/source_template/index.html#the-source_templatepy-module",
        "title": "The source_template.py module",
        "section": "The source_template.py module",
        "text": "The source_template.py module\nsource_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/index",
        "href": "api/ansys/speos/core/kernel/source_template/index.html#summary",
        "title": "The source_template.py module > Summary",
        "section": "Summary",
        "text": "SourceTemplateLink\nLink object for a source template in database.\nSourceTemplateStub\nDatabase interactions for source templates.\nProtoSourceTemplate\nSourceTemplate protobuf class : ansys.api.speos.source.v1.source_pb2.SourceTemplate\nSummary\nSourceTemplateLink\nSourceTemplateStub\nProtoSourceTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/index",
        "href": "api/ansys/speos/core/kernel/source_template/index.html#description",
        "title": "The source_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/index",
        "href": "api/ansys/speos/core/kernel/source_template/index.html#module-detail",
        "title": "The source_template.py module > Module detail",
        "section": "Module detail",
        "text": "SourceTemplate protobuf class : ansys.api.speos.source.v1.source_pb2.SourceTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/index",
        "href": "api/ansys/speos/core/kernel/source_template/index.html#source_template.ProtoSourceTemplate",
        "title": "The source_template.py module > Module detail > ProtoSourceTemplate",
        "section": "Module detail > ProtoSourceTemplate",
        "text": "source_template.ProtoSourceTemplate\n\nSourceTemplate protobuf class : ansys.api.speos.source.v1.source_pb2.SourceTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#the-combine_speospy-module",
        "title": "The combine_speos.py module",
        "section": "The combine_speos.py module",
        "text": "The combine_speos.py module\ncombine_speos.py"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#summary",
        "title": "The combine_speos.py module > Summary",
        "section": "Summary",
        "text": "SpeosFileInstance\nRepresents a SPEOS file containing geometries and materials.\ninsert_speos\nImport geometries and materials from the selected SPEOS files to the existing project.\ncombine_speos\nCreate a project by combining geometries and materials from the selected SPEOS files.\nSummary\nSpeosFileInstance\ninsert_speos\ncombine_speos"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#description",
        "title": "The combine_speos.py module > Description",
        "section": "Description",
        "text": "Import geometries and materials from several SPEOS files to a project.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#module-detail",
        "title": "The combine_speos.py module > Module detail",
        "section": "Module detail",
        "text": "Import geometries and materials from the selected SPEOS files to the existing project.\nGeometries and materials are placed in the root part, and orientated thanks to the\nSpeosFileInstance object.\nProject in which to import geometries and materials from SPEOS files.\nList of SPEOS files, location and orientation of geometries to be imported to the project.\nSources, Sensors and Simulations are not imported to the project.\nCreate a project by combining geometries and materials from the selected SPEOS files.\nGeometries and materials are placed in the root part, and orientated thanks to the SpeosFileInstance object.\nSpeos session (connected to gRPC server).\nList of SPEOS files, location and orientation of geometries to be imported to the project.\nProject created by combining the input list of SPEOS files.\nSources, Sensors and Simulations are not imported to the project.\nModule detail\nansys.speos.core.project.Project\nList\nansys.speos.core.workflow.combine_speos.SpeosFileInstance\nansys.speos.core.speos.Speos\nList\nansys.speos.core.workflow.combine_speos.SpeosFileInstance\nansys.speos.core.project.Project"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#combine_speos.insert_speos",
        "title": "The combine_speos.py module > Module detail > insert_speos",
        "section": "Module detail > insert_speos",
        "text": "combine_speos.insert_speos(project, speos_to_insert)\n\nImport geometries and materials from the selected SPEOS files to the existing project.\n\nGeometries and materials are placed in the root part, and orientated thanks to the\nSpeosFileInstance object.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which to import geometries and materials from SPEOS files.\n\nspeos_to_combine\n\nList[ansys.speos.core.workflow.combine_speos.SpeosFileInstance]\n\nList of SPEOS files, location and orientation of geometries to be imported to the project.\n\nNotes\n\nSources, Sensors and Simulations are not imported to the project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/combine_speos/index",
        "href": "api/ansys/speos/core/workflow/combine_speos/index.html#combine_speos.combine_speos",
        "title": "The combine_speos.py module > Module detail > combine_speos",
        "section": "Module detail > combine_speos",
        "text": "combine_speos.combine_speos(speos, speos_to_combine)\n\nCreate a project by combining geometries and materials from the selected SPEOS files.\n\nGeometries and materials are placed in the root part, and orientated thanks to the SpeosFileInstance object.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos session (connected to gRPC server).\n\nspeos_to_combine\n\nList[ansys.speos.core.workflow.combine_speos.SpeosFileInstance]\n\nList of SPEOS files, location and orientation of geometries to be imported to the project.\n\nReturns\n\nansys.speos.core.project.Project\n\nProject created by combining the input list of SPEOS files.\n\nNotes\n\nSources, Sensors and Simulations are not imported to the project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the PySpeos project.\nRelease notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#021---march-06-2025",
        "title": "Release notes > 0.2.1 - March 06, 2025",
        "section": "0.2.1 - March 06, 2025",
        "text": "add mandatory token to release-github\n#491\n0.2.1 - March 06, 2025"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#020---march-06-2025",
        "title": "Release notes > 0.2.0 - March 06, 2025",
        "section": "0.2.0 - March 06, 2025",
        "text": "documentation review changes\n#483\nadd missing notebook dependency\n#488\nadd project required info\n#470\nupdate CHANGELOG for v0.1.1\n#473\nupdate organization name\n#486\nremove ignores for PTH\n#474\nRemove ruff ignore for “D”, pydocstyle\n#482\n0.2.0 - March 06, 2025"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#011---2025-02-25",
        "title": "Release notes > 0.1.1 - 2025-02-25",
        "section": "0.1.1 - 2025-02-25",
        "text": "0.1.1 - 2025-02-25"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.1.0 #471\nbump dev version into v0.2.dev0 #472\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#010---2025-02-24",
        "title": "Release notes > 0.1.0 - 2025-02-24",
        "section": "0.1.0 - 2025-02-24",
        "text": "0.1.0 - 2025-02-24"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump the doc-deps group across 1 directory with 4 updates #452\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Documentation review #455\nfix broken inner links #465\nfix make.bat clean call #466\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "missing get method for optical properties #434\nexamples local run path was incorrect #451\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "add new jobs and cleanup workflows #425\ngeneral update/addition of files at project root level #427\nupdate python versions and dependencies #443\nadd nightly workflow #444\nupdate code owners #448\nupdate labeler #456\ncleanup repo #459\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "avoid mutable value as default value in function #436\nupdate architecture #445\nremove docker compose and update doc #449\nuse __getitem__ in SpeosClient #461\nthe core sensor, source, simulation class name #462\nMiscellaneous"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#spectrum",
        "title": "Spectrum",
        "section": "Spectrum",
        "text": "Speos feature : Spectrum.\nBy default, a monochromatic spectrum is created.\nThe Speos instance client.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nCreation from an SpectrumLink key\nLink object for the spectrum in database.\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nkey (str)\nSpectrum\nSpectrum\nansys.speos.core.kernel.client.SpeosClient\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\npython:str\nansys.speos.core.kernel.spectrum.SpectrumLink"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#ansys.speos.core.spectrum.Spectrum",
        "title": "Spectrum > Spectrum > Spectrum",
        "section": "Spectrum > Spectrum",
        "text": "class ansys.speos.core.spectrum.Spectrum(speos_client, name, description='', metadata=None, key='')\n\nSpeos feature : Spectrum.\n\nBy default, a monochromatic spectrum is created.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nkey\n\npython:str\n\nCreation from an SpectrumLink key\n\nAttributes\n\nspectrum_link\n\nansys.speos.core.kernel.spectrum.SpectrumLink\n\nLink object for the spectrum in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#overview",
        "title": "Spectrum > Overview",
        "section": "Overview",
        "text": "set_monochromatic\nSet the spectrum as monochromatic.\nset_blackbody\nSet the spectrum as blackbody.\nset_sampled\nSet the spectrum as sampled.\nset_library\nSet the spectrum as library.\nset_incandescent\nSet the spectrum as incandescent (predefined spectrum).\nset_warmwhitefluorescent\nSet the spectrum as warmwhitefluorescent (predefined spectrum).\nset_daylightfluorescent\nSet the spectrum as daylightfluorescent (predefined spectrum).\nset_whiteLED\nSet the spectrum as whiteLED (predefined spectrum).\nset_halogen\nSet the spectrum as halogen (predefined spectrum).\nset_metalhalide\nSet the spectrum as metalhalide (predefined spectrum).\nset_highpressuresodium\nSet the spectrum as highpressuresodium (predefined spectrum).\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nspectrum_link\nLink object for the spectrum in database.\n__str__\nReturn the string representation of the spectrum.\nOverview\nset_monochromatic\nset_blackbody\nset_sampled\nset_library\nset_incandescent\nset_warmwhitefluorescent\nset_daylightfluorescent\nset_whiteLED\nset_halogen\nset_metalhalide\nset_highpressuresodium\ncommit\nreset\ndelete\nspectrum_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#import-detail",
        "title": "Spectrum > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#attribute-detail",
        "title": "Spectrum > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the spectrum in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.spectrum_link",
        "title": "Spectrum > Attribute detail > spectrum_link",
        "section": "Attribute detail > spectrum_link",
        "text": "Spectrum.spectrum_link = None\n\nLink object for the spectrum in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#method-detail",
        "title": "Spectrum > Method detail",
        "section": "Method detail",
        "text": "Set the spectrum as monochromatic.\nWavelength of the spectrum, in nm.\nBy default, 555.0.\nSpectrum feature.\nSet the spectrum as blackbody.\nTemperature of the blackbody, in K.\nBy default, 2856.\nSpectrum feature.\nSet the spectrum as sampled.\nList of wavelengths, in nm\nList of values, expected from 0. to 100. in %\nSpectrum feature.\nSet the spectrum as library.\nuri of the spectrum file.\nSpectrum feature.\nSet the spectrum as incandescent (predefined spectrum).\nSpectrum feature.\nSet the spectrum as warmwhitefluorescent (predefined spectrum).\nSpectrum feature.\nSet the spectrum as daylightfluorescent (predefined spectrum).\nSpectrum feature.\nSet the spectrum as whiteLED (predefined spectrum).\nSpectrum feature.\nSet the spectrum as halogen (predefined spectrum).\nSpectrum feature.\nSet the spectrum as metalhalide (predefined spectrum).\nSpectrum feature.\nSet the spectrum as highpressuresodium (predefined spectrum).\nSpectrum feature.\nReturn the string representation of the spectrum.\nSave feature: send the local data to the speos server database.\nSpectrum feature.\nReset feature: override local data by the one from the speos server database.\nSpectrum feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nSpectrum feature.\nMethod detail\npython:float\n555.0\nansys.speos.core.spectrum.Spectrum\npython:float\n2856\nansys.speos.core.spectrum.Spectrum\nList\npython:float\nList\npython:float\nansys.speos.core.spectrum.Spectrum\npython:str\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum\nansys.speos.core.spectrum.Spectrum"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_monochromatic",
        "title": "Spectrum > Method detail > set_monochromatic",
        "section": "Method detail > set_monochromatic",
        "text": "Spectrum.set_monochromatic(wavelength=555.0)\n\nSet the spectrum as monochromatic.\n\nParameters\n\nwavelength\n\npython:float\n\nWavelength of the spectrum, in nm.\nBy default, 555.0.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_blackbody",
        "title": "Spectrum > Method detail > set_blackbody",
        "section": "Method detail > set_blackbody",
        "text": "Spectrum.set_blackbody(temperature=2856)\n\nSet the spectrum as blackbody.\n\nParameters\n\ntemperature\n\npython:float\n\nTemperature of the blackbody, in K.\nBy default, 2856.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_sampled",
        "title": "Spectrum > Method detail > set_sampled",
        "section": "Method detail > set_sampled",
        "text": "Spectrum.set_sampled(wavelengths, values)\n\nSet the spectrum as sampled.\n\nParameters\n\nwavelengths\n\nList[python:float]\n\nList of wavelengths, in nm\n\nvalues\n\nList[python:float]\n\nList of values, expected from 0. to 100. in %\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_library",
        "title": "Spectrum > Method detail > set_library",
        "section": "Method detail > set_library",
        "text": "Spectrum.set_library(file_uri)\n\nSet the spectrum as library.\n\nParameters\n\nfile_uri\n\npython:str\n\nuri of the spectrum file.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_incandescent",
        "title": "Spectrum > Method detail > set_incandescent",
        "section": "Method detail > set_incandescent",
        "text": "Spectrum.set_incandescent()\n\nSet the spectrum as incandescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_warmwhitefluorescent",
        "title": "Spectrum > Method detail > set_warmwhitefluorescent",
        "section": "Method detail > set_warmwhitefluorescent",
        "text": "Spectrum.set_warmwhitefluorescent()\n\nSet the spectrum as warmwhitefluorescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_daylightfluorescent",
        "title": "Spectrum > Method detail > set_daylightfluorescent",
        "section": "Method detail > set_daylightfluorescent",
        "text": "Spectrum.set_daylightfluorescent()\n\nSet the spectrum as daylightfluorescent (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_whiteLED",
        "title": "Spectrum > Method detail > set_whiteLED",
        "section": "Method detail > set_whiteLED",
        "text": "Spectrum.set_whiteLED()\n\nSet the spectrum as whiteLED (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_halogen",
        "title": "Spectrum > Method detail > set_halogen",
        "section": "Method detail > set_halogen",
        "text": "Spectrum.set_halogen()\n\nSet the spectrum as halogen (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_metalhalide",
        "title": "Spectrum > Method detail > set_metalhalide",
        "section": "Method detail > set_metalhalide",
        "text": "Spectrum.set_metalhalide()\n\nSet the spectrum as metalhalide (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.set_highpressuresodium",
        "title": "Spectrum > Method detail > set_highpressuresodium",
        "section": "Method detail > set_highpressuresodium",
        "text": "Spectrum.set_highpressuresodium()\n\nSet the spectrum as highpressuresodium (predefined spectrum).\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.__str__",
        "title": "Spectrum > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Spectrum.__str__()\n\nReturn the string representation of the spectrum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.commit",
        "title": "Spectrum > Method detail > commit",
        "section": "Method detail > commit",
        "text": "Spectrum.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.reset",
        "title": "Spectrum > Method detail > reset",
        "section": "Method detail > reset",
        "text": "Spectrum.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/Spectrum",
        "href": "api/ansys/speos/core/spectrum/Spectrum.html#Spectrum.delete",
        "title": "Spectrum > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Spectrum.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/docker/common_docker",
        "href": "getting_started/docker/common_docker.html#launch-the-speos-service",
        "title": "Launch the Speos service",
        "section": "Launch the Speos service",
        "text": "Manually launch the Speos service.\nLaunch the Speos service"
    },
    {
        "objectID": "getting_started/docker/common_docker",
        "href": "getting_started/docker/common_docker.html#environment-variables",
        "title": "Launch the Speos service > Environment variables",
        "section": "Environment variables",
        "text": "The Speos service requires this mandatory environment variable to function properly:\nANSYSLMD_LICENSE_FILE: License server (port and IP address or DNS) the Speos service connects to.\nFor example, 1055@127.0.0.1.\nYou can also specify other optional environment variables:\nSPEOS_LOG_LEVEL: Sets the Speos service logging level. The default is 2, in which case\nthe logging level is INFO.\nHere are some terms to keep in mind:\nhost: Machine that hosts the Speos service. It is typically on localhost.\nBut if you are deploying the service on a remote machine, then the machine’s IP address is expected.\nBy default, PySpeos assumes it is on localhost.\nport: Port that exposes the Speos service on the host machine. Its\nvalue is assumed to be 50098, but users can deploy the service on preferred ports.\nEnvironment variables\nANSYSLMD_LICENSE_FILE\n1055@127.0.0.1\nSPEOS_LOG_LEVEL\n2\nINFO\nlocalhost\nlocalhost\n50098"
    },
    {
        "objectID": "getting_started/docker/common_docker",
        "href": "getting_started/docker/common_docker.html#docker-for-speos-service",
        "title": "Launch the Speos service > Docker for Speos service",
        "section": "Docker for Speos service",
        "text": "This method allows you to start the Speos service based on predefined environment variables and properties.\nAfterwards, see the next section to understand how to connect to this service instance from PySpeos.\nThe following snippet shows how to run Speos service 2025.1.\nTo use another product version, please modify the image label from 251 to the corresponding product version.\nDocker for Speos service"
    },
    {
        "objectID": "getting_started/docker/common_docker",
        "href": "getting_started/docker/common_docker.html#connect-to-the-speos-service",
        "title": "Launch the Speos service > Connect to the Speos service",
        "section": "Connect to the Speos service",
        "text": "After the Speos service is launched, connect to it with these commands:\nBy default, the Speos instance connects to 127.0.0.1 (\"localhost\") on\nport 50098.\nYou can change this by modifying the host and port\nparameters of the Speos object, but note that you must also modify\nyour docker run command by changing the <HOST-PORT>-50098 argument.\nThe following tabs show the commands that set the environment variables and Speos\nfunction.\nConnect to the Speos service\nSpeos\n127.0.0.1\n\"localhost\"\n50098\nhost\nport\nSpeos\ndocker run\n<HOST-PORT>-50098\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/index",
        "href": "api/ansys/speos/core/sensor/index.html#the-sensorpy-module",
        "title": "The sensor.py module",
        "section": "The sensor.py module",
        "text": "The sensor.py module\nsensor.py"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/index",
        "href": "api/ansys/speos/core/sensor/index.html#summary",
        "title": "The sensor.py module > Summary",
        "section": "Summary",
        "text": "BaseSensor\nBase class for Sensor.\nSensorCamera\nSensor feature: Camera.\nSensorIrradiance\nSensor feature: Irradiance.\nSensorRadiance\nSensor feature: Radiance.\nSummary\nBaseSensor\nSensorCamera\nSensorIrradiance\nSensorRadiance"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/index",
        "href": "api/ansys/speos/core/sensor/index.html#description",
        "title": "The sensor.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Sensor.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#library",
        "title": "Library",
        "section": "Library",
        "text": "Intensity of type: Library.\nBy default, orientation as axis system is chosen and no exit geometries.\nLibrary to complete.\nLibrary properties to complete.\nUses default values when True.\nlibrary (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Library)\nlibrary_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.LibraryProperties)\ndefault_values (bool)\nLibrary\nLibrary\nansys.api.speos.intensity.v1.IntensityTemplate.Library\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.LibraryProperties"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#ansys.speos.core.intensity.Intensity.Library",
        "title": "Library > Library > Library",
        "section": "Library > Library",
        "text": "class ansys.speos.core.intensity.Intensity.Library(library, library_props, default_values=True)\n\nIntensity of type: Library.\n\nBy default, orientation as axis system is chosen and no exit geometries.\n\nParameters\n\nlibrary\n\nansys.api.speos.intensity.v1.IntensityTemplate.Library\n\nLibrary to complete.\n\nlibrary_props\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties.LibraryProperties\n\nLibrary properties to complete.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nlibrary (ansys.speos.core.kernel.intensity_template.ProtoIntensityTemplate.Library)\n\nlibrary_props (ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties.LibraryProperties)\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#overview",
        "title": "Library > Overview",
        "section": "Overview",
        "text": "set_intensity_file_uri\nSet the intensity file.\nset_orientation_axis_system\nSet the intensity orientation from an axis system.\nset_orientation_normal_to_surface\nSet the intensity orientation as normal to surface.\nset_orientation_normal_to_uv_map\nSet the intensity orientation as normal to uv map.\nset_exit_geometries\nSet the exit geometries.\nOverview\nset_intensity_file_uri\nset_orientation_axis_system\nset_orientation_normal_to_surface\nset_orientation_normal_to_uv_map\nset_exit_geometries"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#import-detail",
        "title": "Library > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#method-detail",
        "title": "Library > Method detail",
        "section": "Method detail",
        "text": "Set the intensity file.\nuri of the intensity file IES (.ies), Eulumdat (.ldt), speos intensities (.xmp)\nIntensity feature of type library.\nSet the intensity orientation from an axis system.\nOrientation of the intensity [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz]\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nLibrary intensity.\nSet the intensity orientation as normal to surface.\nLibrary intensity.\nSet the intensity orientation as normal to uv map.\nLibrary intensity.\nSet the exit geometries.\nExit geometries list.\nBy default, [].\nLibrary intensity.\nMethod detail\npython:str\nansys.speos.core.intensity.Intensity.Library\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.intensity.Intensity.Library\nansys.speos.core.intensity.Intensity.Library\nansys.speos.core.intensity.Intensity.Library\nOptional\nList\nansys.speos.core.geo_ref.GeoRef\n[]\nansys.speos.core.intensity.Intensity.Library"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#Library.set_intensity_file_uri",
        "title": "Library > Method detail > set_intensity_file_uri",
        "section": "Method detail > set_intensity_file_uri",
        "text": "Library.set_intensity_file_uri(uri)\n\nSet the intensity file.\n\nParameters\n\nuri\n\npython:str\n\nuri of the intensity file IES (.ies), Eulumdat (.ldt), speos intensities (.xmp)\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nIntensity feature of type library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#Library.set_orientation_axis_system",
        "title": "Library > Method detail > set_orientation_axis_system",
        "section": "Method detail > set_orientation_axis_system",
        "text": "Library.set_orientation_axis_system(axis_system=None)\n\nSet the intensity orientation from an axis system.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nOrientation of the intensity [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz]\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#Library.set_orientation_normal_to_surface",
        "title": "Library > Method detail > set_orientation_normal_to_surface",
        "section": "Method detail > set_orientation_normal_to_surface",
        "text": "Library.set_orientation_normal_to_surface()\n\nSet the intensity orientation as normal to surface.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#Library.set_orientation_normal_to_uv_map",
        "title": "Library > Method detail > set_orientation_normal_to_uv_map",
        "section": "Method detail > set_orientation_normal_to_uv_map",
        "text": "Library.set_orientation_normal_to_uv_map()\n\nSet the intensity orientation as normal to uv map.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity.Library",
        "href": "api/ansys/speos/core/intensity/Intensity.Library.html#Library.set_exit_geometries",
        "title": "Library > Method detail > set_exit_geometries",
        "section": "Method detail > set_exit_geometries",
        "text": "Library.set_exit_geometries(exit_geometries=None)\n\nSet the exit geometries.\n\nParameters\n\nexit_geometries\n\nOptional[List[ansys.speos.core.geo_ref.GeoRef]]\n\nExit geometries list.\nBy default, [].\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/index",
        "href": "api/ansys/speos/core/spectrum/index.html#the-spectrumpy-module",
        "title": "The spectrum.py module",
        "section": "The spectrum.py module",
        "text": "The spectrum.py module\nspectrum.py"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/index",
        "href": "api/ansys/speos/core/spectrum/index.html#summary",
        "title": "The spectrum.py module > Summary",
        "section": "Summary",
        "text": "Spectrum\nSpeos feature : Spectrum.\nSummary\nSpectrum"
    },
    {
        "objectID": "api/ansys/speos/core/spectrum/index",
        "href": "api/ansys/speos/core/spectrum/index.html#description",
        "title": "The spectrum.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Spectrum.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#body",
        "title": "Body",
        "section": "Body",
        "text": "Feature : Body.\nThe Speos instance client.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nFeature containing this sub part.\nBy default, None.\nLink object for the body in database.\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nparent_part (Optional[Union[ansys.speos.core.part.Part, ansys.speos.core.part.Part.SubPart]])\nBody\nBody\nansys.speos.core.kernel.client.SpeosClient\npython:str\npython:str\n\"\"\nMapping\npython:str\npython:str\n{}\nUnion\nansys.speos.core.part.Part\nansys.speos.core.part.Part.SubPart\noptional\nNone\nansys.speos.core.kernel.body.BodyLink"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#ansys.speos.core.body.Body",
        "title": "Body > Body > Body",
        "section": "Body > Body",
        "text": "class ansys.speos.core.body.Body(speos_client, name, description='', metadata=None, parent_part=None)\n\nFeature : Body.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nMapping[python:str, python:str]\n\nMetadata of the feature.\nBy default, {}.\n\nparent_part\n\nUnion[ansys.speos.core.part.Part, ansys.speos.core.part.Part.SubPart], optional\n\nFeature containing this sub part.\nBy default, None.\n\nAttributes\n\nbody_link\n\nansys.speos.core.kernel.body.BodyLink\n\nLink object for the body in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nparent_part (Optional[Union[ansys.speos.core.part.Part, ansys.speos.core.part.Part.SubPart]])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#overview",
        "title": "Body > Overview",
        "section": "Overview",
        "text": "create_face\nCreate a face in this element.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nfind\nFind feature(s). In a body, only faces features can be found.\nbody_link\nLink object for the body in database.\n__str__\nReturn the string representation of the body.\nOverview\ncreate_face\ncommit\nreset\ndelete\nfind\nbody_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#import-detail",
        "title": "Body > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#attribute-detail",
        "title": "Body > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the body in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.body_link",
        "title": "Body > Attribute detail > body_link",
        "section": "Attribute detail > body_link",
        "text": "Body.body_link = None\n\nLink object for the body in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#method-detail",
        "title": "Body > Method detail",
        "section": "Method detail",
        "text": "Create a face in this element.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nFace feature.\nReturn the string representation of the body.\nSave feature: send the local data to the speos server database.\nBody feature.\nReset feature: override local data by the one from the speos server database.\nBody feature.\nDelete feature: delete data from the speos server database.\nBody feature.\nFind feature(s). In a body, only faces features can be found.\nName of the feature.\nExample “FaceName”\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\nType of the wanted feature (example: ansys.speos.core.face.Face).\nBy default, None, means that all features will be considered.\nFound features.\nMethod detail\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.face.Face\nansys.speos.core.body.Body\nansys.speos.core.body.Body\nansys.speos.core.body.Body\npython:str\nFalse\ntype\nNone\nList\nansys.speos.core.face.Face"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.create_face",
        "title": "Body > Method detail > create_face",
        "section": "Method detail > create_face",
        "text": "Body.create_face(name, description='', metadata=None)\n\nCreate a face in this element.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.__str__",
        "title": "Body > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Body.__str__()\n\nReturn the string representation of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.commit",
        "title": "Body > Method detail > commit",
        "section": "Method detail > commit",
        "text": "Body.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.reset",
        "title": "Body > Method detail > reset",
        "section": "Method detail > reset",
        "text": "Body.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.delete",
        "title": "Body > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Body.delete()\n\nDelete feature: delete data from the speos server database.\n\nReturns\n\nansys.speos.core.body.Body\n\nBody feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/body/Body",
        "href": "api/ansys/speos/core/body/Body.html#Body.find",
        "title": "Body > Method detail > find",
        "section": "Method detail > find",
        "text": "Body.find(name, name_regex=False, feature_type=None)\n\nFind feature(s). In a body, only faces features can be found.\n\nParameters\n\nname\n\npython:str\n\nName of the feature.\nExample “FaceName”\n\nname_regex\n\nbool\n\nAllows to use regex for name parameter.\nBy default, False, means that regex is not used for name parameter.\n\nfeature_type\n\ntype\n\nType of the wanted feature (example: ansys.speos.core.face.Face).\nBy default, None, means that all features will be considered.\n\nReturns\n\nList[ansys.speos.core.face.Face]\n\nFound features.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#weight",
        "title": "Weight",
        "section": "Weight",
        "text": "The Weight represents the ray energy. In real life, a ray loses some energy (power) when it interacts with an object.\nActivating weight means that the Weight message is present.\nWhen weight is not activated, rays’ energy stays constant and probability laws dictate if rays continue or stop propagating.\nWhen weight is activated, the rays’ energy evolves with interactions until rays reach the sensors.\nIt is highly recommended to fill this parameter excepted in interactive simulation.\nNot filling this parameter is useful to understand certain phenomena as absorption.\nVariable to indicate if usage is inside class scope\nweight (ansys.api.speos.simulation.v1.simulation_template_pb2.Weight)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_weight method available in simulation classes.\nWeight\nWeight\nansys.api.speos.simulation.v1.simulation_template_pb2.Weight\nto"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#ansys.speos.core.simulation.BaseSimulation.Weight",
        "title": "Weight > Weight > Weight",
        "section": "Weight > Weight",
        "text": "class ansys.speos.core.simulation.BaseSimulation.Weight(weight, stable_ctr=False)\n\nThe Weight represents the ray energy. In real life, a ray loses some energy (power) when it interacts with an object.\n\nActivating weight means that the Weight message is present.\nWhen weight is not activated, rays’ energy stays constant and probability laws dictate if rays continue or stop propagating.\nWhen weight is activated, the rays’ energy evolves with interactions until rays reach the sensors.\nIt is highly recommended to fill this parameter excepted in interactive simulation.\nNot filling this parameter is useful to understand certain phenomena as absorption.\n\nParameters\n\nweight\n\nansys.api.speos.simulation.v1.simulation_template_pb2.Weight to complete.\n\n\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nweight (ansys.api.speos.simulation.v1.simulation_template_pb2.Weight)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_weight method available in simulation classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#overview",
        "title": "Weight > Overview",
        "section": "Overview",
        "text": "set_minimum_energy_percentage\nSet the minimum energy percentage.\nOverview\nset_minimum_energy_percentage"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#import-detail",
        "title": "Weight > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#method-detail",
        "title": "Weight > Method detail",
        "section": "Method detail",
        "text": "Set the minimum energy percentage.\nThe Minimum energy percentage parameter defines the minimum energy ratio to continue to propagate a ray with weight.\nBy default, 0.005.\nWeight.\nMethod detail\npython:float\n0.005\nansys.speos.core.simulation.BaseSimulation.Weight"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/BaseSimulation.Weight",
        "href": "api/ansys/speos/core/simulation/BaseSimulation.Weight.html#Weight.set_minimum_energy_percentage",
        "title": "Weight > Method detail > set_minimum_energy_percentage",
        "section": "Method detail > set_minimum_energy_percentage",
        "text": "Weight.set_minimum_energy_percentage(value=0.005)\n\nSet the minimum energy percentage.\n\nParameters\n\nvalue\n\npython:float\n\nThe Minimum energy percentage parameter defines the minimum energy ratio to continue to propagate a ray with weight.\nBy default, 0.005.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nWeight.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#the-speospy-module",
        "title": "The speos.py module",
        "section": "The speos.py module",
        "text": "The speos.py module\nspeos.py"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#summary",
        "title": "The speos.py module > Summary",
        "section": "Summary",
        "text": "Speos\nAllows the Speos session (client) to interact with the SpeosRPC server.\nDEFAULT_HOST\nDEFAULT_PORT\nSummary\nSpeos\nDEFAULT_HOST\nDEFAULT_PORT"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#description",
        "title": "The speos.py module > Description",
        "section": "Description",
        "text": "Provides the Speos class.\nDescription\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#module-detail",
        "title": "The speos.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#speos.DEFAULT_HOST",
        "title": "The speos.py module > Module detail > DEFAULT_HOST",
        "section": "Module detail > DEFAULT_HOST",
        "text": "speos.DEFAULT_HOST = 'localhost'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/speos/index",
        "href": "api/ansys/speos/core/speos/index.html#speos.DEFAULT_PORT",
        "title": "The speos.py module > Module detail > DEFAULT_PORT",
        "section": "Module detail > DEFAULT_PORT",
        "text": "speos.DEFAULT_PORT = '50098'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#photometric",
        "title": "Photometric",
        "section": "Photometric",
        "text": "Mode of camera sensor : Photometric.\nThis allows to set every Camera Sensor parameters, including the photometric definition parameters.\nBy default, a camera with mode color is chosen (vs monochromatic mode).\nSensorCameraModePhotometric protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nmode_photometric (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric)\ncamera_props (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.CameraProperties)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_type_photometric method available in sensor classes.\nPhotometric\nPhotometric\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#ansys.speos.core.sensor.SensorCamera.Photometric",
        "title": "Photometric > Photometric > Photometric",
        "section": "Photometric > Photometric",
        "text": "class ansys.speos.core.sensor.SensorCamera.Photometric(mode_photometric, camera_props, default_values=True, stable_ctr=False)\n\nMode of camera sensor : Photometric.\n\nThis allows to set every Camera Sensor parameters, including the photometric definition parameters.\nBy default, a camera with mode color is chosen (vs monochromatic mode).\n\nParameters\n\nmode_photometric\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric\n\nSensorCameraModePhotometric protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nmode_photometric (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraModePhotometric)\n\ncamera_props (ansys.speos.core.kernel.scene.ProtoScene.SensorInstance.CameraProperties)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_photometric method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#overview",
        "title": "Photometric > Overview",
        "section": "Overview",
        "text": "set_acquisition_integration\nSet the acquisition integration value.\nset_acquisition_lag_time\nSet the acquisition lag time value.\nset_transmittance_file_uri\nSet the transmittance file.\nset_gamma_correction\nSet the gamma correction.\nset_png_bits_08\nChoose 08-bits for png.\nset_png_bits_10\nChoose 10-bits for png.\nset_png_bits_12\nChoose 12-bits for png.\nset_png_bits_16\nChoose 16-bits for png.\nset_wavelengths_range\nSet the range of wavelengths.\nset_mode_monochromatic\nSet the monochromatic mode.\nset_mode_color\nSet the color mode.\nset_trajectory_file_uri\nSet the trajectory file.\nset_layer_type_none\nSet no layer separation: includes the simulation’s results in one layer.\nset_layer_type_source\nSet layer separation by source: includes one layer per active source in the result.\nOverview\nset_acquisition_integration\nset_acquisition_lag_time\nset_transmittance_file_uri\nset_gamma_correction\nset_png_bits_08\nset_png_bits_10\nset_png_bits_12\nset_png_bits_16\nset_wavelengths_range\nset_mode_monochromatic\nset_mode_color\nset_trajectory_file_uri\nset_layer_type_none\nset_layer_type_source"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#import-detail",
        "title": "Photometric > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#method-detail",
        "title": "Photometric > Method detail",
        "section": "Method detail",
        "text": "Set the acquisition integration value.\nAcquisition integration value (s).\nBy default, 0.01.\nPhotometric mode.\nSet the acquisition lag time value.\nAcquisition lag time value (s).\nBy default, 0.0.\nPhotometric mode.\nSet the transmittance file.\nAmount of light of the source that passes through the lens and reaches the sensor.\nThe transmittance is expressed in a .spectrum file.\nPhotometric mode.\nSet the gamma correction.\nCompensation of the curve before the display on the screen.\nBy default, 2.2.\nPhotometric mode.\nChoose 08-bits for png.\nPhotometric mode.\nChoose 10-bits for png.\nPhotometric mode.\nChoose 12-bits for png.\nPhotometric mode.\nChoose 16-bits for png.\nPhotometric mode.\nSet the range of wavelengths.\nWavelengths range.\nSet the monochromatic mode.\nResults will be available in grey scale.\nSpectrum file uri.\nPhotometric mode.\nSet the color mode.\nResults will be available in color.\nColor mode.\nSet the trajectory file.\nTrajectory file, used to define the position and orientations of the Camera sensor in time.\nPhotometric mode.\nSet no layer separation: includes the simulation’s results in one layer.\nPhotometric mode.\nSet layer separation by source: includes one layer per active source in the result.\nPhotometric mode.\nMethod detail\npython:float\n0.01\nansys.speos.core.sensor.SensorCamera.Photometric\npython:float\n0.0\nansys.speos.core.sensor.SensorCamera.Photometric\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric\npython:float\n2.2\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric.Color\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric\nansys.speos.core.sensor.SensorCamera.Photometric"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_acquisition_integration",
        "title": "Photometric > Method detail > set_acquisition_integration",
        "section": "Method detail > set_acquisition_integration",
        "text": "Photometric.set_acquisition_integration(value=0.01)\n\nSet the acquisition integration value.\n\nParameters\n\nvalue\n\npython:float\n\nAcquisition integration value (s).\nBy default, 0.01.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_acquisition_lag_time",
        "title": "Photometric > Method detail > set_acquisition_lag_time",
        "section": "Method detail > set_acquisition_lag_time",
        "text": "Photometric.set_acquisition_lag_time(value=0.0)\n\nSet the acquisition lag time value.\n\nParameters\n\nvalue\n\npython:float\n\nAcquisition lag time value (s).\nBy default, 0.0.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_transmittance_file_uri",
        "title": "Photometric > Method detail > set_transmittance_file_uri",
        "section": "Method detail > set_transmittance_file_uri",
        "text": "Photometric.set_transmittance_file_uri(uri)\n\nSet the transmittance file.\n\nParameters\n\nuri\n\npython:str\n\nAmount of light of the source that passes through the lens and reaches the sensor.\nThe transmittance is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_gamma_correction",
        "title": "Photometric > Method detail > set_gamma_correction",
        "section": "Method detail > set_gamma_correction",
        "text": "Photometric.set_gamma_correction(value=2.2)\n\nSet the gamma correction.\n\nParameters\n\nvalue\n\npython:float\n\nCompensation of the curve before the display on the screen.\nBy default, 2.2.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_png_bits_08",
        "title": "Photometric > Method detail > set_png_bits_08",
        "section": "Method detail > set_png_bits_08",
        "text": "Photometric.set_png_bits_08()\n\nChoose 08-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_png_bits_10",
        "title": "Photometric > Method detail > set_png_bits_10",
        "section": "Method detail > set_png_bits_10",
        "text": "Photometric.set_png_bits_10()\n\nChoose 10-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_png_bits_12",
        "title": "Photometric > Method detail > set_png_bits_12",
        "section": "Method detail > set_png_bits_12",
        "text": "Photometric.set_png_bits_12()\n\nChoose 12-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_png_bits_16",
        "title": "Photometric > Method detail > set_png_bits_16",
        "section": "Method detail > set_png_bits_16",
        "text": "Photometric.set_png_bits_16()\n\nChoose 16-bits for png.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_wavelengths_range",
        "title": "Photometric > Method detail > set_wavelengths_range",
        "section": "Method detail > set_wavelengths_range",
        "text": "Photometric.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_mode_monochromatic",
        "title": "Photometric > Method detail > set_mode_monochromatic",
        "section": "Method detail > set_mode_monochromatic",
        "text": "Photometric.set_mode_monochromatic(spectrum_file_uri)\n\nSet the monochromatic mode.\n\nResults will be available in grey scale.\n\nParameters\n\nspectrum_file_uri\n\npython:str\n\nSpectrum file uri.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_mode_color",
        "title": "Photometric > Method detail > set_mode_color",
        "section": "Method detail > set_mode_color",
        "text": "Photometric.set_mode_color()\n\nSet the color mode.\n\nResults will be available in color.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_trajectory_file_uri",
        "title": "Photometric > Method detail > set_trajectory_file_uri",
        "section": "Method detail > set_trajectory_file_uri",
        "text": "Photometric.set_trajectory_file_uri(uri)\n\nSet the trajectory file.\n\nParameters\n\nuri\n\npython:str\n\nTrajectory file, used to define the position and orientations of the Camera sensor in time.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_layer_type_none",
        "title": "Photometric > Method detail > set_layer_type_none",
        "section": "Method detail > set_layer_type_none",
        "text": "Photometric.set_layer_type_none()\n\nSet no layer separation: includes the simulation’s results in one layer.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#Photometric.set_layer_type_source",
        "title": "Photometric > Method detail > set_layer_type_source",
        "section": "Method detail > set_layer_type_source",
        "text": "Photometric.set_layer_type_source()\n\nSet layer separation by source: includes one layer per active source in the result.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric\n\nPhotometric mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.html#classes",
        "title": "Photometric > Classes",
        "section": "Classes",
        "text": "Color\nMode of camera sensor : Color.\nClasses\nColor"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/index",
        "href": "api/ansys/speos/core/workflow/index.html#the-workflow-package",
        "title": "The workflow package",
        "section": "The workflow package",
        "text": "The workflow package\nworkflow"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/index",
        "href": "api/ansys/speos/core/workflow/index.html#summary",
        "title": "The workflow package > Summary",
        "section": "Summary",
        "text": "combine_speos\nImport geometries and materials from several SPEOS files to a project.\nopen_result\nOpen one of the possible results generated out of the simulation.\nSummary\ncombine_speos\nopen_result"
    },
    {
        "objectID": "api/ansys/speos/core/workflow/index",
        "href": "api/ansys/speos/core/workflow/index.html#description",
        "title": "The workflow package > Description",
        "section": "Description",
        "text": "PySpeos workflow gathers functionality to use Speos capabilities in advanced ways.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#the-clientpy-module",
        "title": "The client.py module",
        "section": "The client.py module",
        "text": "The client.py module\nclient.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#summary",
        "title": "The client.py module > Summary",
        "section": "Summary",
        "text": "SpeosClient\nWraps a speos gRPC connection.\nwait_until_healthy\nWait until a channel is healthy before returning.\nDEFAULT_HOST\nDEFAULT_PORT\nSummary\nSpeosClient\nwait_until_healthy\nDEFAULT_HOST\nDEFAULT_PORT"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#description",
        "title": "The client.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#module-detail",
        "title": "The client.py module > Module detail",
        "section": "Module detail",
        "text": "Wait until a channel is healthy before returning.\nChannel to wait until established and healthy.\nTimeout in seconds. One attempt will be made each 100 milliseconds\nuntil the timeout is exceeded.\nRaised when the total elapsed time exceeds timeout.\nModule detail\nChannel\npython:float\nTimeoutError\ntimeout"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#client.wait_until_healthy",
        "title": "The client.py module > Module detail > wait_until_healthy",
        "section": "Module detail > wait_until_healthy",
        "text": "client.wait_until_healthy(channel, timeout)\n\nWait until a channel is healthy before returning.\n\nParameters\n\nchannel\n\nChannel\n\nChannel to wait until established and healthy.\n\ntimeout\n\npython:float\n\nTimeout in seconds. One attempt will be made each 100 milliseconds\nuntil the timeout is exceeded.\n\nRaises\n\nTimeoutError\n\nRaised when the total elapsed time exceeds timeout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#client.DEFAULT_HOST",
        "title": "The client.py module > Module detail > DEFAULT_HOST",
        "section": "Module detail > DEFAULT_HOST",
        "text": "client.DEFAULT_HOST = 'localhost'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/index",
        "href": "api/ansys/speos/core/kernel/client/index.html#client.DEFAULT_PORT",
        "title": "The client.py module > Module detail > DEFAULT_PORT",
        "section": "Module detail > DEFAULT_PORT",
        "text": "client.DEFAULT_PORT = '50098'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#simulationinteractive",
        "title": "SimulationInteractive",
        "section": "SimulationInteractive",
        "text": "Bases: BaseSimulation\nType of simulation : Interactive.\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\na colorimetric standard is set to CIE 1931,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, each source will send 100 rays.\nBy default, the simulation deactivates both light expert and impact report.\nProject in which simulation shall be created.\nName of the simulation.\nDescription of the Simulation.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nproject (SimulationInteractive.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\ndefault_values (bool)\nSimulationInteractive\nSimulationInteractive\nBaseSimulation\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#ansys.speos.core.simulation.SimulationInteractive",
        "title": "SimulationInteractive > SimulationInteractive > SimulationInteractive",
        "section": "SimulationInteractive > SimulationInteractive",
        "text": "class ansys.speos.core.simulation.SimulationInteractive(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of simulation : Interactive.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\na colorimetric standard is set to CIE 1931,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, each source will send 100 rays.\nBy default, the simulation deactivates both light expert and impact report.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationInteractive.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#overview",
        "title": "SimulationInteractive > Overview",
        "section": "Overview",
        "text": "set_geom_distance_tolerance\nSet the geometry distance tolerance.\nset_max_impact\nDefine a value to determine the maximum number of ray impacts during propagation.\nset_weight\nActivate weight. Highly recommended to fill.\nset_weight_none\nDeactivate weight.\nset_colorimetric_standard_CIE_1931\nSet the colorimetric standard to CIE 1931.\nset_colorimetric_standard_CIE_1964\nSet the colorimetric standard to CIE 1964.\nset_ambient_material_file_uri\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nset_rays_number_per_sources\nSelect the number of rays emitted for each source.\nset_light_expert\nActivate/Deactivate the generation of light expert file.\nset_impact_report\nActivate/Deactivate the details like number of impacts, position and surface state to the HTML simulation report.\nOverview\nset_geom_distance_tolerance\nset_max_impact\nset_weight\nset_weight_none\nset_colorimetric_standard_CIE_1931\nset_colorimetric_standard_CIE_1964\nset_ambient_material_file_uri\nset_rays_number_per_sources\nset_light_expert\nset_impact_report"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#import-detail",
        "title": "SimulationInteractive > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#method-detail",
        "title": "SimulationInteractive > Method detail",
        "section": "Method detail",
        "text": "Set the geometry distance tolerance.\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\nInteractive simulation\nDefine a value to determine the maximum number of ray impacts during propagation.\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\nThe maximum number of impacts.\nBy default, 100.\nInteractive simulation\nActivate weight. Highly recommended to fill.\nSimulation.Weight\nDeactivate weight.\nInteractive simulation\nSet the colorimetric standard to CIE 1931.\n2 degrees CIE Standard Colorimetric Observer Data.\nInteractive simulation\nSet the colorimetric standard to CIE 1964.\n10 degrees CIE Standard Colorimetric Observer Data.\nInteractive simulation\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\nInteractive simulation\nSelect the number of rays emitted for each source.\nIf a source is present in the simulation but not referenced here, it will send by default 100 rays.\nList of rays number emitted by source.\nInteractive simulation\nActivate/Deactivate the generation of light expert file.\nActivate/Deactivate.\nBy default, False, means deactivate.\nInteractive simulation\nActivate/Deactivate the details like number of impacts, position and surface state to the HTML simulation report.\nActivate/Deactivate.\nBy default, False, means deactivate.\nInteractive simulation\nMethod detail\npython:float\n0.01\nansys.speos.core.simulation.SimulationInteractive\npython:int\n100\nansys.speos.core.simulation.SimulationInteractive\nansys.speos.core.simulation.BaseSimulation.Weight\nansys.speos.core.simulation.SimulationInteractive\nansys.speos.core.simulation.SimulationInteractive\nansys.speos.core.simulation.SimulationInteractive\npython:str\n\"\"\nansys.speos.core.simulation.SimulationInteractive\nList\nansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource\nansys.speos.core.simulation.SimulationInteractive\nFalse\nansys.speos.core.simulation.SimulationInteractive\nFalse\nansys.speos.core.simulation.SimulationInteractive"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_geom_distance_tolerance",
        "title": "SimulationInteractive > Method detail > set_geom_distance_tolerance",
        "section": "Method detail > set_geom_distance_tolerance",
        "text": "SimulationInteractive.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_max_impact",
        "title": "SimulationInteractive > Method detail > set_max_impact",
        "section": "Method detail > set_max_impact",
        "text": "SimulationInteractive.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_weight",
        "title": "SimulationInteractive > Method detail > set_weight",
        "section": "Method detail > set_weight",
        "text": "SimulationInteractive.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nSimulation.Weight\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_weight_none",
        "title": "SimulationInteractive > Method detail > set_weight_none",
        "section": "Method detail > set_weight_none",
        "text": "SimulationInteractive.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_colorimetric_standard_CIE_1931",
        "title": "SimulationInteractive > Method detail > set_colorimetric_standard_CIE_1931",
        "section": "Method detail > set_colorimetric_standard_CIE_1931",
        "text": "SimulationInteractive.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_colorimetric_standard_CIE_1964",
        "title": "SimulationInteractive > Method detail > set_colorimetric_standard_CIE_1964",
        "section": "Method detail > set_colorimetric_standard_CIE_1964",
        "text": "SimulationInteractive.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_ambient_material_file_uri",
        "title": "SimulationInteractive > Method detail > set_ambient_material_file_uri",
        "section": "Method detail > set_ambient_material_file_uri",
        "text": "SimulationInteractive.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_rays_number_per_sources",
        "title": "SimulationInteractive > Method detail > set_rays_number_per_sources",
        "section": "Method detail > set_rays_number_per_sources",
        "text": "SimulationInteractive.set_rays_number_per_sources(values)\n\nSelect the number of rays emitted for each source.\n\nIf a source is present in the simulation but not referenced here, it will send by default 100 rays.\n\nParameters\n\nvalues\n\nList[ansys.speos.core.simulation.SimulationInteractive.RaysNumberPerSource]\n\nList of rays number emitted by source.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_light_expert",
        "title": "SimulationInteractive > Method detail > set_light_expert",
        "section": "Method detail > set_light_expert",
        "text": "SimulationInteractive.set_light_expert(value=False)\n\nActivate/Deactivate the generation of light expert file.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#SimulationInteractive.set_impact_report",
        "title": "SimulationInteractive > Method detail > set_impact_report",
        "section": "Method detail > set_impact_report",
        "text": "SimulationInteractive.set_impact_report(value=False)\n\nActivate/Deactivate the details like number of impacts, position and surface state to the HTML simulation report.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInteractive\n\nInteractive simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInteractive",
        "href": "api/ansys/speos/core/simulation/SimulationInteractive.html#classes",
        "title": "SimulationInteractive > Classes",
        "section": "Classes",
        "text": "RaysNumberPerSource\nStructure to describe the number of rays requested for a specific source.\nClasses\nRaysNumberPerSource"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#sensortemplatestub",
        "title": "SensorTemplateStub",
        "section": "SensorTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for sensor templates.\nChannel to use for the stub.\nThe best way to get a SensorTemplateStub is to retrieve it from SpeosClient via sensor_templates() method.\nLike in the following example:\nSensorTemplateStub\nSensorTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#ansys.speos.core.kernel.sensor_template.SensorTemplateStub",
        "title": "SensorTemplateStub > SensorTemplateStub > SensorTemplateStub",
        "section": "SensorTemplateStub > SensorTemplateStub",
        "text": "class ansys.speos.core.kernel.sensor_template.SensorTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for sensor templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SensorTemplateStub is to retrieve it from SpeosClient via sensor_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> ssr_t_db = speos.client.sensor_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#overview",
        "title": "SensorTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#import-detail",
        "title": "SensorTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#method-detail",
        "title": "SensorTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nsensor_template.SensorTemplate\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nsensor_template.SensorTemplate\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nsensor_template.SensorTemplate\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nList\nansys.speos.core.kernel.sensor_template.SensorTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#SensorTemplateStub.create",
        "title": "SensorTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SensorTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsensor_template.SensorTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#SensorTemplateStub.read",
        "title": "SensorTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SensorTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to read.\n\nReturns\n\nsensor_template.SensorTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#SensorTemplateStub.update",
        "title": "SensorTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SensorTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to update.\n\ndata\n\nsensor_template.SensorTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#SensorTemplateStub.delete",
        "title": "SensorTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SensorTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub",
        "href": "api/ansys/speos/core/kernel/sensor_template/SensorTemplateStub.html#SensorTemplateStub.list",
        "title": "SensorTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SensorTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.sensor_template.SensorTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/index",
        "href": "api/ansys/speos/core/kernel/part/index.html#the-partpy-module",
        "title": "The part.py module",
        "section": "The part.py module",
        "text": "The part.py module\npart.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/index",
        "href": "api/ansys/speos/core/kernel/part/index.html#summary",
        "title": "The part.py module > Summary",
        "section": "Summary",
        "text": "PartLink\nLink object for a part in database.\nPartStub\nDatabase interactions for part.\nProtoPart\nPart protobuf class : ansys.api.speos.part.v1.part_pb2.Part\nSummary\nPartLink\nPartStub\nProtoPart"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/index",
        "href": "api/ansys/speos/core/kernel/part/index.html#description",
        "title": "The part.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/index",
        "href": "api/ansys/speos/core/kernel/part/index.html#module-detail",
        "title": "The part.py module > Module detail",
        "section": "Module detail",
        "text": "Part protobuf class : ansys.api.speos.part.v1.part_pb2.Part\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/part/index",
        "href": "api/ansys/speos/core/kernel/part/index.html#part.ProtoPart",
        "title": "The part.py module > Module detail > ProtoPart",
        "section": "Module detail > ProtoPart",
        "text": "part.ProtoPart\n\nPart protobuf class : ansys.api.speos.part.v1.part_pb2.Part\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#sourcetemplatelink",
        "title": "SourceTemplateLink",
        "section": "SourceTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a source template in database.\nDatabase to link to.\nKey of the source template in the database.\nkey (str)\nSourceTemplateLink\nSourceTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.source_template.SourceTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#ansys.speos.core.kernel.source_template.SourceTemplateLink",
        "title": "SourceTemplateLink > SourceTemplateLink > SourceTemplateLink",
        "section": "SourceTemplateLink > SourceTemplateLink",
        "text": "class ansys.speos.core.kernel.source_template.SourceTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a source template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.source_template.SourceTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the source template in the database.\n\nParameters\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#overview",
        "title": "SourceTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\nget_ray_file_info\nRetrieve information about ray file source.\n__str__\nReturn the string representation of the source template.\nOverview\nget\nset\ndelete\nget_ray_file_info\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#import-detail",
        "title": "SourceTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#method-detail",
        "title": "SourceTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the source template.\nGet the datamodel from database.\nSource template datamodel.\nChange datamodel in database.\nNew source template datamodel.\nRemove datamodel from database.\nRetrieve information about ray file source.\nInformation about ray file source, like flux value.\nMethod detail\nsource_template.SourceTemplate\nsource_template.SourceTemplate\nansys.api.speos.source.v1.source_pb2.GetRayFileInfo_Response"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#SourceTemplateLink.__str__",
        "title": "SourceTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SourceTemplateLink.__str__()\n\nReturn the string representation of the source template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#SourceTemplateLink.get",
        "title": "SourceTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SourceTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsource_template.SourceTemplate\n\nSource template datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#SourceTemplateLink.set",
        "title": "SourceTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SourceTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsource_template.SourceTemplate\n\nNew source template datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#SourceTemplateLink.delete",
        "title": "SourceTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SourceTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink",
        "href": "api/ansys/speos/core/kernel/source_template/SourceTemplateLink.html#SourceTemplateLink.get_ray_file_info",
        "title": "SourceTemplateLink > Method detail > get_ray_file_info",
        "section": "Method detail > get_ray_file_info",
        "text": "SourceTemplateLink.get_ray_file_info()\n\nRetrieve information about ray file source.\n\nReturns\n\nansys.api.speos.source.v1.source_pb2.GetRayFileInfo_Response\n\nInformation about ray file source, like flux value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#voptemplatelink",
        "title": "VOPTemplateLink",
        "section": "VOPTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a Volume Optical Property (VOP) template in database.\nDatabase to link to.\nKey of the vop template in the database.\nkey (str)\nVOPTemplateLink\nVOPTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.vop_template.VOPTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#ansys.speos.core.kernel.vop_template.VOPTemplateLink",
        "title": "VOPTemplateLink > VOPTemplateLink > VOPTemplateLink",
        "section": "VOPTemplateLink > VOPTemplateLink",
        "text": "class ansys.speos.core.kernel.vop_template.VOPTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a Volume Optical Property (VOP) template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.vop_template.VOPTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the vop template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.vop_template import ProtoVOPTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> vop_t_db = speos.client.vop_templates()\n>>> vop_t_message = ProtoVOPTemplate(name=\"Opaque\")\n>>> vop_t_message.opaque.SetInParent()\n>>> vop_t_link = vop_t_db.create(message=vop_t_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#overview",
        "title": "VOPTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the vop template.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#import-detail",
        "title": "VOPTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#method-detail",
        "title": "VOPTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the vop template.\nGet the datamodel from database.\nVOPTemplate datamodel.\nChange datamodel in database.\nNew VOPTemplate datamodel.\nRemove datamodel from database.\nMethod detail\nvop_template.VOPTemplate\nvop_template.VOPTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#VOPTemplateLink.__str__",
        "title": "VOPTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "VOPTemplateLink.__str__()\n\nReturn the string representation of the vop template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#VOPTemplateLink.get",
        "title": "VOPTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "VOPTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nvop_template.VOPTemplate\n\nVOPTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#VOPTemplateLink.set",
        "title": "VOPTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "VOPTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nvop_template.VOPTemplate\n\nNew VOPTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateLink.html#VOPTemplateLink.delete",
        "title": "VOPTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "VOPTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#voptemplatestub",
        "title": "VOPTemplateStub",
        "section": "VOPTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for Volume Optical Properties templates.\nChannel to use for the stub.\nThe best way to get a VOPTemplateStub is to retrieve it from SpeosClient via vop_templates() method.\nLike in the following example:\nVOPTemplateStub\nVOPTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#ansys.speos.core.kernel.vop_template.VOPTemplateStub",
        "title": "VOPTemplateStub > VOPTemplateStub > VOPTemplateStub",
        "section": "VOPTemplateStub > VOPTemplateStub",
        "text": "class ansys.speos.core.kernel.vop_template.VOPTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for Volume Optical Properties templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a VOPTemplateStub is to retrieve it from SpeosClient via vop_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> vop_t_db = speos.client.vop_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#overview",
        "title": "VOPTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#import-detail",
        "title": "VOPTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#method-detail",
        "title": "VOPTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nvop_template.VOPTemplate\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nvop_template.VOPTemplate\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nvop_template.VOPTemplate\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nList\nansys.speos.core.kernel.vop_template.VOPTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#VOPTemplateStub.create",
        "title": "VOPTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "VOPTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nvop_template.VOPTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#VOPTemplateStub.read",
        "title": "VOPTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "VOPTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to read.\n\nReturns\n\nvop_template.VOPTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#VOPTemplateStub.update",
        "title": "VOPTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "VOPTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to update.\n\ndata\n\nvop_template.VOPTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#VOPTemplateStub.delete",
        "title": "VOPTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "VOPTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.vop_template.VOPTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub",
        "href": "api/ansys/speos/core/kernel/vop_template/VOPTemplateStub.html#VOPTemplateStub.list",
        "title": "VOPTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "VOPTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.vop_template.VOPTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#balancemodedisplayprimaries",
        "title": "BalanceModeDisplayPrimaries",
        "section": "BalanceModeDisplayPrimaries",
        "text": "BalanceMode : DisplayPrimaries.\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display devices into account.\nWith this method, displayed results are similar to what the camera really gets.\nSensorCameraBalanceModeDisplay protobuf object to modify.\nUses default values when True.\nbalance_mode_display (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeDisplay)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_balance_mode_display_primaries method available in color class.\nBalanceModeDisplayPrimaries\nBalanceModeDisplayPrimaries\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeDisplay"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "title": "BalanceModeDisplayPrimaries > BalanceModeDisplayPrimaries > BalanceModeDisplayPrimaries",
        "section": "BalanceModeDisplayPrimaries > BalanceModeDisplayPrimaries",
        "text": "class ansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries(balance_mode_display, default_values=True, stable_ctr=False)\n\nBalanceMode : DisplayPrimaries.\n\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display devices into account.\nWith this method, displayed results are similar to what the camera really gets.\n\nParameters\n\nbalance_mode_display\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeDisplay\n\nSensorCameraBalanceModeDisplay protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nbalance_mode_display (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraBalanceModeDisplay)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_balance_mode_display_primaries method available in color class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#overview",
        "title": "BalanceModeDisplayPrimaries > Overview",
        "section": "Overview",
        "text": "set_red_display_file_uri\nSet the red display file.\nset_green_display_file_uri\nSet the green display file.\nset_blue_display_file_uri\nSet the blue display file.\nOverview\nset_red_display_file_uri\nset_green_display_file_uri\nset_blue_display_file_uri"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#import-detail",
        "title": "BalanceModeDisplayPrimaries > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#method-detail",
        "title": "BalanceModeDisplayPrimaries > Method detail",
        "section": "Method detail",
        "text": "Set the red display file.\nRed display file.\nBalanceModeDisplayPrimaries.\nSet the green display file.\nGreen display file.\nBalanceModeDisplayPrimaries.\nSet the blue display file.\nBlue display file.\nBalanceModeDisplayPrimaries.\nMethod detail\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#BalanceModeDisplayPrimaries.set_red_display_file_uri",
        "title": "BalanceModeDisplayPrimaries > Method detail > set_red_display_file_uri",
        "section": "Method detail > set_red_display_file_uri",
        "text": "BalanceModeDisplayPrimaries.set_red_display_file_uri(uri)\n\nSet the red display file.\n\nParameters\n\nuri\n\npython:str\n\nRed display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#BalanceModeDisplayPrimaries.set_green_display_file_uri",
        "title": "BalanceModeDisplayPrimaries > Method detail > set_green_display_file_uri",
        "section": "Method detail > set_green_display_file_uri",
        "text": "BalanceModeDisplayPrimaries.set_green_display_file_uri(uri)\n\nSet the green display file.\n\nParameters\n\nuri\n\npython:str\n\nGreen display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries.html#BalanceModeDisplayPrimaries.set_blue_display_file_uri",
        "title": "BalanceModeDisplayPrimaries > Method detail > set_blue_display_file_uri",
        "section": "Method detail > set_blue_display_file_uri",
        "text": "BalanceModeDisplayPrimaries.set_blue_display_file_uri(uri)\n\nSet the blue display file.\n\nParameters\n\nuri\n\npython:str\n\nBlue display file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalanceModeDisplayPrimaries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#how-to-modify-scene-elements",
        "title": "Examples > How to modify scene elements",
        "section": "How to modify scene elements",
        "text": "This tutorial demonstrates how to modify a scene. For example how to modify an existing sensor, how to add a new sensor. The logic is the same to modify sources, simulations, materials.\nHow to modify scene elements"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#template-vs-instance",
        "title": "Examples > How to modify scene elements > Template vs Instance",
        "section": "Template vs Instance",
        "text": "When applicable, the speos objects are separated in two different notions: template and instance. The template represents the feature with its inherent characteristics. The instance represents the completion of a template by adding properties such as spatial position, link to geometry, etc.\nTemplate vs Instance"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#template",
        "title": "Examples > How to modify scene elements > Template",
        "section": "Template",
        "text": "The template objects are handled by a manager. It was explained how to interact with them in the kernel-object-link example (“How to use an ObjectLink”). The interesting thing about the template notion is that the same template can be used several times with different properties.\nTemplate"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#instance",
        "title": "Examples > How to modify scene elements > Instance",
        "section": "Instance",
        "text": "The template objects are instantiated in the Scene object, with properties needed to place them at the wanted position, or attached to the wanted geometry. The Scene object will gather all features that you need to run a job (compute a simulation).\nCreate connection with speos rpc server\nCreate an empty scene and load speos file to fill it.\nInstance"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#print-data-models",
        "title": "Examples > How to modify scene elements > Print data models",
        "section": "Print data models",
        "text": "Print data models"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#whole-scene",
        "title": "Examples > How to modify scene elements > Whole scene",
        "section": "Whole scene",
        "text": "Whole scene"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#sensors-instance--template-in-this-scene",
        "title": "Examples > How to modify scene elements > Sensors (instance + template) in this scene",
        "section": "Sensors (instance + template) in this scene",
        "text": "Sensors (instance + template) in this scene"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#camera-sensors-in-this-scene",
        "title": "Examples > How to modify scene elements > Camera sensors in this scene",
        "section": "Camera sensors in this scene",
        "text": "Camera sensors in this scene"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#modify-existing-data",
        "title": "Examples > How to modify scene elements > Modify existing data",
        "section": "Modify existing data",
        "text": "Modify existing data"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#modify-a-camera-instance",
        "title": "Examples > How to modify scene elements > Modify a camera instance",
        "section": "Modify a camera instance",
        "text": "Modify a camera instance"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#modify-a-camera-template",
        "title": "Examples > How to modify scene elements > Modify a camera template",
        "section": "Modify a camera template",
        "text": "Modify a camera template"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#add-new-data-like-a-new-sensor",
        "title": "Examples > How to modify scene elements > Add new data (like a new sensor)",
        "section": "Add new data (like a new sensor)",
        "text": "Add new data (like a new sensor)"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#create-a-camera-template",
        "title": "Examples > How to modify scene elements > Create a camera template",
        "section": "Create a camera template",
        "text": "Create a camera template"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#create-a-camera-instance",
        "title": "Examples > How to modify scene elements > Create a camera instance",
        "section": "Create a camera instance",
        "text": "Create a camera instance"
    },
    {
        "objectID": "examples/kernel/modify-scene",
        "href": "examples/kernel/modify-scene.html#add-this-instance-in-our-scene",
        "title": "Examples > How to modify scene elements > Add this instance in our scene",
        "section": "Add this instance in our scene",
        "text": "When loading a speos file into a scene, this creates many objects (source templates, sensor templates, vop template, sop templates). Then at the end of the example, we just clean all databases\nAdd this instance in our scene"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#spectral",
        "title": "Spectral",
        "section": "Spectral",
        "text": "Type of sensor : Spectral.\nThis kind of sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\nBy default, it uses a default wavelengths range.\nSensorTypeSpectral protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nsensor_type_spectral (ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_type_spectral method available in sensor classes.\nSpectral\nSpectral\nansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#ansys.speos.core.sensor.BaseSensor.Spectral",
        "title": "Spectral > Spectral > Spectral",
        "section": "Spectral > Spectral",
        "text": "class ansys.speos.core.sensor.BaseSensor.Spectral(sensor_type_spectral, default_values=True, stable_ctr=False)\n\nType of sensor : Spectral.\n\nThis kind of sensor will generate color results and spectral data separated by wavelength (in lx or W/m2).\nBy default, it uses a default wavelengths range.\n\nParameters\n\nsensor_type_spectral\n\nansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral\n\nSensorTypeSpectral protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_type_spectral (ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_type_spectral method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#overview",
        "title": "Spectral > Overview",
        "section": "Overview",
        "text": "set_wavelengths_range\nSet the range of wavelengths.\nOverview\nset_wavelengths_range"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#import-detail",
        "title": "Spectral > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#method-detail",
        "title": "Spectral > Method detail",
        "section": "Method detail",
        "text": "Set the range of wavelengths.\nWavelengths range.\nMethod detail\nansys.speos.core.sensor.BaseSensor.WavelengthsRange"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Spectral",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Spectral.html#Spectral.set_wavelengths_range",
        "title": "Spectral > Method detail > set_wavelengths_range",
        "section": "Method detail > set_wavelengths_range",
        "text": "Spectral.set_wavelengths_range()\n\nSet the range of wavelengths.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengths range.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#how-to-create-a-source",
        "title": "Examples > How to create a source",
        "section": "How to create a source",
        "text": "This tutorial demonstrates how to create a source.\nThere are different type of sources available: luminaire source, surface source, ray file source.\nHow to create a source"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create a source > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#create-a-new-project",
        "title": "Examples > How to create a source > Create a new project",
        "section": "Create a new project",
        "text": "The only way to create a source, is to create it from a project.\nCreate a new project"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#create",
        "title": "Examples > How to create a source > Create",
        "section": "Create",
        "text": "Create locally\nThe mention “local: “ is added when printing the source.\nCreate"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#push-it-to-the-server",
        "title": "Examples > How to create a source > Push it to the server.",
        "section": "Push it to the server.",
        "text": "Now that it is committed to the server, the mention “local: “ is no more present when printing the source.\nPush it to the server."
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#another-example",
        "title": "Examples > How to create a source > Another example",
        "section": "Another example",
        "text": "Setting several more characteristics.\nAnother example"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#read",
        "title": "Examples > How to create a source > Read",
        "section": "Read",
        "text": "Read"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#source-instance",
        "title": "Examples > How to create a source > Source Instance",
        "section": "Source Instance",
        "text": "As mention “local: “ is added if it is not yet committed to the server.\nSource Instance"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#project",
        "title": "Examples > How to create a source > Project",
        "section": "Project",
        "text": "Committed feature will appear inside the project information.\nProject"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#update",
        "title": "Examples > How to create a source > Update",
        "section": "Update",
        "text": "Tipp: if you are manipulating a source already committed, don’t forget to commit your changes.\nIf you don’t, you will still only watch what is committed on the server.\nUpdate"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#reset",
        "title": "Examples > How to create a source > Reset",
        "section": "Reset",
        "text": "Possibility to reset local values from the one available in the server.\nReset"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#delete",
        "title": "Examples > How to create a source > Delete",
        "section": "Delete",
        "text": "Once the data is deleted from the server, you can still work with local data and maybe commit later.\nDelete"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#other-sources-examples",
        "title": "Examples > How to create a source > Other Sources Examples",
        "section": "Other Sources Examples",
        "text": "Other Sources Examples"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#ray-file-source",
        "title": "Examples > How to create a source > ray-file source",
        "section": "ray-file source",
        "text": "ray-file source"
    },
    {
        "objectID": "examples/core/source",
        "href": "examples/core/source.html#surface-source",
        "title": "Examples > How to create a source > surface source",
        "section": "surface source",
        "text": "When creating sources, this creates some intermediate objects (spectrums, intensity templates).\nDeleting a source does not delete in cascade those objects because they could be used by some other entities from core layer.\nThen at the end of the example, we just clean all databases\nsurface source"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#how-to-create-an-optical-property",
        "title": "Examples > How to create an optical property",
        "section": "How to create an optical property",
        "text": "This tutorial demonstrates how to create an optical property.\nHow to create an optical property"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#what-is-an-optical-property",
        "title": "Examples > How to create an optical property > What is an optical property?",
        "section": "What is an optical property?",
        "text": "An optical property (also named material), gathers two notions: the surface optical property (SOP) and the volume optical property (VOP).\nThe property is then applied to a geometry (like bodies, faces).\nWhat is an optical property?"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create an optical property > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#new-project",
        "title": "Examples > How to create an optical property > New Project",
        "section": "New Project",
        "text": "The only way to create an optical property is to create it from a project.\nNew Project"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#create-vop-volume-optical-property",
        "title": "Examples > How to create an optical property > Create VOP (volume optical property)",
        "section": "Create VOP (volume optical property)",
        "text": "Create locally.\nThe mention “local: “ is added when printing the optical property.\nCreate VOP (volume optical property)"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#push-it-to-the-server",
        "title": "Examples > How to create an optical property > Push it to the server.",
        "section": "Push it to the server.",
        "text": "Now that it is committed to the server, the mention “local: “ is no more present when printing the optical property.\nPush it to the server."
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#another-example",
        "title": "Examples > How to create an optical property > Another example.",
        "section": "Another example.",
        "text": "Setting several more characteristics.\nAnother example."
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#create-fop-face-optical-property",
        "title": "Examples > How to create an optical property > Create FOP (face optical property)",
        "section": "Create FOP (face optical property)",
        "text": "Sometimes it is needed to create property but only for surface.\nIn this case, no call for set_volume_xxx function is needed, and we will select a face for the geometries.\nCreate FOP (face optical property)"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#default-values",
        "title": "Examples > How to create an optical property > Default values",
        "section": "Default values",
        "text": "Some default values are available when applicable in every methods and class.\nDefault values"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#read",
        "title": "Examples > How to create an optical property > Read",
        "section": "Read",
        "text": "Read"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#material-instance-information",
        "title": "Examples > How to create an optical property > Material Instance Information",
        "section": "Material Instance Information",
        "text": "A mention “local: “ is added if it is not yet committed to the server.\nThe get methods allows you to get some properties of your feature\nMaterial Instance Information"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#project-information",
        "title": "Examples > How to create an optical property > Project Information",
        "section": "Project Information",
        "text": "Committed feature information will appear inside a project information.\nProject Information"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#update",
        "title": "Examples > How to create an optical property > Update",
        "section": "Update",
        "text": "Tipp: if you are manipulating an optical property already committed, don’t forget to commit your changes.\nIf you don’t, you will still only watch what is committed on the server.\nUpdate"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#reset",
        "title": "Examples > How to create an optical property > Reset",
        "section": "Reset",
        "text": "Possibility to reset local values from the one available in the server.\nReset"
    },
    {
        "objectID": "examples/core/opt-prop",
        "href": "examples/core/opt-prop.html#delete",
        "title": "Examples > How to create an optical property > Delete",
        "section": "Delete",
        "text": "Once the data is deleted from the server, you can still work with local data and maybe commit later.\nDelete"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#face",
        "title": "Face",
        "section": "Face",
        "text": "Feature : Face.\nThe Speos instance client.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nFeature containing this face.\nBy default, None.\nLink object for the face in database.\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nparent_body (Optional[ansys.speos.core.body.Body])\nFace\nFace\nansys.speos.core.kernel.client.SpeosClient\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.speos.core.body.Body\noptional\nNone\nansys.speos.core.kernel.face.FaceLink"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#ansys.speos.core.face.Face",
        "title": "Face > Face > Face",
        "section": "Face > Face",
        "text": "class ansys.speos.core.face.Face(speos_client, name, description='', metadata=None, parent_body=None)\n\nFeature : Face.\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nparent_body\n\nansys.speos.core.body.Body, optional\n\nFeature containing this face.\nBy default, None.\n\nAttributes\n\nface_link\n\nansys.speos.core.kernel.face.FaceLink\n\nLink object for the face in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nparent_body (Optional[ansys.speos.core.body.Body])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#overview",
        "title": "Face > Overview",
        "section": "Overview",
        "text": "set_vertices\nSet the face vertices.\nset_facets\nSet the facets.\nset_normals\nSet the face normals.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nface_link\nLink object for the face in database.\n__str__\nReturn the string representation of the face.\nOverview\nset_vertices\nset_facets\nset_normals\ncommit\nreset\ndelete\nface_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#import-detail",
        "title": "Face > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#attribute-detail",
        "title": "Face > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the face in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.face_link",
        "title": "Face > Attribute detail > face_link",
        "section": "Attribute detail > face_link",
        "text": "Face.face_link = None\n\nLink object for the face in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#method-detail",
        "title": "Face > Method detail",
        "section": "Method detail",
        "text": "Set the face vertices.\nCoordinates of all points [p1x p1y p1z p2x p2y p2z …].\nFace feature.\nSet the facets.\nIndexes of points for all triangles (t1_1 t1_2 t1_3 t2_1 t2_2 t2_3 …)\nFace feature.\nSet the face normals.\nNormal vectors for all points [n1x n1y n1z n2x n2y n2z …]\nFace feature.\nReturn the string representation of the face.\nSave feature: send the local data to the speos server database.\nFace feature.\nReset feature: override local data by the one from the speos server database.\nFace feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nFace feature.\nMethod detail\nList\npython:float\nansys.speos.core.face.Face\nList\npython:int\nansys.speos.core.face.Face\nList\npython:float\nansys.speos.core.face.Face\nansys.speos.core.face.Face\nansys.speos.core.face.Face\nansys.speos.core.face.Face"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.set_vertices",
        "title": "Face > Method detail > set_vertices",
        "section": "Method detail > set_vertices",
        "text": "Face.set_vertices(values)\n\nSet the face vertices.\n\nParameters\n\nvalues\n\nList[python:float]\n\nCoordinates of all points [p1x p1y p1z p2x p2y p2z …].\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.set_facets",
        "title": "Face > Method detail > set_facets",
        "section": "Method detail > set_facets",
        "text": "Face.set_facets(values)\n\nSet the facets.\n\nParameters\n\nvalues\n\nList[python:int]\n\nIndexes of points for all triangles (t1_1 t1_2 t1_3 t2_1 t2_2 t2_3 …)\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.set_normals",
        "title": "Face > Method detail > set_normals",
        "section": "Method detail > set_normals",
        "text": "Face.set_normals(values)\n\nSet the face normals.\n\nParameters\n\nvalues\n\nList[python:float]\n\nNormal vectors for all points [n1x n1y n1z n2x n2y n2z …]\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.__str__",
        "title": "Face > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Face.__str__()\n\nReturn the string representation of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.commit",
        "title": "Face > Method detail > commit",
        "section": "Method detail > commit",
        "text": "Face.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.reset",
        "title": "Face > Method detail > reset",
        "section": "Method detail > reset",
        "text": "Face.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/face/Face",
        "href": "api/ansys/speos/core/face/Face.html#Face.delete",
        "title": "Face > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Face.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.face.Face\n\nFace feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#pyspeoscustomadapter",
        "title": "PySpeosCustomAdapter",
        "section": "PySpeosCustomAdapter",
        "text": "Bases: logging.LoggerAdapter\nKeeps the reference to the speos instance name dynamic.\nIf we use the standard approach, which is supplying extra input\nto the logger, we would need to keep inputing speos instances\nevery time we do a log.\nUsing adapters, we only need to specify the speos instance that\nwe are referring to once.\nPySpeosCustomAdapter\nPySpeosCustomAdapter\nlogging.LoggerAdapter"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#ansys.speos.core.logger.PySpeosCustomAdapter",
        "title": "PySpeosCustomAdapter > PySpeosCustomAdapter > PySpeosCustomAdapter",
        "section": "PySpeosCustomAdapter > PySpeosCustomAdapter",
        "text": "class ansys.speos.core.logger.PySpeosCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the speos instance name dynamic.\n\nIf we use the standard approach, which is supplying extra input\nto the logger, we would need to keep inputing speos instances\nevery time we do a log.\nUsing adapters, we only need to specify the speos instance that\nwe are referring to once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#overview",
        "title": "PySpeosCustomAdapter > Overview",
        "section": "Overview",
        "text": "process\nProcess extra Arguments.\nlog_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler\nOverview\nprocess\nlog_to_file\nlog_to_stdout\nsetLevel\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#import-detail",
        "title": "PySpeosCustomAdapter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#attribute-detail",
        "title": "PySpeosCustomAdapter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.level",
        "title": "PySpeosCustomAdapter > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "PySpeosCustomAdapter.level = None\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.file_handler",
        "title": "PySpeosCustomAdapter > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "PySpeosCustomAdapter.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.stdout_handler",
        "title": "PySpeosCustomAdapter > Attribute detail > stdout_handler",
        "section": "Attribute detail > stdout_handler",
        "text": "PySpeosCustomAdapter.stdout_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.logger",
        "title": "PySpeosCustomAdapter > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "PySpeosCustomAdapter.logger\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.std_out_handler",
        "title": "PySpeosCustomAdapter > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "PySpeosCustomAdapter.std_out_handler\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#method-detail",
        "title": "PySpeosCustomAdapter > Method detail",
        "section": "Method detail",
        "text": "Process extra Arguments.\nLog message\nextra Arguments dictionary\nMessage and processed extra arguments\nAdd a file handler to the logger.\nName of the file to write log messages to. The default is\n\"pyspeos.log\".\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nAdd a standard output handler to the logger.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nChange the log level of the object and the attached handlers.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nMethod detail\npython:str\npython:dict\npython:tuple\npython:str\npython:dict\npython:str\noptional\n\"pyspeos.log\"\npython:str\noptional\n10\nlogging.DEBUG\npython:int\noptional\n10\nlogging.DEBUG\npython:int\noptional\n10\nlogging.DEBUG"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.process",
        "title": "PySpeosCustomAdapter > Method detail > process",
        "section": "Method detail > process",
        "text": "PySpeosCustomAdapter.process(msg, kwargs)\n\nProcess extra Arguments.\n\nParameters\n\nmsg\n\npython:str\n\nLog message\n\nkwargs\n\npython:dict\n\nextra Arguments dictionary\n\nReturns\n\npython:tuple[python:str, python:dict]\n\nMessage and processed extra arguments\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.log_to_file",
        "title": "PySpeosCustomAdapter > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "PySpeosCustomAdapter.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is\n\"pyspeos.log\".\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.log_to_stdout",
        "title": "PySpeosCustomAdapter > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "PySpeosCustomAdapter.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosCustomAdapter",
        "href": "api/ansys/speos/core/logger/PySpeosCustomAdapter.html#PySpeosCustomAdapter.setLevel",
        "title": "PySpeosCustomAdapter > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "PySpeosCustomAdapter.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/index",
        "href": "api/ansys/speos/core/kernel/crud/index.html#the-crudpy-module",
        "title": "The crud.py module",
        "section": "The crud.py module",
        "text": "The crud.py module\ncrud.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/index",
        "href": "api/ansys/speos/core/kernel/crud/index.html#summary",
        "title": "The crud.py module > Summary",
        "section": "Summary",
        "text": "CrudStub\nWraps a speos gRPC CRUD connection.\nCrudItem\nItem of a database.\nSummary\nCrudStub\nCrudItem"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/index",
        "href": "api/ansys/speos/core/kernel/crud/index.html#description",
        "title": "The crud.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/index",
        "href": "api/ansys/speos/core/kernel/job/index.html#the-jobpy-module",
        "title": "The job.py module",
        "section": "The job.py module",
        "text": "The job.py module\njob.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/index",
        "href": "api/ansys/speos/core/kernel/job/index.html#summary",
        "title": "The job.py module > Summary",
        "section": "Summary",
        "text": "JobLink\nLink object for job in database.\nJobStub\nDatabase interactions for job.\nProtoJob\nJob protobuf class : ansys.api.speos.job.v2.job_pb2.Job\nSummary\nJobLink\nJobStub\nProtoJob"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/index",
        "href": "api/ansys/speos/core/kernel/job/index.html#description",
        "title": "The job.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/index",
        "href": "api/ansys/speos/core/kernel/job/index.html#module-detail",
        "title": "The job.py module > Module detail",
        "section": "Module detail",
        "text": "Job protobuf class : ansys.api.speos.job.v2.job_pb2.Job\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/index",
        "href": "api/ansys/speos/core/kernel/job/index.html#job.ProtoJob",
        "title": "The job.py module > Module detail > ProtoJob",
        "section": "Module detail > ProtoJob",
        "text": "job.ProtoJob\n\nJob protobuf class : ansys.api.speos.job.v2.job_pb2.Job\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "The logger.py module\nlogger.py"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "PySpeosCustomAdapter\nKeeps the reference to the speos instance name dynamic.\nPySpeosPercentStyle\nCustomized PercentStyle class for overwriting default format styles.\nPySpeosFormatter\nProvides the customized Formatter class for overwriting default format styles.\nInstanceFilter\nEnsures that the instance_name record always exists.\nLogger\nProvides the logger used for each PySpeos session.\naddfile_handler\nAdd a file handler to the input.\nadd_stdout_handler\nAdd a standout handler to the logger.\nstring_to_loglevel\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG\nSummary\nPySpeosCustomAdapter\nPySpeosPercentStyle\nPercentStyle\nPySpeosFormatter\nFormatter\nInstanceFilter\ninstance_name\nLogger\naddfile_handler\nadd_stdout_handler\nstring_to_loglevel\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Logging module.\nThis module supplies a general framework for logging in PySpeos.  This module is\nbuilt upon logging library\nand it does not intend to replace it but rather provide a way to interact between\nlogging and pyspeos.\nThe loggers used in the module include the name of the instance, which\nis intended to be unique. This name is printed in all active\noutputs and is used to track the different PySpeos instances.\nDescription\nlogging"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#usage",
        "title": "The logger.py module > Usage",
        "section": "Usage",
        "text": "Usage"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#global-logger",
        "title": "The logger.py module > Global logger",
        "section": "Global logger",
        "text": "There is a global logger named pyspeos_global that is created at\nansys.speos.core.__init__.  If you want to use this global logger,\nyou must call it at the top of your module:\nYou can also rename it to avoid conflicts with other loggers (if any):\nIt should be noticed that the default logging level of LOG is ERROR.\nYou can change this and output lower-level messages with:\nAlternatively, you can ensure all the handlers are set to the input log\nlevel with:\nBy default, this logger does not log to a file. If you want to do so,\nyou can add a file handler with:\nThis sets the logger to be redirected also to this file. If you want\nto change the characteristics of this global logger from the beginning\nof the execution, you must edit the __init__ file in the directory\nansys.speos.core.\nTo log using this logger, call the desired method as a normal logger with:\nGlobal logger\npyspeos_global\nansys.speos.core.__init__\nLOG\nERROR\n__init__\nansys.speos.core"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#instance-logger",
        "title": "The logger.py module > Instance Logger",
        "section": "Instance Logger",
        "text": "Every time an instance of ansys.speos.core.speos.Speos\nis created, a logger is created and stored in LOG._instances. This field is a\ndictionary where the key is the name of the created logger.\nThese instance loggers inherit the pyspeos_global output handlers and\nlogging level unless otherwise specified. The way this logger works is very\nsimilar to the global logger. If you want to add a file handler, you can use\nthe log_to_file() method. If you want\nto change the log level, you can use the logger.Logging.setLevel() method.\nYou can use this logger like this:\nInstance Logger\nansys.speos.core.speos.Speos\nLOG._instances\npyspeos_global\nlog_to_file()\nlogger.Logging.setLevel()"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#other-loggers",
        "title": "The logger.py module > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using a Python logging library as\nyou would do in any other script. There would be no conflicts between\nthese loggers.\nOther loggers\nlogging"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": "Add a file handler to the input.\nLogger to add the file handler to.\nName of the output file. The default is \"pyspeos.log\".\nLevel of logging. The default is LOG_LEVEL.\nWhether to write the headers to the file. The default is False.\nLogger or Logger object.\nAdd a standout handler to the logger.\nLogger to add the file handler to.\nlogging.DEBUG level is used.\nWhether to write headers to the file. The default is False.\nLogger or Logger object.\nModule detail\nlogging.Logger\nlogging.Logger\noptional\npython:str\noptional\n\"pyspeos.log\"\npython:int\noptional\nLOG_LEVEL\noptional\nFalse\nlogger\nlogging.Logger\nlogging.Logger\nin\noptional\n10\nlogging.DEBUG\noptional\nFalse\nlogger"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.addfile_handler",
        "title": "The logger.py module > Module detail > addfile_handler",
        "section": "Module detail > addfile_handler",
        "text": "logger.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger, optional\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is \"pyspeos.log\".\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is LOG_LEVEL.\n\nwrite_headers\n\nbool, optional\n\nWhether to write the headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.add_stdout_handler",
        "title": "The logger.py module > Module detail > add_stdout_handler",
        "section": "Module detail > add_stdout_handler",
        "text": "logger.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a standout handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\nin, optional\n\nLevel of logging. The default is 10, in which case the\n\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger or Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.LOG_LEVEL",
        "title": "The logger.py module > Module detail > LOG_LEVEL",
        "section": "Module detail > LOG_LEVEL",
        "text": "logger.LOG_LEVEL = 10\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.FILE_NAME",
        "title": "The logger.py module > Module detail > FILE_NAME",
        "section": "Module detail > FILE_NAME",
        "text": "logger.FILE_NAME = 'pyspeos.log'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.DEBUG",
        "title": "The logger.py module > Module detail > DEBUG",
        "section": "Module detail > DEBUG",
        "text": "logger.DEBUG = 10\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.INFO",
        "title": "The logger.py module > Module detail > INFO",
        "section": "Module detail > INFO",
        "text": "logger.INFO = 20\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.WARN",
        "title": "The logger.py module > Module detail > WARN",
        "section": "Module detail > WARN",
        "text": "logger.WARN = 30\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.ERROR",
        "title": "The logger.py module > Module detail > ERROR",
        "section": "Module detail > ERROR",
        "text": "logger.ERROR = 40\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.CRITICAL",
        "title": "The logger.py module > Module detail > CRITICAL",
        "section": "Module detail > CRITICAL",
        "text": "logger.CRITICAL = 50\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.STDOUT_MSG_FORMAT",
        "title": "The logger.py module > Module detail > STDOUT_MSG_FORMAT",
        "section": "Module detail > STDOUT_MSG_FORMAT",
        "text": "logger.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.FILE_MSG_FORMAT",
        "title": "The logger.py module > Module detail > FILE_MSG_FORMAT",
        "section": "Module detail > FILE_MSG_FORMAT",
        "text": "logger.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.DEFAULT_STDOUT_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_STDOUT_HEADER",
        "section": "Module detail > DEFAULT_STDOUT_HEADER",
        "text": "logger.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.DEFAULT_FILE_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_FILE_HEADER",
        "section": "Module detail > DEFAULT_FILE_HEADER",
        "text": "logger.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.NEW_SESSION_HEADER",
        "title": "The logger.py module > Module detail > NEW_SESSION_HEADER",
        "section": "Module detail > NEW_SESSION_HEADER",
        "text": "logger.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.LOG",
        "title": "The logger.py module > Module detail > LOG",
        "section": "Module detail > LOG",
        "text": "logger.LOG\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/index",
        "href": "api/ansys/speos/core/logger/index.html#logger.string_to_loglevel",
        "title": "The logger.py module > Module detail > string_to_loglevel",
        "section": "Module detail > string_to_loglevel",
        "text": "logger.string_to_loglevel\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#color",
        "title": "Color",
        "section": "Color",
        "text": "Mode of camera sensor : Color.\nResults will be available in color according to the White Balance mode.\nBy default, a balance mode none is chosen (referred as the basic conversion).\nSensorCameraColorModeColor protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nmode_color (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_mode_color method available in photometric class.\nColor\nColor\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#ansys.speos.core.sensor.SensorCamera.Photometric.Color",
        "title": "Color > Color > Color",
        "section": "Color > Color",
        "text": "class ansys.speos.core.sensor.SensorCamera.Photometric.Color(mode_color, default_values=True, stable_ctr=False)\n\nMode of camera sensor : Color.\n\nResults will be available in color according to the White Balance mode.\nBy default, a balance mode none is chosen (referred as the basic conversion).\n\nParameters\n\nmode_color\n\nansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor\n\nSensorCameraColorModeColor protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nmode_color (ansys.api.speos.sensor.v1.camera_sensor_pb2.SensorCameraColorModeColor)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_mode_color method available in photometric class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#overview",
        "title": "Color > Overview",
        "section": "Overview",
        "text": "set_red_spectrum_file_uri\nSet the red spectrum.\nset_green_spectrum_file_uri\nSet the green spectrum.\nset_blue_spectrum_file_uri\nSet the blue spectrum.\nset_balance_mode_none\nSet the balance mode as none.\nset_balance_mode_grey_world\nSet the balance mode as grey world.\nset_balance_mode_user_white\nSet the balance mode as user white.\nset_balance_mode_display_primaries\nSet the balance mode as display primaries.\nOverview\nset_red_spectrum_file_uri\nset_green_spectrum_file_uri\nset_blue_spectrum_file_uri\nset_balance_mode_none\nset_balance_mode_grey_world\nset_balance_mode_user_white\nset_balance_mode_display_primaries"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#import-detail",
        "title": "Color > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#method-detail",
        "title": "Color > Method detail",
        "section": "Method detail",
        "text": "Set the red spectrum.\nRed spectrum file. It is expressed in a .spectrum file.\nColor mode.\nSet the green spectrum.\nGreen spectrum file. It is expressed in a .spectrum file.\nColor mode.\nSet the blue spectrum.\nBlue spectrum file. It is expressed in a .spectrum file.\nColor mode.\nSet the balance mode as none.\nThe spectral transmittance of the optical system and the spectral sensitivity for each channel are applied\nto the detected spectral image before the conversion in a three-channel result.\nThis method is referred to as the basic conversion.\nColor mode.\nSet the balance mode as grey world.\nThe grey world assumption states that the content of the image is grey on average.\nThis method converts spectral results in a three-channel result with the basic conversion.\nThen it computes and applies coefficients to the red, green and blue images to make sure their averages are equal.\nColor mode.\nSet the balance mode as user white.\nIn addition to the basic treatment, it allows to apply specific coefficients to the red, green, blue images.\nBalance UserWhite mode.\nSet the balance mode as display primaries.\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display devices into account.\nWith this method, displayed results are similar to what the camera really gets.\nBalance DisplayPrimaries mode.\nMethod detail\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color\npython:str\nansys.speos.core.sensor.SensorCamera.Photometric.Color\nansys.speos.core.sensor.SensorCamera.Photometric.Color\nansys.speos.core.sensor.SensorCamera.Photometric.Color\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_red_spectrum_file_uri",
        "title": "Color > Method detail > set_red_spectrum_file_uri",
        "section": "Method detail > set_red_spectrum_file_uri",
        "text": "Color.set_red_spectrum_file_uri(uri)\n\nSet the red spectrum.\n\nParameters\n\nuri\n\npython:str\n\nRed spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_green_spectrum_file_uri",
        "title": "Color > Method detail > set_green_spectrum_file_uri",
        "section": "Method detail > set_green_spectrum_file_uri",
        "text": "Color.set_green_spectrum_file_uri(uri)\n\nSet the green spectrum.\n\nParameters\n\nuri\n\npython:str\n\nGreen spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_blue_spectrum_file_uri",
        "title": "Color > Method detail > set_blue_spectrum_file_uri",
        "section": "Method detail > set_blue_spectrum_file_uri",
        "text": "Color.set_blue_spectrum_file_uri(uri)\n\nSet the blue spectrum.\n\nParameters\n\nuri\n\npython:str\n\nBlue spectrum file. It is expressed in a .spectrum file.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_balance_mode_none",
        "title": "Color > Method detail > set_balance_mode_none",
        "section": "Method detail > set_balance_mode_none",
        "text": "Color.set_balance_mode_none()\n\nSet the balance mode as none.\n\nThe spectral transmittance of the optical system and the spectral sensitivity for each channel are applied\nto the detected spectral image before the conversion in a three-channel result.\nThis method is referred to as the basic conversion.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_balance_mode_grey_world",
        "title": "Color > Method detail > set_balance_mode_grey_world",
        "section": "Method detail > set_balance_mode_grey_world",
        "text": "Color.set_balance_mode_grey_world()\n\nSet the balance mode as grey world.\n\nThe grey world assumption states that the content of the image is grey on average.\nThis method converts spectral results in a three-channel result with the basic conversion.\nThen it computes and applies coefficients to the red, green and blue images to make sure their averages are equal.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color\n\nColor mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_balance_mode_user_white",
        "title": "Color > Method detail > set_balance_mode_user_white",
        "section": "Method detail > set_balance_mode_user_white",
        "text": "Color.set_balance_mode_user_white()\n\nSet the balance mode as user white.\n\nIn addition to the basic treatment, it allows to apply specific coefficients to the red, green, blue images.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeUserWhite\n\nBalance UserWhite mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#Color.set_balance_mode_display_primaries",
        "title": "Color > Method detail > set_balance_mode_display_primaries",
        "section": "Method detail > set_balance_mode_display_primaries",
        "text": "Color.set_balance_mode_display_primaries()\n\nSet the balance mode as display primaries.\n\nSpectral results are converted in a three-channel result.\nThen a post-treatment is realized to take the distortion induced by the display devices into account.\nWith this method, displayed results are similar to what the camera really gets.\n\nReturns\n\nansys.speos.core.sensor.SensorCamera.Photometric.Color.BalanceModeDisplayPrimaries\n\nBalance DisplayPrimaries mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color",
        "href": "api/ansys/speos/core/sensor/SensorCamera.Photometric.Color.html#classes",
        "title": "Color > Classes",
        "section": "Classes",
        "text": "BalanceModeUserWhite\nBalanceMode : UserWhite.\nBalanceModeDisplayPrimaries\nBalanceMode : DisplayPrimaries.\nClasses\nBalanceModeUserWhite\nBalanceModeDisplayPrimaries"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/index",
        "href": "api/ansys/speos/core/kernel/sop_template/index.html#the-sop_templatepy-module",
        "title": "The sop_template.py module",
        "section": "The sop_template.py module",
        "text": "The sop_template.py module\nsop_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/index",
        "href": "api/ansys/speos/core/kernel/sop_template/index.html#summary",
        "title": "The sop_template.py module > Summary",
        "section": "Summary",
        "text": "SOPTemplateLink\nLink object for Surface Optical Properties template in database.\nSOPTemplateStub\nDatabase interactions for Surface Optical Properties templates.\nProtoSOPTemplate\nSOPTemplate protobuf class : ansys.api.speos.sop.v1.sop_pb2.SOPTemplate\nSummary\nSOPTemplateLink\nSOPTemplateStub\nProtoSOPTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/index",
        "href": "api/ansys/speos/core/kernel/sop_template/index.html#description",
        "title": "The sop_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/index",
        "href": "api/ansys/speos/core/kernel/sop_template/index.html#module-detail",
        "title": "The sop_template.py module > Module detail",
        "section": "Module detail",
        "text": "SOPTemplate protobuf class : ansys.api.speos.sop.v1.sop_pb2.SOPTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/sop_template/index",
        "href": "api/ansys/speos/core/kernel/sop_template/index.html#sop_template.ProtoSOPTemplate",
        "title": "The sop_template.py module > Module detail > ProtoSOPTemplate",
        "section": "Module detail > ProtoSOPTemplate",
        "text": "sop_template.ProtoSOPTemplate\n\nSOPTemplate protobuf class : ansys.api.speos.sop.v1.sop_pb2.SOPTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/index",
        "href": "api/ansys/speos/core/geo_ref/index.html#the-geo_refpy-module",
        "title": "The geo_ref.py module",
        "section": "The geo_ref.py module",
        "text": "The geo_ref.py module\ngeo_ref.py"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/index",
        "href": "api/ansys/speos/core/geo_ref/index.html#summary",
        "title": "The geo_ref.py module > Summary",
        "section": "Summary",
        "text": "GeoRef\nRepresent a CAD object.\nSummary\nGeoRef"
    },
    {
        "objectID": "api/ansys/speos/core/geo_ref/index",
        "href": "api/ansys/speos/core/geo_ref/index.html#description",
        "title": "The geo_ref.py module > Description",
        "section": "Description",
        "text": "Provides interface to link Speos Objects to Geometries.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#wavelengthsrange",
        "title": "WavelengthsRange",
        "section": "WavelengthsRange",
        "text": "Range of wavelengths.\nBy default, a range from 400nm to 700nm is chosen, with a sampling of 13.\nWavelengths range protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nwavelengths_range (ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_wavelengths_range method available in sensor classes.\nWavelengthsRange\nWavelengthsRange\nansys.api.speos.sensor.v1.common_pb2.WavelengthsRange"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#ansys.speos.core.sensor.BaseSensor.WavelengthsRange",
        "title": "WavelengthsRange > WavelengthsRange > WavelengthsRange",
        "section": "WavelengthsRange > WavelengthsRange",
        "text": "class ansys.speos.core.sensor.BaseSensor.WavelengthsRange(wavelengths_range, default_values=True, stable_ctr=False)\n\nRange of wavelengths.\n\nBy default, a range from 400nm to 700nm is chosen, with a sampling of 13.\n\nParameters\n\nwavelengths_range\n\nansys.api.speos.sensor.v1.common_pb2.WavelengthsRange\n\nWavelengths range protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nwavelengths_range (ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_wavelengths_range method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#overview",
        "title": "WavelengthsRange > Overview",
        "section": "Overview",
        "text": "set_start\nSet the minimum wavelength of the range.\nset_end\nSet the maximum wavelength of the range.\nset_sampling\nSet the sampling of wavelengths range.\nOverview\nset_start\nset_end\nset_sampling"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#import-detail",
        "title": "WavelengthsRange > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#method-detail",
        "title": "WavelengthsRange > Method detail",
        "section": "Method detail",
        "text": "Set the minimum wavelength of the range.\nMinimum wavelength (nm).\nBy default, 400.\nWavelengthsRange.\nSet the maximum wavelength of the range.\nMaximum wavelength (nm).\nBy default, 700.\nWavelengthsRange.\nSet the sampling of wavelengths range.\nNumber of wavelengths to be taken into account between the minimum and maximum wavelengths range.\nBy default, 13.\nWavelengthsRange.\nMethod detail\npython:float\n400\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\npython:float\n700\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\npython:int\n13\nansys.speos.core.sensor.BaseSensor.WavelengthsRange"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#WavelengthsRange.set_start",
        "title": "WavelengthsRange > Method detail > set_start",
        "section": "Method detail > set_start",
        "text": "WavelengthsRange.set_start(value=400)\n\nSet the minimum wavelength of the range.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum wavelength (nm).\nBy default, 400.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#WavelengthsRange.set_end",
        "title": "WavelengthsRange > Method detail > set_end",
        "section": "Method detail > set_end",
        "text": "WavelengthsRange.set_end(value=700)\n\nSet the maximum wavelength of the range.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum wavelength (nm).\nBy default, 700.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange",
        "href": "api/ansys/speos/core/sensor/BaseSensor.WavelengthsRange.html#WavelengthsRange.set_sampling",
        "title": "WavelengthsRange > Method detail > set_sampling",
        "section": "Method detail > set_sampling",
        "text": "WavelengthsRange.set_sampling(value=13)\n\nSet the sampling of wavelengths range.\n\nParameters\n\nvalue\n\npython:int\n\nNumber of wavelengths to be taken into account between the minimum and maximum wavelengths range.\nBy default, 13.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.WavelengthsRange\n\nWavelengthsRange.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#simulationinverse",
        "title": "SimulationInverse",
        "section": "SimulationInverse",
        "text": "Bases: BaseSimulation\nType of simulation : Inverse.\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to False,\nsplitting is set to False,\nnumber of gathering rays per source is set to 1,\nmaximum gathering error is set to 0,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 5 passes, with an automatic save frequency of 1800s.\nProject in which simulation shall be created.\nName of the simulation.\nDescription of the Simulation.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nproject (SimulationInverse.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\ndefault_values (bool)\nSimulationInverse\nSimulationInverse\nBaseSimulation\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#ansys.speos.core.simulation.SimulationInverse",
        "title": "SimulationInverse > SimulationInverse > SimulationInverse",
        "section": "SimulationInverse > SimulationInverse",
        "text": "class ansys.speos.core.simulation.SimulationInverse(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of simulation : Inverse.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to False,\nsplitting is set to False,\nnumber of gathering rays per source is set to 1,\nmaximum gathering error is set to 0,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 5 passes, with an automatic save frequency of 1800s.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationInverse.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#overview",
        "title": "SimulationInverse > Overview",
        "section": "Overview",
        "text": "set_geom_distance_tolerance\nSet the geometry distance tolerance.\nset_max_impact\nDefine a value to determine the maximum number of ray impacts during propagation.\nset_weight\nActivate weight. Highly recommended to fill.\nset_weight_none\nDeactivate weight.\nset_colorimetric_standard_CIE_1931\nSet the colorimetric standard to CIE 1931.\nset_colorimetric_standard_CIE_1964\nSet the colorimetric standard to CIE 1964.\nset_dispersion\nActivate/Deactivate the dispersion calculation.\nset_splitting\nActivate/Deactivate the splitting.\nset_number_of_gathering_rays_per_source\nSet the number of gathering rays per source.\nset_maximum_gathering_error\nSet the maximum gathering error.\nset_ambient_material_file_uri\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nset_stop_condition_passes_number\nTo stop the simulation after a certain number of passes. Set None as value to have no condition about passes.\nset_stop_condition_duration\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\nset_automatic_save_frequency\nDefine a backup interval (s).\nOverview\nset_geom_distance_tolerance\nset_max_impact\nset_weight\nset_weight_none\nset_colorimetric_standard_CIE_1931\nset_colorimetric_standard_CIE_1964\nset_dispersion\nset_splitting\nset_number_of_gathering_rays_per_source\nset_maximum_gathering_error\nset_ambient_material_file_uri\nset_stop_condition_passes_number\nset_stop_condition_duration\nset_automatic_save_frequency"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#import-detail",
        "title": "SimulationInverse > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#method-detail",
        "title": "SimulationInverse > Method detail",
        "section": "Method detail",
        "text": "Set the geometry distance tolerance.\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\nInverse simulation\nDefine a value to determine the maximum number of ray impacts during propagation.\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\nThe maximum number of impacts.\nBy default, 100.\nInverse simulation\nActivate weight. Highly recommended to fill.\nSimulation.Weight\nDeactivate weight.\nInverse simulation\nSet the colorimetric standard to CIE 1931.\n2 degrees CIE Standard Colorimetric Observer Data.\nInverse simulation\nSet the colorimetric standard to CIE 1964.\n10 degrees CIE Standard Colorimetric Observer Data.\nInverse simulation\nActivate/Deactivate the dispersion calculation.\nActivate/Deactivate.\nBy default, False, means deactivate.\nInverse simulation\nActivate/Deactivate the splitting.\nTo split each propagated ray into several paths at their first impact after leaving the observer point.\nActivate/Deactivate.\nBy default, False, means deactivate.\nInverse simulation\nSet the number of gathering rays per source.\nThis number pilots the number of shadow rays to target at each source.\nBy default, 1.\nInverse simulation\nSet the maximum gathering error.\nThis value defines the level below which a source can be neglected.\nBy default, 0, means that no approximation will be done.\nInverse simulation\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\nInverse simulation\nTo stop the simulation after a certain number of passes. Set None as value to have no condition about passes.\nThe number of passes requested. Or None if no condition about passes.\nBy default, 5.\nInverse simulation\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\nInverse simulation\nDefine a backup interval (s).\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\nBackup interval (s).\nBy default, 1800.\nInverse simulation\nMethod detail\npython:float\n0.01\nansys.speos.core.simulation.SimulationInverse\npython:int\n100\nansys.speos.core.simulation.SimulationInverse\nansys.speos.core.simulation.BaseSimulation.Weight\nansys.speos.core.simulation.SimulationInverse\nansys.speos.core.simulation.SimulationInverse\nansys.speos.core.simulation.SimulationInverse\nFalse\nansys.speos.core.simulation.SimulationInverse\nFalse\nansys.speos.core.simulation.SimulationInverse\npython:int\n1\nansys.speos.core.simulation.SimulationInverse\npython:int\n0\nansys.speos.core.simulation.SimulationInverse\npython:str\n\"\"\nansys.speos.core.simulation.SimulationInverse\npython:int\noptional\n5\nansys.speos.core.simulation.SimulationInverse\npython:int\noptional\nNone\nansys.speos.core.simulation.SimulationInverse\npython:int\noptional\n1800\nansys.speos.core.simulation.SimulationInverse"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_geom_distance_tolerance",
        "title": "SimulationInverse > Method detail > set_geom_distance_tolerance",
        "section": "Method detail > set_geom_distance_tolerance",
        "text": "SimulationInverse.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_max_impact",
        "title": "SimulationInverse > Method detail > set_max_impact",
        "section": "Method detail > set_max_impact",
        "text": "SimulationInverse.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_weight",
        "title": "SimulationInverse > Method detail > set_weight",
        "section": "Method detail > set_weight",
        "text": "SimulationInverse.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nSimulation.Weight\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_weight_none",
        "title": "SimulationInverse > Method detail > set_weight_none",
        "section": "Method detail > set_weight_none",
        "text": "SimulationInverse.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_colorimetric_standard_CIE_1931",
        "title": "SimulationInverse > Method detail > set_colorimetric_standard_CIE_1931",
        "section": "Method detail > set_colorimetric_standard_CIE_1931",
        "text": "SimulationInverse.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_colorimetric_standard_CIE_1964",
        "title": "SimulationInverse > Method detail > set_colorimetric_standard_CIE_1964",
        "section": "Method detail > set_colorimetric_standard_CIE_1964",
        "text": "SimulationInverse.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_dispersion",
        "title": "SimulationInverse > Method detail > set_dispersion",
        "section": "Method detail > set_dispersion",
        "text": "SimulationInverse.set_dispersion(value=False)\n\nActivate/Deactivate the dispersion calculation.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_splitting",
        "title": "SimulationInverse > Method detail > set_splitting",
        "section": "Method detail > set_splitting",
        "text": "SimulationInverse.set_splitting(value=False)\n\nActivate/Deactivate the splitting.\n\nTo split each propagated ray into several paths at their first impact after leaving the observer point.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, False, means deactivate.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_number_of_gathering_rays_per_source",
        "title": "SimulationInverse > Method detail > set_number_of_gathering_rays_per_source",
        "section": "Method detail > set_number_of_gathering_rays_per_source",
        "text": "SimulationInverse.set_number_of_gathering_rays_per_source(value=1)\n\nSet the number of gathering rays per source.\n\nParameters\n\nvalue\n\npython:int\n\nThis number pilots the number of shadow rays to target at each source.\nBy default, 1.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_maximum_gathering_error",
        "title": "SimulationInverse > Method detail > set_maximum_gathering_error",
        "section": "Method detail > set_maximum_gathering_error",
        "text": "SimulationInverse.set_maximum_gathering_error(value=0)\n\nSet the maximum gathering error.\n\nParameters\n\nvalue\n\npython:int\n\nThis value defines the level below which a source can be neglected.\nBy default, 0, means that no approximation will be done.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_ambient_material_file_uri",
        "title": "SimulationInverse > Method detail > set_ambient_material_file_uri",
        "section": "Method detail > set_ambient_material_file_uri",
        "text": "SimulationInverse.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_stop_condition_passes_number",
        "title": "SimulationInverse > Method detail > set_stop_condition_passes_number",
        "section": "Method detail > set_stop_condition_passes_number",
        "text": "SimulationInverse.set_stop_condition_passes_number(value=5)\n\nTo stop the simulation after a certain number of passes. Set None as value to have no condition about passes.\n\nParameters\n\nvalue\n\npython:int, optional\n\nThe number of passes requested. Or None if no condition about passes.\nBy default, 5.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_stop_condition_duration",
        "title": "SimulationInverse > Method detail > set_stop_condition_duration",
        "section": "Method detail > set_stop_condition_duration",
        "text": "SimulationInverse.set_stop_condition_duration(value=None)\n\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\n\nParameters\n\nvalue\n\npython:int, optional\n\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationInverse",
        "href": "api/ansys/speos/core/simulation/SimulationInverse.html#SimulationInverse.set_automatic_save_frequency",
        "title": "SimulationInverse > Method detail > set_automatic_save_frequency",
        "section": "Method detail > set_automatic_save_frequency",
        "text": "SimulationInverse.set_automatic_save_frequency(value=1800)\n\nDefine a backup interval (s).\n\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\n\nParameters\n\nvalue\n\npython:int, optional\n\nBackup interval (s).\nBy default, 1800.\n\nReturns\n\nansys.speos.core.simulation.SimulationInverse\n\nInverse simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#how-to-create-a-project",
        "title": "Examples > How to create a project",
        "section": "How to create a project",
        "text": "This tutorial demonstrates how to create a project.\nHow to create a project"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#what-is-a-project",
        "title": "Examples > How to create a project > What is a project?",
        "section": "What is a project?",
        "text": "A project is a speos simulation container that includes parts, material properties, sensor, sources and simulations.\nIn this tutorial you will learn how to create a project from scratch or from a pre-defined .speos file.\nWhat is a project?"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create a project > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#new-empty-project",
        "title": "Examples > How to create a project > New empty project",
        "section": "New empty project",
        "text": "An empty project can be created by only passing speos rpc server to the Project class.\ncreate feature - e.g. source\ncreate feature - e.g. sensor\ncreate feature - e.g. optical property\nNew empty project"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#read-project",
        "title": "Examples > How to create a project > Read Project",
        "section": "Read Project",
        "text": "User can read the content of a project via simplily printing the project\nOr, user can use the find_key method to read a specific feature:\nRead Project"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#find-a-feature-inside-a-project",
        "title": "Examples > How to create a project > Find a feature inside a project",
        "section": "Find a feature inside a project",
        "text": "Find a feature inside a project"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#use-find-method-with-an-exact-name",
        "title": "Examples > How to create a project > Use find method with an exact name",
        "section": "Use find method with an exact name",
        "text": "If no feature is found, an empty list is returned.\nUse find method with an exact name"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#use-find-method-with-feature-type",
        "title": "Examples > How to create a project > Use find method with feature type",
        "section": "Use find method with feature type",
        "text": "Here a wrong type is given: no source is called Sensor.1 in the project\nUse find method with feature type"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#use-find-method-with-approximation-name-with-regex",
        "title": "Examples > How to create a project > Use find method with approximation name with regex",
        "section": "Use find method with approximation name with regex",
        "text": "find a feature with name starting with Mat\nfind all features without defining any name\nUse find method with approximation name with regex"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#delete",
        "title": "Examples > How to create a project > Delete",
        "section": "Delete",
        "text": "This erases the scene content in server database.\nThis deletes also each feature of the project\nAs the features were deleted just above -> this returns an empty vector\nDelete"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#create-project-from-pre-defined-speos-project",
        "title": "Examples > How to create a project > Create project from pre-defined speos project",
        "section": "Create project from pre-defined speos project",
        "text": "Via passing the .speos/.sv5 file path to the Project class.\nCreate project from pre-defined speos project"
    },
    {
        "objectID": "examples/core/project",
        "href": "examples/core/project.html#preview-the-part-information",
        "title": "Examples > How to create a project > Preview the part information",
        "section": "Preview the part information",
        "text": "User can check the project part using preview method.\nuse find_key method to find specific information\nUse find method to retrieve feature:\ne.g. surface source\nmodify the surface source, e.g. surface source wavelength:\nRetrieve a simulation feature:\nPreview simulation result (only windows)\nPreview the part information"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#crudstub",
        "title": "CrudStub",
        "section": "CrudStub",
        "text": "Wraps a speos gRPC CRUD connection.\nThis class is used as base class for all Speos databases interactions.\nBetter use directly those inherited classes like SOPTemplateStub, SpectrumStub, …\nCrudStub\nCrudStub"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#ansys.speos.core.kernel.crud.CrudStub",
        "title": "CrudStub > CrudStub > CrudStub",
        "section": "CrudStub > CrudStub",
        "text": "class ansys.speos.core.kernel.crud.CrudStub(stub)\n\nWraps a speos gRPC CRUD connection.\n\nThis class is used as base class for all Speos databases interactions.\nBetter use directly those inherited classes like SOPTemplateStub, SpectrumStub, …\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#overview",
        "title": "CrudStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#import-detail",
        "title": "CrudStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#method-detail",
        "title": "CrudStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nGet an existing entry.\nChange an existing entry.\nRemove an existing entry.\nList existing entries.\nMethod detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#CrudStub.create",
        "title": "CrudStub > Method detail > create",
        "section": "Method detail > create",
        "text": "CrudStub.create(request)\n\nCreate a new entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#CrudStub.read",
        "title": "CrudStub > Method detail > read",
        "section": "Method detail > read",
        "text": "CrudStub.read(request)\n\nGet an existing entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#CrudStub.update",
        "title": "CrudStub > Method detail > update",
        "section": "Method detail > update",
        "text": "CrudStub.update(request)\n\nChange an existing entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#CrudStub.delete",
        "title": "CrudStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "CrudStub.delete(request)\n\nRemove an existing entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudStub",
        "href": "api/ansys/speos/core/kernel/crud/CrudStub.html#CrudStub.list",
        "title": "CrudStub > Method detail > list",
        "section": "Method detail > list",
        "text": "CrudStub.list(request)\n\nList existing entries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#bodylink",
        "title": "BodyLink",
        "section": "BodyLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for a body in database.\nDatabase to link to.\nKey of the body in the database.\nkey (str)\nBodyLink\nBodyLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.body.BodyStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#ansys.speos.core.kernel.body.BodyLink",
        "title": "BodyLink > BodyLink > BodyLink",
        "section": "BodyLink > BodyLink",
        "text": "class ansys.speos.core.kernel.body.BodyLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for a body in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.body.BodyStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the body in the database.\n\nParameters\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#overview",
        "title": "BodyLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the body.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#import-detail",
        "title": "BodyLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#method-detail",
        "title": "BodyLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the body.\nGet the datamodel from database.\nBody datamodel.\nChange datamodel in database.\nNew body datamodel.\nRemove datamodel from database.\nMethod detail\nbody.Body\nbody.Body"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#BodyLink.__str__",
        "title": "BodyLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "BodyLink.__str__()\n\nReturn the string representation of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#BodyLink.get",
        "title": "BodyLink > Method detail > get",
        "section": "Method detail > get",
        "text": "BodyLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nbody.Body\n\nBody datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#BodyLink.set",
        "title": "BodyLink > Method detail > set",
        "section": "Method detail > set",
        "text": "BodyLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nbody.Body\n\nNew body datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/BodyLink",
        "href": "api/ansys/speos/core/kernel/body/BodyLink.html#BodyLink.delete",
        "title": "BodyLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "BodyLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#dimensions",
        "title": "Dimensions",
        "section": "Dimensions",
        "text": "Dimensions of the sensor.\nBy default, for both x and y axis: from -50mm to 50mm is chosen, with a sampling of 100.\nSensorDimensions protobuf object to modify.\nUses default values when True.\nVariable to indicate if usage is inside class scope\nsensor_dimensions (ansys.api.speos.sensor.v1.common_pb2.SensorDimensions)\ndefault_values (bool)\nstable_ctr (bool)\nDo not instantiate this class yourself, use set_dimensions method available in sensor classes.\nDimensions\nDimensions\nansys.api.speos.sensor.v1.common_pb2.SensorDimensions"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#ansys.speos.core.sensor.BaseSensor.Dimensions",
        "title": "Dimensions > Dimensions > Dimensions",
        "section": "Dimensions > Dimensions",
        "text": "class ansys.speos.core.sensor.BaseSensor.Dimensions(sensor_dimensions, default_values=True, stable_ctr=False)\n\nDimensions of the sensor.\n\nBy default, for both x and y axis: from -50mm to 50mm is chosen, with a sampling of 100.\n\nParameters\n\nsensor_dimensions\n\nansys.api.speos.sensor.v1.common_pb2.SensorDimensions\n\nSensorDimensions protobuf object to modify.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nstable_ctr\n\nbool\n\nVariable to indicate if usage is inside class scope\n\nParameters\n\nsensor_dimensions (ansys.api.speos.sensor.v1.common_pb2.SensorDimensions)\n\ndefault_values (bool)\n\nstable_ctr (bool)\n\nNotes\n\nDo not instantiate this class yourself, use set_dimensions method available in sensor classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#overview",
        "title": "Dimensions > Overview",
        "section": "Overview",
        "text": "set_x_start\nSet the minimum value on x axis.\nset_x_end\nSet the maximum value on x axis.\nset_x_sampling\nSet the sampling value on x axis.\nset_y_start\nSet the minimum value on y axis.\nset_y_end\nSet the maximum value on y axis.\nset_y_sampling\nSet the sampling value on y axis.\nOverview\nset_x_start\nset_x_end\nset_x_sampling\nset_y_start\nset_y_end\nset_y_sampling"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#import-detail",
        "title": "Dimensions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#method-detail",
        "title": "Dimensions > Method detail",
        "section": "Method detail",
        "text": "Set the minimum value on x axis.\nMinimum value on x axis (mm).\nBy default, -50.\nDimensions.\nSet the maximum value on x axis.\nMaximum value on x axis (mm).\nBy default, 50.\nDimensions.\nSet the sampling value on x axis.\nThe number of pixels of the XMP map on x axis.\nBy default, 100.\nDimensions.\nSet the minimum value on y axis.\nMinimum value on y axis (mm).\nBy default, -50.\nDimensions.\nSet the maximum value on y axis.\nMaximum value on y axis (mm).\nBy default, 50.\nDimensions.\nSet the sampling value on y axis.\nThe number of pixels of the XMP map on y axis.\nBy default, 100.\nDimensions.\nMethod detail\npython:float\n-50\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:float\n50\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:int\n100\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:float\n-50\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:float\n50\nansys.speos.core.sensor.BaseSensor.Dimensions\npython:int\n100\nansys.speos.core.sensor.BaseSensor.Dimensions"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_x_start",
        "title": "Dimensions > Method detail > set_x_start",
        "section": "Method detail > set_x_start",
        "text": "Dimensions.set_x_start(value=-50)\n\nSet the minimum value on x axis.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum value on x axis (mm).\nBy default, -50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_x_end",
        "title": "Dimensions > Method detail > set_x_end",
        "section": "Method detail > set_x_end",
        "text": "Dimensions.set_x_end(value=50)\n\nSet the maximum value on x axis.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum value on x axis (mm).\nBy default, 50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_x_sampling",
        "title": "Dimensions > Method detail > set_x_sampling",
        "section": "Method detail > set_x_sampling",
        "text": "Dimensions.set_x_sampling(value=100)\n\nSet the sampling value on x axis.\n\nParameters\n\nvalue\n\npython:int\n\nThe number of pixels of the XMP map on x axis.\nBy default, 100.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_y_start",
        "title": "Dimensions > Method detail > set_y_start",
        "section": "Method detail > set_y_start",
        "text": "Dimensions.set_y_start(value=-50)\n\nSet the minimum value on y axis.\n\nParameters\n\nvalue\n\npython:float\n\nMinimum value on y axis (mm).\nBy default, -50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_y_end",
        "title": "Dimensions > Method detail > set_y_end",
        "section": "Method detail > set_y_end",
        "text": "Dimensions.set_y_end(value=50)\n\nSet the maximum value on y axis.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum value on y axis (mm).\nBy default, 50.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/sensor/BaseSensor.Dimensions",
        "href": "api/ansys/speos/core/sensor/BaseSensor.Dimensions.html#Dimensions.set_y_sampling",
        "title": "Dimensions > Method detail > set_y_sampling",
        "section": "Method detail > set_y_sampling",
        "text": "Dimensions.set_y_sampling(value=100)\n\nSet the sampling value on y axis.\n\nParameters\n\nvalue\n\npython:int\n\nThe number of pixels of the XMP map on y axis.\nBy default, 100.\n\nReturns\n\nansys.speos.core.sensor.BaseSensor.Dimensions\n\nDimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#cruditem",
        "title": "CrudItem",
        "section": "CrudItem",
        "text": "Item of a database.\nDatabase to link to.\nKey (also named guid) of the item in the database.\ndb (CrudStub)\nkey (str)\nCrudItem\nCrudItem\nansys.speos.core.kernel.crud.CrudStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#ansys.speos.core.kernel.crud.CrudItem",
        "title": "CrudItem > CrudItem > CrudItem",
        "section": "CrudItem > CrudItem",
        "text": "class ansys.speos.core.kernel.crud.CrudItem(db, key)\n\nItem of a database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.crud.CrudStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey (also named guid) of the item in the database.\n\nParameters\n\ndb (CrudStub)\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#overview",
        "title": "CrudItem > Overview",
        "section": "Overview",
        "text": "stub\nThe database.\nkey\nThe guid in database.\nOverview\nstub\nkey"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#import-detail",
        "title": "CrudItem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#property-detail",
        "title": "CrudItem > Property detail",
        "section": "Property detail",
        "text": "The database.\nThe guid in database.\nProperty detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#CrudItem.stub",
        "title": "CrudItem > Property detail > stub",
        "section": "Property detail > stub",
        "text": "property CrudItem.stub: CrudStub\n\nThe database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/crud/CrudItem",
        "href": "api/ansys/speos/core/kernel/crud/CrudItem.html#CrudItem.key",
        "title": "CrudItem > Property detail > key",
        "section": "Property detail > key",
        "text": "property CrudItem.key: str\n\nThe guid in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#instancefilter",
        "title": "InstanceFilter",
        "section": "InstanceFilter",
        "text": "Bases: logging.Filter\nEnsures that the instance_name record always exists.\nInstanceFilter\nInstanceFilter\nlogging.Filter\ninstance_name"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#ansys.speos.core.logger.InstanceFilter",
        "title": "InstanceFilter > InstanceFilter > InstanceFilter",
        "section": "InstanceFilter > InstanceFilter",
        "text": "class ansys.speos.core.logger.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#overview",
        "title": "InstanceFilter > Overview",
        "section": "Overview",
        "text": "filter\nFilter the record.\nOverview\nfilter"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#import-detail",
        "title": "InstanceFilter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#method-detail",
        "title": "InstanceFilter > Method detail",
        "section": "Method detail",
        "text": "Filter the record.\nRecord to filter.\nWhether the record is valid.\nMethod detail\nlogging.LogRecord"
    },
    {
        "objectID": "api/ansys/speos/core/logger/InstanceFilter",
        "href": "api/ansys/speos/core/logger/InstanceFilter.html#InstanceFilter.filter",
        "title": "InstanceFilter > Method detail > filter",
        "section": "Method detail > filter",
        "text": "InstanceFilter.filter(record)\n\nFilter the record.\n\nParameters\n\nrecord\n\nlogging.LogRecord\n\nRecord to filter.\n\nReturns\n\nbool\n\nWhether the record is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosPercentStyle",
        "href": "api/ansys/speos/core/logger/PySpeosPercentStyle.html#pyspeospercentstyle",
        "title": "PySpeosPercentStyle",
        "section": "PySpeosPercentStyle",
        "text": "Bases: logging.PercentStyle\nCustomized PercentStyle class for overwriting default format styles.\nPySpeosPercentStyle\nPySpeosPercentStyle\nlogging.PercentStyle\nPercentStyle"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosPercentStyle",
        "href": "api/ansys/speos/core/logger/PySpeosPercentStyle.html#ansys.speos.core.logger.PySpeosPercentStyle",
        "title": "PySpeosPercentStyle > PySpeosPercentStyle > PySpeosPercentStyle",
        "section": "PySpeosPercentStyle > PySpeosPercentStyle",
        "text": "class ansys.speos.core.logger.PySpeosPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle\n\nCustomized PercentStyle class for overwriting default format styles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosPercentStyle",
        "href": "api/ansys/speos/core/logger/PySpeosPercentStyle.html#import-detail",
        "title": "PySpeosPercentStyle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples",
        "href": "examples.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "examples",
        "href": "examples.html#basic-examples",
        "title": "Examples > Basic examples",
        "section": "Basic examples",
        "text": "This series of tutorials explains basic examples involving Speos objects using Python and PySpeos.\nThe series of workflow examples below demonstrate use cases using PySpeos core methods.\nThe series of basic examples below explains how to use different PySpeos core methods.\nThe series of basic examples below explains how to use different PySpeos kernel methods.\nBasic examples"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Provides the logger used for each PySpeos session.\nThis class allows you to add handlers to the logger to output messages\nto a file or to the standard output.\nLogging level to filter the message severity allowed in the logger.\nBy default, the logging.DEBUG level is used.\nWhether to write log messages to a file.\nWhether to write log messages to the standard output (stdout).\nName of the file to write log log messages to.\nDemonstrate logger usage from the Speos instance, which is automatically\ncreated when a speos instance is created.\nImport the global pyspeos logger and add a file output handler.\nLogger\nLogger\npython:int\nlogging.DEBUG\npython:False\npython:True\npython:str\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#ansys.speos.core.logger.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.speos.core.logger.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides the logger used for each PySpeos session.\n\nThis class allows you to add handlers to the logger to output messages\nto a file or to the standard output.\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLogging level to filter the message severity allowed in the logger.\nBy default, the logging.DEBUG level is used.\n\nto_file\n\nbool, default: python:False\n\nWhether to write log messages to a file.\n\nto_stdout\n\nbool, default: python:True\n\nWhether to write log messages to the standard output (stdout).\n\nfilename\n\npython:str, default: “pyspeos.log”\n\nName of the file to write log log messages to.\n\nExamples\n\nDemonstrate logger usage from the Speos instance, which is automatically\ncreated when a speos instance is created.\n\n>>> from ansys.speos.core import speos\n>>> speos = Speos(loglevel=\"DEBUG\")\n>>> speos._log.info(\"This is a useful message\")\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the global pyspeos logger and add a file output handler.\n\n>>> import os\n>>> from ansys.speos.core import LOG\n>>> file_path = os.path.join(os.getcwd(), \"pyspeos.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "log_to_file\nAdd file handler to logger.\nlog_to_stdout\nAdd the standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nadd_child_logger\nAdd a child logger to the main logger.\nadd_instance_logger\nAdd a logger for a speos instance.\nadd_handling_uncaught_expections\nRedirect the output of an exception to a logger.\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nMagic method to allow retrieval of instances.\nOverview\nlog_to_file\nlog_to_stdout\nsetLevel\nadd_child_logger\nadd_instance_logger\nadd_handling_uncaught_expections\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#attribute-detail",
        "title": "Logger > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.file_handler",
        "title": "Logger > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "Logger.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.std_out_handler",
        "title": "Logger > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "Logger.std_out_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.logger",
        "title": "Logger > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "Logger.logger\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.level",
        "title": "Logger > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "Logger.level = 0\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.debug",
        "title": "Logger > Attribute detail > debug",
        "section": "Attribute detail > debug",
        "text": "Logger.debug\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.info",
        "title": "Logger > Attribute detail > info",
        "section": "Attribute detail > info",
        "text": "Logger.info\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.warning",
        "title": "Logger > Attribute detail > warning",
        "section": "Attribute detail > warning",
        "text": "Logger.warning\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.error",
        "title": "Logger > Attribute detail > error",
        "section": "Attribute detail > error",
        "text": "Logger.error\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.critical",
        "title": "Logger > Attribute detail > critical",
        "section": "Attribute detail > critical",
        "text": "Logger.critical\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.log",
        "title": "Logger > Attribute detail > log",
        "section": "Attribute detail > log",
        "text": "Logger.log\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Add file handler to logger.\nName of the file to write log messages to. The default\nis \"pyspeos.log\".\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWrite to the \"pyspeos.log\" file in the current working directory.\nAdd the standard output handler to the logger.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nChange the log level of the object and the attached handlers.\nAdd a child logger to the main logger.\nThis logger is more general than an instance logger, which is designed to\ntrack the state of speos instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName of the child logger.\nLevel of logging. The default is None.\nLogger class.\nAdd a logger for a speos instance.\nThe speos instance logger is a logger with an adapter that adds\ncontextual information such as the speos instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is\nstored in the _instances field.\nName for the new instance logger.\nspeos SpeosClient object, which should contain the get_name method.\nLevel of logging. The default is None.\nLogger adapter customized to add speos information to the\nlogs. You can use this class to log events in the same\nway you would with the Logger class.\nMagic method to allow retrieval of instances.\nRedirect the output of an exception to a logger.\nName of the logger.\nMethod detail\npython:str\noptional\n\"pyspeos.log\"\npython:int\noptional\n10\nlogging.DEBUG\n\"pyspeos.log\"\npython:int\noptional\n10\nlogging.DEBUG\n_global\npython:str\npython:str\noptional\nNone\nlogging.logger\n_instances\npython:str\nansys.speos.core.kernel.client.SpeosClient\nget_name\npython:int\noptional\nNone\nPySpeosCustomAdapter\nLogger\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.log_to_file",
        "title": "Logger > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "Logger.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default\nis \"pyspeos.log\".\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nExamples\n\nWrite to the \"pyspeos.log\" file in the current working directory.\n\n>>> from ansys.speos.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), \"pyspeos.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.log_to_stdout",
        "title": "Logger > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "Logger.log_to_stdout(level=LOG_LEVEL)\n\nAdd the standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.setLevel",
        "title": "Logger > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "Logger.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.add_child_logger",
        "title": "Logger > Method detail > add_child_logger",
        "section": "Method detail > add_child_logger",
        "text": "Logger.add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis logger is more general than an instance logger, which is designed to\ntrack the state of speos instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the child logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.add_instance_logger",
        "title": "Logger > Method detail > add_instance_logger",
        "section": "Method detail > add_instance_logger",
        "text": "Logger.add_instance_logger(name, client_instance, level=None)\n\nAdd a logger for a speos instance.\n\nThe speos instance logger is a logger with an adapter that adds\ncontextual information such as the speos instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new instance logger.\n\nclient_instance\n\nansys.speos.core.kernel.client.SpeosClient\n\nspeos SpeosClient object, which should contain the get_name method.\n\nlevel\n\npython:int, optional\n\nLevel of logging. The default is None.\n\nReturns\n\nPySpeosCustomAdapter\n\nLogger adapter customized to add speos information to the\nlogs. You can use this class to log events in the same\nway you would with the Logger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.__getitem__",
        "title": "Logger > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Logger.__getitem__(key)\n\nMagic method to allow retrieval of instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/Logger",
        "href": "api/ansys/speos/core/logger/Logger.html#Logger.add_handling_uncaught_expections",
        "title": "Logger > Method detail > add_handling_uncaught_expections",
        "section": "Method detail > add_handling_uncaught_expections",
        "text": "Logger.add_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#facelink",
        "title": "FaceLink",
        "section": "FaceLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for job in database.\nDatabase to link to.\nKey of the face in the database.\nkey (str)\nFaceLink\nFaceLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.face.FaceStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#ansys.speos.core.kernel.face.FaceLink",
        "title": "FaceLink > FaceLink > FaceLink",
        "section": "FaceLink > FaceLink",
        "text": "class ansys.speos.core.kernel.face.FaceLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for job in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.face.FaceStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the face in the database.\n\nParameters\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#overview",
        "title": "FaceLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the face.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#import-detail",
        "title": "FaceLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#method-detail",
        "title": "FaceLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the face.\nGet the datamodel from database.\nFace datamodel.\nChange datamodel in database.\nNew Face datamodel.\nRemove datamodel from database.\nMethod detail\nface.Face\nface.Face"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#FaceLink.__str__",
        "title": "FaceLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "FaceLink.__str__()\n\nReturn the string representation of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#FaceLink.get",
        "title": "FaceLink > Method detail > get",
        "section": "Method detail > get",
        "text": "FaceLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nface.Face\n\nFace datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#FaceLink.set",
        "title": "FaceLink > Method detail > set",
        "section": "Method detail > set",
        "text": "FaceLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nface.Face\n\nNew Face datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/face/FaceLink",
        "href": "api/ansys/speos/core/kernel/face/FaceLink.html#FaceLink.delete",
        "title": "FaceLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "FaceLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#how-to-create-a-simulation",
        "title": "Examples > How to create a simulation",
        "section": "How to create a simulation",
        "text": "This tutorial demonstrates how to create a simulation.\nHow to create a simulation"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#what-is-a-simulation",
        "title": "Examples > How to create a simulation > What is a simulation?",
        "section": "What is a simulation?",
        "text": "A simulation contains selected sensors, sources to model ray-trace in space.\nWhat is a simulation?"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create a simulation > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#create-project",
        "title": "Examples > How to create a simulation > Create Project",
        "section": "Create Project",
        "text": "Create a new project first.\nThe only way to create a simulation is to create it from a project.\nCreate Project"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#prepare-prerequisites",
        "title": "Examples > How to create a simulation > Prepare prerequisites",
        "section": "Prepare prerequisites",
        "text": "Create the necessary elements for a simulation: Sensor, source, root part, optical property are prerequisites.\nPrepare prerequisites"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#prepare-the-root-part",
        "title": "Examples > How to create a simulation > Prepare the root part",
        "section": "Prepare the root part",
        "text": "Prepare the root part"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#prepare-an-optical-property",
        "title": "Examples > How to create a simulation > Prepare an optical property",
        "section": "Prepare an optical property",
        "text": "Prepare an optical property"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#prepare-an-irradiance-sensor",
        "title": "Examples > How to create a simulation > Prepare an irradiance sensor",
        "section": "Prepare an irradiance sensor",
        "text": "Prepare an irradiance sensor"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#prepare-a-surface-source",
        "title": "Examples > How to create a simulation > Prepare a surface source",
        "section": "Prepare a surface source",
        "text": "Prepare a surface source"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#create-a-simulation",
        "title": "Examples > How to create a simulation > Create a simulation",
        "section": "Create a simulation",
        "text": "Create a simulation"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#set-simulation-characteristics",
        "title": "Examples > How to create a simulation > Set simulation characteristics",
        "section": "Set simulation characteristics",
        "text": "Simulation is defined with the same default values as the GUI speos.\nIf the user would like to modify the simulation characteristics, it is possible to do so by setting the simulation characteristics as below.\nSet simulation characteristics"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#read-information",
        "title": "Examples > How to create a simulation > Read information",
        "section": "Read information",
        "text": "Read simulation information\nRead project information\nRead information"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#update-simulation-settings",
        "title": "Examples > How to create a simulation > Update simulation settings",
        "section": "Update simulation settings",
        "text": "If you are manipulating a simulation already committed, remember to commit your changes.\nIf you don’t, you will still only watch what is committed on the server.\nUpdate simulation settings"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#reset",
        "title": "Examples > How to create a simulation > Reset",
        "section": "Reset",
        "text": "Possibility to reset local values from the one available in the server.\nReset"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#other-simulation-examples",
        "title": "Examples > How to create a simulation > Other simulation examples",
        "section": "Other simulation examples",
        "text": "Other simulation examples"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#inverse-simulation",
        "title": "Examples > How to create a simulation > Inverse simulation",
        "section": "Inverse simulation",
        "text": "Inverse simulation"
    },
    {
        "objectID": "examples/core/simulation",
        "href": "examples/core/simulation.html#interactive-simulation",
        "title": "Examples > How to create a simulation > Interactive simulation",
        "section": "Interactive simulation",
        "text": "Interactive simulation"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#moving-car-example-by-using-speos-files-combination",
        "title": "Examples > Moving car example by using speos files combination",
        "section": "Moving car example by using speos files combination",
        "text": "This tutorial demonstrates how to run moving car workflow use case.\nMoving car example by using speos files combination"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#create-connection-with-speos-rpc-server",
        "title": "Examples > Moving car example by using speos files combination > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#combine-several-speos-files-into-one-project",
        "title": "Examples > Moving car example by using speos files combination > Combine several speos files into one project",
        "section": "Combine several speos files into one project",
        "text": "Here we are building a project with:\nAn environment which is a road\nA blue car\nA red car\nCombine several speos files into one project"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#preview-the-project",
        "title": "Examples > Moving car example by using speos files combination > Preview the project",
        "section": "Preview the project",
        "text": "User can review the created/loaded project using preview method.\nPreview the project"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#complete-the-project-with-sensorsourcesimulation",
        "title": "Examples > Moving car example by using speos files combination > Complete the project with sensor/source/simulation",
        "section": "Complete the project with sensor/source/simulation",
        "text": "We are adding a camera sensor to have output results, a luminaire to have a light source.\nAnd, we gather the source and the sensor into a simulation (we will compute it just after).\nComplete the project with sensor/source/simulation"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#create-a-sensor",
        "title": "Examples > Moving car example by using speos files combination > Create a sensor",
        "section": "Create a sensor",
        "text": "Create a sensor"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#create-a-source",
        "title": "Examples > Moving car example by using speos files combination > Create a source",
        "section": "Create a source",
        "text": "In this example, a luminaire source is created with an IES file.\nMore details on creating/editing source examples can be found in core examples.\nCreate a source"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#create-a-simulation",
        "title": "Examples > Moving car example by using speos files combination > Create a simulation",
        "section": "Create a simulation",
        "text": "More details on creating/editing simulation examples can be found in core examples.\nCreate a simulation"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#run-the-simulation",
        "title": "Examples > Moving car example by using speos files combination > Run the simulation",
        "section": "Run the simulation",
        "text": "Simulation can be run using CPU via compute_CPU method or using GPU via compute_GPU method.\nRun the simulation"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#check-and-review-result",
        "title": "Examples > Moving car example by using speos files combination > Check and review result",
        "section": "Check and review result",
        "text": "Open result (only windows)\nCheck and review result"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#modify-part",
        "title": "Examples > Moving car example by using speos files combination > Modify part",
        "section": "Modify part",
        "text": "Move the part via changing the axis_system of a part.\naxis_system is a list of 12 float values: x, y, z, x_vect_x, x_vect_y, x_vect_z, y_vect_x, y_vect_y, y_vect_z, z_vect_x, z_vect_y, z_vect_z.\nRe-run simulation with the modified part position\nReview result:\nModify part"
    },
    {
        "objectID": "examples/workflow/combine-speos",
        "href": "examples/workflow/combine-speos.html#modify-camera-property",
        "title": "Examples > Moving car example by using speos files combination > Modify camera property",
        "section": "Modify camera property",
        "text": "Modify the camera, e.g. focal length to 10\nRe-run the simulation and review result\nModify camera property"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#intensity",
        "title": "Intensity",
        "section": "Intensity",
        "text": "Speos feature : Intensity.\nBy default, a lambertian intensity is created (cos with N=1 and total_angle=180).\nThe Speos instance client.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nIntensity properties to complete.\nBy default, None.\nCreation from an IntensityTemplateLink key\nLink object for the intensity template in database.\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nintensity_props_to_complete (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties])\nkey (str)\nIntensity\nIntensity\nansys.speos.core.kernel.client.SpeosClient\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties\noptional\nNone\npython:str\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#ansys.speos.core.intensity.Intensity",
        "title": "Intensity > Intensity > Intensity",
        "section": "Intensity > Intensity",
        "text": "class ansys.speos.core.intensity.Intensity(speos_client, name, description='', metadata=None, intensity_props_to_complete=None, key='')\n\nSpeos feature : Intensity.\n\nBy default, a lambertian intensity is created (cos with N=1 and total_angle=180).\n\nParameters\n\nspeos_client\n\nansys.speos.core.kernel.client.SpeosClient\n\nThe Speos instance client.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nintensity_props_to_complete\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SourceInstance.IntensityProperties, optional\n\nIntensity properties to complete.\nBy default, None.\n\nkey\n\npython:str\n\nCreation from an IntensityTemplateLink key\n\nAttributes\n\nintensity_template_link\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\n\nLink object for the intensity template in database.\n\nParameters\n\nspeos_client (ansys.speos.core.kernel.client.SpeosClient)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nintensity_props_to_complete (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance.IntensityProperties])\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#overview",
        "title": "Intensity > Overview",
        "section": "Overview",
        "text": "set_library\nSet the intensity as library.\nset_cos\nSet the intensity as cos.\nset_gaussian\nSet the intensity as gaussian.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\ntype\nReturn type of sensor.\nintensity_template_link\nLink object for the intensity template in database.\n__str__\nReturn the string representation of the intensity.\nOverview\nset_library\nset_cos\nset_gaussian\ncommit\nreset\ndelete\ntype\nintensity_template_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#import-detail",
        "title": "Intensity > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#property-detail",
        "title": "Intensity > Property detail",
        "section": "Property detail",
        "text": "Return type of sensor.\nProperty detail\npython:None\nfor\nlambertian\nansys.speos.core.intensity.Intensity.Library"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.type",
        "title": "Intensity > Property detail > type",
        "section": "Property detail > type",
        "text": "property Intensity.type: type\n\nReturn type of sensor.\n\nReturns\n\nExample: python:None for lambertian or ansys.speos.core.intensity.Intensity.Library\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#attribute-detail",
        "title": "Intensity > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the intensity template in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.intensity_template_link",
        "title": "Intensity > Attribute detail > intensity_template_link",
        "section": "Attribute detail > intensity_template_link",
        "text": "Intensity.intensity_template_link = None\n\nLink object for the intensity template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#method-detail",
        "title": "Intensity > Method detail",
        "section": "Method detail",
        "text": "Set the intensity as library.\nLibrary intensity.\nSet the intensity as cos.\nOrder of cos law.\nBy default, 3.\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\nIntensity feature.\nSet the intensity as gaussian.\nGaussian intensity.\nReturn the string representation of the intensity.\nSave feature: send the local data to the speos server database.\nIntensity feature.\nReset feature: override local data by the one from the speos server database.\nIntensity feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nIntensity feature.\nMethod detail\nansys.speos.core.intensity.Intensity.Library\npython:float\n3\npython:float\n180.0\nansys.speos.core.intensity.Intensity\nansys.speos.core.intensity.Intensity.Gaussian\nansys.speos.core.intensity.Intensity\nansys.speos.core.intensity.Intensity\nansys.speos.core.intensity.Intensity"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.set_library",
        "title": "Intensity > Method detail > set_library",
        "section": "Method detail > set_library",
        "text": "Intensity.set_library()\n\nSet the intensity as library.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Library\n\nLibrary intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.set_cos",
        "title": "Intensity > Method detail > set_cos",
        "section": "Method detail > set_cos",
        "text": "Intensity.set_cos(N=3, total_angle=180)\n\nSet the intensity as cos.\n\nParameters\n\nN\n\npython:float\n\nOrder of cos law.\nBy default, 3.\n\ntotal_angle\n\npython:float\n\nTotal angle in degrees of the emission of the light source.\nBy default, 180.0.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.set_gaussian",
        "title": "Intensity > Method detail > set_gaussian",
        "section": "Method detail > set_gaussian",
        "text": "Intensity.set_gaussian()\n\nSet the intensity as gaussian.\n\nReturns\n\nansys.speos.core.intensity.Intensity.Gaussian\n\nGaussian intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.__str__",
        "title": "Intensity > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Intensity.__str__()\n\nReturn the string representation of the intensity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.commit",
        "title": "Intensity > Method detail > commit",
        "section": "Method detail > commit",
        "text": "Intensity.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.reset",
        "title": "Intensity > Method detail > reset",
        "section": "Method detail > reset",
        "text": "Intensity.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#Intensity.delete",
        "title": "Intensity > Method detail > delete",
        "section": "Method detail > delete",
        "text": "Intensity.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.intensity.Intensity\n\nIntensity feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/Intensity",
        "href": "api/ansys/speos/core/intensity/Intensity.html#classes",
        "title": "Intensity > Classes",
        "section": "Classes",
        "text": "Library\nIntensity of type: Library.\nGaussian\nIntensity of type: Gaussian.\nClasses\nLibrary\nGaussian"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#joblink",
        "title": "JobLink",
        "section": "JobLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for job in database.\nDatabase to link to.\nKey of the job in the database.\nkey (str)\nJobLink\nJobLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.job.JobStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#ansys.speos.core.kernel.job.JobLink",
        "title": "JobLink > JobLink > JobLink",
        "section": "JobLink > JobLink",
        "text": "class ansys.speos.core.kernel.job.JobLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for job in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.job.JobStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the job in the database.\n\nParameters\n\nkey (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#overview",
        "title": "JobLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\nget_state\nRetrieve job state.\nstart\nStart the job.\nstop\nStop the job.\nget_error\nRetrieve job error.\nget_results\nRetrieve job results.\nget_progress_status\nRetrieve job progress.\nget_ray_paths\nRetrieve ray paths.\n__str__\nReturn the string representation of the Job.\nOverview\nget\nset\ndelete\nget_state\nstart\nstop\nget_error\nget_results\nget_progress_status\nget_ray_paths\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#import-detail",
        "title": "JobLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#method-detail",
        "title": "JobLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the Job.\nGet the datamodel from database.\nJob datamodel.\nChange datamodel in database.\nNew Job datamodel.\nRemove datamodel from database.\nRetrieve job state.\nState of the job.\nStart the job.\nStop the job.\nRetrieve job error.\nError of the job.\nRetrieve job results.\nResults of the job.\nRetrieve job progress.\nProgress status of the job.\nRetrieve ray paths.\nAvailable for interactive simulation.\nRay paths generated by the interactive simulation.\nMethod detail\njob.Job\njob.Job\nansys.api.speos.job.v2.job_pb2.GetState_Response\nansys.api.speos.job.v2.job_pb2.GetError_Response\nansys.api.speos.job.v2.job_pb2.GetResults_Response\nansys.api.speos.job.v2.job_pb2.GetProgressStatus_Response\nIterator\nansys.api.speos.results.v1.ray_path_pb2.RayPath"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.__str__",
        "title": "JobLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "JobLink.__str__()\n\nReturn the string representation of the Job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get",
        "title": "JobLink > Method detail > get",
        "section": "Method detail > get",
        "text": "JobLink.get()\n\nGet the datamodel from database.\n\nReturns\n\njob.Job\n\nJob datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.set",
        "title": "JobLink > Method detail > set",
        "section": "Method detail > set",
        "text": "JobLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\njob.Job\n\nNew Job datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.delete",
        "title": "JobLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "JobLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get_state",
        "title": "JobLink > Method detail > get_state",
        "section": "Method detail > get_state",
        "text": "JobLink.get_state()\n\nRetrieve job state.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetState_Response\n\nState of the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.start",
        "title": "JobLink > Method detail > start",
        "section": "Method detail > start",
        "text": "JobLink.start()\n\nStart the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.stop",
        "title": "JobLink > Method detail > stop",
        "section": "Method detail > stop",
        "text": "JobLink.stop()\n\nStop the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get_error",
        "title": "JobLink > Method detail > get_error",
        "section": "Method detail > get_error",
        "text": "JobLink.get_error()\n\nRetrieve job error.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetError_Response\n\nError of the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get_results",
        "title": "JobLink > Method detail > get_results",
        "section": "Method detail > get_results",
        "text": "JobLink.get_results()\n\nRetrieve job results.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetResults_Response\n\nResults of the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get_progress_status",
        "title": "JobLink > Method detail > get_progress_status",
        "section": "Method detail > get_progress_status",
        "text": "JobLink.get_progress_status()\n\nRetrieve job progress.\n\nReturns\n\nansys.api.speos.job.v2.job_pb2.GetProgressStatus_Response\n\nProgress status of the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/job/JobLink",
        "href": "api/ansys/speos/core/kernel/job/JobLink.html#JobLink.get_ray_paths",
        "title": "JobLink > Method detail > get_ray_paths",
        "section": "Method detail > get_ray_paths",
        "text": "JobLink.get_ray_paths()\n\nRetrieve ray paths.\n\nAvailable for interactive simulation.\n\nReturns\n\nIterator[ansys.api.speos.results.v1.ray_path_pb2.RayPath]\n\nRay paths generated by the interactive simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#simulationdirect",
        "title": "SimulationDirect",
        "section": "SimulationDirect",
        "text": "Bases: BaseSimulation\nType of Simulation: Direct.\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to True,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 200000 rays, with an automatic save frequency of 1800s.\nProject in which simulation shall be created.\nName of the simulation.\nDescription of the Simulation.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\nUses default values when True.\nproject (SimulationDirect.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\ndefault_values (bool)\nSimulationDirect\nSimulationDirect\nBaseSimulation\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#ansys.speos.core.simulation.SimulationDirect",
        "title": "SimulationDirect > SimulationDirect > SimulationDirect",
        "section": "SimulationDirect > SimulationDirect",
        "text": "class ansys.speos.core.simulation.SimulationDirect(project, name, description='', metadata=None, simulation_instance=None, default_values=True)\n\nBases: BaseSimulation\n\nType of Simulation: Direct.\n\nBy default,\ngeometry distance tolerance is set to 0.01,\nmaximum number of impacts is set to 100,\ncolorimetric standard is set to CIE 1931,\ndispersion is set to True,\nfast transmission gathering is set to False,\nambient material URI is empty,\nand weight’s minimum energy percentage is set to 0.005.\nBy default, the simulation will stop after 200000 rays, with an automatic save frequency of 1800s.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject in which simulation shall be created.\n\nname\n\npython:str\n\nName of the simulation.\n\ndescription\n\npython:str\n\nDescription of the Simulation.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\nsimulation_instance\n\nansys.api.speos.scene.v2.scene_pb2.Scene.SimulationInstance, optional\n\nSimulation instance to provide if the feature does not have to be created from scratch\nBy default, None, means that the feature is created from scratch by default.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SimulationDirect.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsimulation_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SimulationInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#overview",
        "title": "SimulationDirect > Overview",
        "section": "Overview",
        "text": "set_geom_distance_tolerance\nSet the geometry distance tolerance.\nset_max_impact\nDefine a value to determine the maximum number of ray impacts during propagation.\nset_weight\nActivate weight. Highly recommended to fill.\nset_weight_none\nDeactivate weight.\nset_colorimetric_standard_CIE_1931\nSet the colorimetric standard to CIE 1931.\nset_colorimetric_standard_CIE_1964\nSet the colorimetric standard to CIE 1964.\nset_dispersion\nActivate/Deactivate the dispersion calculation.\nset_ambient_material_file_uri\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nset_stop_condition_rays_number\nTo stop the simulation after a certain number of rays were sent. Set None as value to have no condition about rays number.\nset_stop_condition_duration\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\nset_automatic_save_frequency\nDefine a backup interval (s).\nOverview\nset_geom_distance_tolerance\nset_max_impact\nset_weight\nset_weight_none\nset_colorimetric_standard_CIE_1931\nset_colorimetric_standard_CIE_1964\nset_dispersion\nset_ambient_material_file_uri\nset_stop_condition_rays_number\nset_stop_condition_duration\nset_automatic_save_frequency"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#import-detail",
        "title": "SimulationDirect > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#method-detail",
        "title": "SimulationDirect > Method detail",
        "section": "Method detail",
        "text": "Set the geometry distance tolerance.\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01.\nDirect simulation\nDefine a value to determine the maximum number of ray impacts during propagation.\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\nThe maximum number of impacts.\nBy default, 100.\nDirect simulation\nActivate weight. Highly recommended to fill.\nWeight.\nDeactivate weight.\nDirect simulation\nSet the colorimetric standard to CIE 1931.\n2 degrees CIE Standard Colorimetric Observer Data.\nDirect simulation\nSet the colorimetric standard to CIE 1964.\n10 degrees CIE Standard Colorimetric Observer Data.\nDirect simulation\nActivate/Deactivate the dispersion calculation.\nActivate/Deactivate.\nBy default, True, means activate.\nDirect simulation\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\nDirect simulation\nTo stop the simulation after a certain number of rays were sent. Set None as value to have no condition about rays number.\nThe number of rays to send. Or None if no condition about the number of rays.\nBy default, 200000.\nDirect simulation\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\nDirect simulation\nDefine a backup interval (s).\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\nBackup interval (s).\nBy default, 1800.\nDirect simulation\nMethod detail\npython:float\n0.01\nansys.speos.core.simulation.SimulationDirect\npython:int\n100\nansys.speos.core.simulation.SimulationDirect\nansys.speos.core.simulation.BaseSimulation.Weight\nansys.speos.core.simulation.SimulationDirect\nansys.speos.core.simulation.SimulationDirect\nansys.speos.core.simulation.SimulationDirect\nTrue\nansys.speos.core.simulation.SimulationDirect\npython:str\n\"\"\nansys.speos.core.simulation.SimulationDirect\npython:int\noptional\n200000\nansys.speos.core.simulation.SimulationDirect\npython:int\noptional\nNone\nansys.speos.core.simulation.SimulationDirect\npython:int\noptional\n1800\nansys.speos.core.simulation.SimulationDirect"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_geom_distance_tolerance",
        "title": "SimulationDirect > Method detail > set_geom_distance_tolerance",
        "section": "Method detail > set_geom_distance_tolerance",
        "text": "SimulationDirect.set_geom_distance_tolerance(value=0.01)\n\nSet the geometry distance tolerance.\n\nParameters\n\nvalue\n\npython:float\n\nMaximum distance in mm to consider two faces as tangent.\nBy default, 0.01.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_max_impact",
        "title": "SimulationDirect > Method detail > set_max_impact",
        "section": "Method detail > set_max_impact",
        "text": "SimulationDirect.set_max_impact(value=100)\n\nDefine a value to determine the maximum number of ray impacts during propagation.\n\nWhen a ray has interacted N times with the geometry, the propagation of the ray stops.\n\nParameters\n\nvalue\n\npython:int\n\nThe maximum number of impacts.\nBy default, 100.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_weight",
        "title": "SimulationDirect > Method detail > set_weight",
        "section": "Method detail > set_weight",
        "text": "SimulationDirect.set_weight()\n\nActivate weight. Highly recommended to fill.\n\nReturns\n\nansys.speos.core.simulation.BaseSimulation.Weight\n\nWeight.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_weight_none",
        "title": "SimulationDirect > Method detail > set_weight_none",
        "section": "Method detail > set_weight_none",
        "text": "SimulationDirect.set_weight_none()\n\nDeactivate weight.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_colorimetric_standard_CIE_1931",
        "title": "SimulationDirect > Method detail > set_colorimetric_standard_CIE_1931",
        "section": "Method detail > set_colorimetric_standard_CIE_1931",
        "text": "SimulationDirect.set_colorimetric_standard_CIE_1931()\n\nSet the colorimetric standard to CIE 1931.\n\n2 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_colorimetric_standard_CIE_1964",
        "title": "SimulationDirect > Method detail > set_colorimetric_standard_CIE_1964",
        "section": "Method detail > set_colorimetric_standard_CIE_1964",
        "text": "SimulationDirect.set_colorimetric_standard_CIE_1964()\n\nSet the colorimetric standard to CIE 1964.\n\n10 degrees CIE Standard Colorimetric Observer Data.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_dispersion",
        "title": "SimulationDirect > Method detail > set_dispersion",
        "section": "Method detail > set_dispersion",
        "text": "SimulationDirect.set_dispersion(value=True)\n\nActivate/Deactivate the dispersion calculation.\n\nParameters\n\nvalue\n\nbool\n\nActivate/Deactivate.\nBy default, True, means activate.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_ambient_material_file_uri",
        "title": "SimulationDirect > Method detail > set_ambient_material_file_uri",
        "section": "Method detail > set_ambient_material_file_uri",
        "text": "SimulationDirect.set_ambient_material_file_uri(uri='')\n\nTo define the environment in which the light will propagate (water, fog, smoke etc.).\n\nParameters\n\nuri\n\npython:str\n\nThe ambient material, expressed in a .material file.\nBy default, \"\", means air as ambient material.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_stop_condition_rays_number",
        "title": "SimulationDirect > Method detail > set_stop_condition_rays_number",
        "section": "Method detail > set_stop_condition_rays_number",
        "text": "SimulationDirect.set_stop_condition_rays_number(value=200000)\n\nTo stop the simulation after a certain number of rays were sent. Set None as value to have no condition about rays number.\n\nParameters\n\nvalue\n\npython:int, optional\n\nThe number of rays to send. Or None if no condition about the number of rays.\nBy default, 200000.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_stop_condition_duration",
        "title": "SimulationDirect > Method detail > set_stop_condition_duration",
        "section": "Method detail > set_stop_condition_duration",
        "text": "SimulationDirect.set_stop_condition_duration(value=None)\n\nTo stop the simulation after a certain duration. Set None as value to have no condition about duration.\n\nParameters\n\nvalue\n\npython:int, optional\n\nDuration requested (s). Or None if no condition about duration.\nBy default, None.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/simulation/SimulationDirect",
        "href": "api/ansys/speos/core/simulation/SimulationDirect.html#SimulationDirect.set_automatic_save_frequency",
        "title": "SimulationDirect > Method detail > set_automatic_save_frequency",
        "section": "Method detail > set_automatic_save_frequency",
        "text": "SimulationDirect.set_automatic_save_frequency(value=1800)\n\nDefine a backup interval (s).\n\nThis option is useful when computing long simulations.\nBut a reduced number of save operations naturally increases the simulation performance.\n\nParameters\n\nvalue\n\npython:int, optional\n\nBackup interval (s).\nBy default, 1800.\n\nReturns\n\nansys.speos.core.simulation.SimulationDirect\n\nDirect simulation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/index",
        "href": "api/ansys/speos/core/index.html#the-ansysspeoscore-library",
        "title": "The ansys.speos.core library",
        "section": "The ansys.speos.core library",
        "text": "The ansys.speos.core library\nansys.speos.core"
    },
    {
        "objectID": "api/ansys/speos/core/index",
        "href": "api/ansys/speos/core/index.html#summary",
        "title": "The ansys.speos.core library > Summary",
        "section": "Summary",
        "text": "kernel\nPySpeos Kernel module gathers low-level interactions and internal operations of the project.\nworkflow\nPySpeos workflow gathers functionality to use Speos capabilities in advanced ways.\nbody\nProvides a way to interact with feature: Body.\nface\nProvides a way to interact with feature: Face.\ngeo_ref\nProvides interface to link Speos Objects to Geometries.\nintensity\nProvides a way to interact with Speos feature: Intensity.\nlauncher\nModule to start Speos RPC Server.\nlogger\nLogging module.\nlxp\nThe lxp module contains classes and functions to simplify the interaction with ray data (LPF file).\nopt_prop\nProvides a way to interact with Speos feature: Optical Property.\npart\nProvides a way to interact with feature: Part.\nproject\nProvides a way to gather Speos features.\nproto_message_utils\nModule with method to process Protobuf messages.\nsensor\nProvides a way to interact with Speos feature: Sensor.\nsimulation\nProvides a way to interact with Speos feature: Simulation.\nsource\nProvides a way to interact with Speos feature: Source.\nspectrum\nProvides a way to interact with Speos feature: Spectrum.\nspeos\nProvides the Speos class.\n__version__\nSummary\nkernel\nworkflow\nbody\nface\ngeo_ref\nintensity\nlauncher\nlogger\nlxp\nopt_prop\npart\nproject\nproto_message_utils\nsensor\nsimulation\nsource\nspectrum\nspeos\nSpeos\n__version__"
    },
    {
        "objectID": "api/ansys/speos/core/index",
        "href": "api/ansys/speos/core/index.html#description",
        "title": "The ansys.speos.core library > Description",
        "section": "Description",
        "text": "PySpeos is a Python library that gathers functionalities and tools based on Speos solver remote API.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/index",
        "href": "api/ansys/speos/core/index.html#module-detail",
        "title": "The ansys.speos.core library > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/speos/core/index",
        "href": "api/ansys/speos/core/index.html#core.__version__",
        "title": "The ansys.speos.core library > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "core.__version__\n\n"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#simulationtemplatestub",
        "title": "SimulationTemplateStub",
        "section": "SimulationTemplateStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for simulation templates.\nChannel to use for the stub.\nThe best way to get a SimulationTemplateStub is to retrieve it from SpeosClient via simulation_templates() method.\nLike in the following example:\nSimulationTemplateStub\nSimulationTemplateStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#ansys.speos.core.kernel.simulation_template.SimulationTemplateStub",
        "title": "SimulationTemplateStub > SimulationTemplateStub > SimulationTemplateStub",
        "section": "SimulationTemplateStub > SimulationTemplateStub",
        "text": "class ansys.speos.core.kernel.simulation_template.SimulationTemplateStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for simulation templates.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SimulationTemplateStub is to retrieve it from SpeosClient via simulation_templates() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sim_t_db = speos.client.simulation_templates()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#overview",
        "title": "SimulationTemplateStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#import-detail",
        "title": "SimulationTemplateStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#method-detail",
        "title": "SimulationTemplateStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nsimulation_template.SimulationTemplate\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nsimulation_template.SimulationTemplate\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nsimulation_template.SimulationTemplate\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nList\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#SimulationTemplateStub.create",
        "title": "SimulationTemplateStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SimulationTemplateStub.create(message)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nsimulation_template.SimulationTemplate\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#SimulationTemplateStub.read",
        "title": "SimulationTemplateStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SimulationTemplateStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to read.\n\nReturns\n\nsimulation_template.SimulationTemplate\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#SimulationTemplateStub.update",
        "title": "SimulationTemplateStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SimulationTemplateStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to update.\n\ndata\n\nsimulation_template.SimulationTemplate\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#SimulationTemplateStub.delete",
        "title": "SimulationTemplateStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SimulationTemplateStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateStub.html#SimulationTemplateStub.list",
        "title": "SimulationTemplateStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SimulationTemplateStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.simulation_template.SimulationTemplateLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/project/index",
        "href": "api/ansys/speos/core/project/index.html#the-projectpy-module",
        "title": "The project.py module",
        "section": "The project.py module",
        "text": "The project.py module\nproject.py"
    },
    {
        "objectID": "api/ansys/speos/core/project/index",
        "href": "api/ansys/speos/core/project/index.html#summary",
        "title": "The project.py module > Summary",
        "section": "Summary",
        "text": "Project\nA project describes all Speos features (optical properties, sources, sensors, simulations) that user can fill in.\nSummary\nProject"
    },
    {
        "objectID": "api/ansys/speos/core/project/index",
        "href": "api/ansys/speos/core/project/index.html#description",
        "title": "The project.py module > Description",
        "section": "Description",
        "text": "Provides a way to gather Speos features.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/proto_message_utils/index",
        "href": "api/ansys/speos/core/proto_message_utils/index.html#the-proto_message_utilspy-module",
        "title": "The proto_message_utils.py module",
        "section": "The proto_message_utils.py module",
        "text": "The proto_message_utils.py module\nproto_message_utils.py"
    },
    {
        "objectID": "api/ansys/speos/core/proto_message_utils/index",
        "href": "api/ansys/speos/core/proto_message_utils/index.html#summary",
        "title": "The proto_message_utils.py module > Summary",
        "section": "Summary",
        "text": "dict_to_str\nTransform a dictionary into a string.\nSummary\ndict_to_str"
    },
    {
        "objectID": "api/ansys/speos/core/proto_message_utils/index",
        "href": "api/ansys/speos/core/proto_message_utils/index.html#description",
        "title": "The proto_message_utils.py module > Description",
        "section": "Description",
        "text": "Module with method to process Protobuf messages.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/proto_message_utils/index",
        "href": "api/ansys/speos/core/proto_message_utils/index.html#module-detail",
        "title": "The proto_message_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Transform a dictionary into a string.\nDictionary to transform.\nString representation of the dictionary.\nModule detail\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/proto_message_utils/index",
        "href": "api/ansys/speos/core/proto_message_utils/index.html#proto_message_utils.dict_to_str",
        "title": "The proto_message_utils.py module > Module detail > dict_to_str",
        "section": "Module detail > dict_to_str",
        "text": "proto_message_utils.dict_to_str(dict)\n\nTransform a dictionary into a string.\n\nParameters\n\ndict\n\nDictionary to transform.\n\nReturns\n\npython:str\n\nString representation of the dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#speosclient",
        "title": "SpeosClient",
        "section": "SpeosClient",
        "text": "Wraps a speos gRPC connection.\nHost where the server is running.\nBy default, DEFAULT_HOST.\nPort number where the server is running.\nBy default, DEFAULT_PORT.\ngRPC channel for server communication.\nBy default, None.\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\nThe logging level to be applied to the client.\nBy default, INFO.\nThe file to output the log, if requested. By default, None.\nhost (Optional[str])\nport (Union[str, int])\nchannel (Optional[grpc.Channel])\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\ntimeout (Optional[int])\nlogging_level (Optional[int])\nlogging_file (Optional[Union[pathlib.Path, str]])\nSpeosClient\nSpeosClient\npython:str\noptional\nDEFAULT_HOST\nUnion\npython:str\npython:int\noptional\nDEFAULT_PORT\nChannel\noptional\nNone\nansys.platform.instancemanagement.Instance\nSpeosClient.close\nReal\noptional\npython:int\noptional\nINFO\nOptional\npython:str\nPath\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#ansys.speos.core.kernel.client.SpeosClient",
        "title": "SpeosClient > SpeosClient > SpeosClient",
        "section": "SpeosClient > SpeosClient",
        "text": "class ansys.speos.core.kernel.client.SpeosClient(host=DEFAULT_HOST, port=DEFAULT_PORT, channel=None, remote_instance=None, timeout=60, logging_level=logging.INFO, logging_file=None)\n\nWraps a speos gRPC connection.\n\nParameters\n\nhost\n\npython:str, optional\n\nHost where the server is running.\nBy default, DEFAULT_HOST.\n\nport\n\nUnion[python:str, python:int], optional\n\nPort number where the server is running.\nBy default, DEFAULT_PORT.\n\nchannel\n\nChannel, optional\n\ngRPC channel for server communication.\nBy default, None.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance\n\nThe corresponding remote instance when the Speos Service\nis launched through PyPIM. This instance will be deleted when calling\nSpeosClient.close.\n\ntimeout\n\nReal, optional\n\nTimeout in seconds to achieve the connection.\nBy default, 60 seconds.\n\nlogging_level\n\npython:int, optional\n\nThe logging level to be applied to the client.\nBy default, INFO.\n\nlogging_file\n\nOptional[python:str, Path]\n\nThe file to output the log, if requested. By default, None.\n\nParameters\n\nhost (Optional[str])\n\nport (Union[str, int])\n\nchannel (Optional[grpc.Channel])\n\nremote_instance (Optional[ansys.platform.instancemanagement.Instance])\n\ntimeout (Optional[int])\n\nlogging_level (Optional[int])\n\nlogging_file (Optional[Union[pathlib.Path, str]])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#overview",
        "title": "SpeosClient > Overview",
        "section": "Overview",
        "text": "target\nGet the target of the channel.\nfaces\nGet face database access.\nbodies\nGet body database access.\nparts\nGet part database access.\nsop_templates\nGet sop template database access.\nvop_templates\nGet vop template database access.\nspectrums\nGet spectrum database access.\nintensity_templates\nGet intensity template database access.\nsource_templates\nGet source template database access.\nsensor_templates\nGet sensor template database access.\nsimulation_templates\nGet simulation template database access.\nscenes\nGet scene database access.\njobs\nGet job database access.\nget_items\nGet items from keys.\nclose\nClose the channel.\nchannel\nThe gRPC channel of this client.\nlog\nThe specific instance logger.\nhealthy\nReturn if the client channel if healthy.\n__getitem__\nGet item from key.\n__repr__\nRepresent the client as a string.\nOverview\ntarget\nfaces\nbodies\nparts\nsop_templates\nvop_templates\nspectrums\nintensity_templates\nsource_templates\nsensor_templates\nsimulation_templates\nscenes\njobs\nget_items\nclose\nchannel\nlog\nhealthy\n__getitem__\n__repr__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#import-detail",
        "title": "SpeosClient > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#property-detail",
        "title": "SpeosClient > Property detail",
        "section": "Property detail",
        "text": "The gRPC channel of this client.\nThe specific instance logger.\nReturn if the client channel if healthy.\nProperty detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.channel",
        "title": "SpeosClient > Property detail > channel",
        "section": "Property detail > channel",
        "text": "property SpeosClient.channel: grpc.Channel\n\nThe gRPC channel of this client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.log",
        "title": "SpeosClient > Property detail > log",
        "section": "Property detail > log",
        "text": "property SpeosClient.log: ansys.speos.core.logger.PySpeosCustomAdapter\n\nThe specific instance logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.healthy",
        "title": "SpeosClient > Property detail > healthy",
        "section": "Property detail > healthy",
        "text": "property SpeosClient.healthy: bool\n\nReturn if the client channel if healthy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#method-detail",
        "title": "SpeosClient > Method detail",
        "section": "Method detail",
        "text": "Get the target of the channel.\nGet face database access.\nGet body database access.\nGet part database access.\nGet sop template database access.\nGet vop template database access.\nGet spectrum database access.\nGet intensity template database access.\nGet source template database access.\nGet sensor template database access.\nGet simulation template database access.\nGet scene database access.\nGet job database access.\nGet item from key.\nKey of the item (also named guid).\nLink object corresponding to the key - None if no objects corresponds to the key.\nGet items from keys.\nKeys of the items (also named guids).\nType of items expected\nList of Link objects corresponding to the keys - Empty if no objects corresponds to the keys.\nRepresent the client as a string.\nClose the channel.\nIf an instance of the Speos Service was started using\nPyPIM, this instance will be deleted.\nMethod detail\npython:str\nUnion\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nansys.speos.core.kernel.spectrum.SpectrumLink\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nansys.speos.core.kernel.source_template.SourceTemplateLink\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nansys.speos.core.kernel.scene.SceneLink\nansys.speos.core.kernel.job.JobLink\nansys.speos.core.kernel.part.PartLink\nansys.speos.core.kernel.body.BodyLink\nansys.speos.core.kernel.face.FaceLink\npython:None\nList\npython:str\ntype\nUnion\nList\nansys.speos.core.kernel.sop_template.SOPTemplateLink\nList\nansys.speos.core.kernel.vop_template.VOPTemplateLink\nList\nansys.speos.core.kernel.spectrum.SpectrumLink\nList\nansys.speos.core.kernel.intensity_template.IntensityTemplateLink\nList\nansys.speos.core.kernel.source_template.SourceTemplateLink\nList\nansys.speos.core.kernel.sensor_template.SensorTemplateLink\nList\nansys.speos.core.kernel.simulation_template.SimulationTemplateLink\nList\nansys.speos.core.kernel.scene.SceneLink\nList\nansys.speos.core.kernel.job.JobLink\nList\nansys.speos.core.kernel.part.PartLink\nList\nansys.speos.core.kernel.body.BodyLink\nList\nansys.speos.core.kernel.face.FaceLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.target",
        "title": "SpeosClient > Method detail > target",
        "section": "Method detail > target",
        "text": "SpeosClient.target()\n\nGet the target of the channel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.faces",
        "title": "SpeosClient > Method detail > faces",
        "section": "Method detail > faces",
        "text": "SpeosClient.faces()\n\nGet face database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.bodies",
        "title": "SpeosClient > Method detail > bodies",
        "section": "Method detail > bodies",
        "text": "SpeosClient.bodies()\n\nGet body database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.parts",
        "title": "SpeosClient > Method detail > parts",
        "section": "Method detail > parts",
        "text": "SpeosClient.parts()\n\nGet part database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.sop_templates",
        "title": "SpeosClient > Method detail > sop_templates",
        "section": "Method detail > sop_templates",
        "text": "SpeosClient.sop_templates()\n\nGet sop template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.vop_templates",
        "title": "SpeosClient > Method detail > vop_templates",
        "section": "Method detail > vop_templates",
        "text": "SpeosClient.vop_templates()\n\nGet vop template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.spectrums",
        "title": "SpeosClient > Method detail > spectrums",
        "section": "Method detail > spectrums",
        "text": "SpeosClient.spectrums()\n\nGet spectrum database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.intensity_templates",
        "title": "SpeosClient > Method detail > intensity_templates",
        "section": "Method detail > intensity_templates",
        "text": "SpeosClient.intensity_templates()\n\nGet intensity template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.source_templates",
        "title": "SpeosClient > Method detail > source_templates",
        "section": "Method detail > source_templates",
        "text": "SpeosClient.source_templates()\n\nGet source template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.sensor_templates",
        "title": "SpeosClient > Method detail > sensor_templates",
        "section": "Method detail > sensor_templates",
        "text": "SpeosClient.sensor_templates()\n\nGet sensor template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.simulation_templates",
        "title": "SpeosClient > Method detail > simulation_templates",
        "section": "Method detail > simulation_templates",
        "text": "SpeosClient.simulation_templates()\n\nGet simulation template database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.scenes",
        "title": "SpeosClient > Method detail > scenes",
        "section": "Method detail > scenes",
        "text": "SpeosClient.scenes()\n\nGet scene database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.jobs",
        "title": "SpeosClient > Method detail > jobs",
        "section": "Method detail > jobs",
        "text": "SpeosClient.jobs()\n\nGet job database access.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.__getitem__",
        "title": "SpeosClient > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "SpeosClient.__getitem__(key)\n\nGet item from key.\n\nParameters\n\nkey\n\npython:str\n\nKey of the item (also named guid).\n\nReturns\n\nUnion[ansys.speos.core.kernel.sop_template.SOPTemplateLink, ansys.speos.core.kernel.vop_template.VOPTemplateLink, ansys.speos.core.kernel.spectrum.SpectrumLink, ansys.speos.core.kernel.intensity_template.IntensityTemplateLink, ansys.speos.core.kernel.source_template.SourceTemplateLink, ansys.speos.core.kernel.sensor_template.SensorTemplateLink, ansys.speos.core.kernel.simulation_template.SimulationTemplateLink, ansys.speos.core.kernel.scene.SceneLink, ansys.speos.core.kernel.job.JobLink, ansys.speos.core.kernel.part.PartLink, ansys.speos.core.kernel.body.BodyLink, ansys.speos.core.kernel.face.FaceLink, python:None]\n\nLink object corresponding to the key - None if no objects corresponds to the key.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.get_items",
        "title": "SpeosClient > Method detail > get_items",
        "section": "Method detail > get_items",
        "text": "SpeosClient.get_items(keys, item_type)\n\nGet items from keys.\n\nParameters\n\nkeys\n\nList[python:str]\n\nKeys of the items (also named guids).\n\nitem_type\n\ntype\n\nType of items expected\n\nReturns\n\nUnion[List[ansys.speos.core.kernel.sop_template.SOPTemplateLink], List[ansys.speos.core.kernel.vop_template.VOPTemplateLink], List[ansys.speos.core.kernel.spectrum.SpectrumLink], List[ansys.speos.core.kernel.intensity_template.IntensityTemplateLink], List[ansys.speos.core.kernel.source_template.SourceTemplateLink], List[ansys.speos.core.kernel.sensor_template.SensorTemplateLink], List[ansys.speos.core.kernel.simulation_template.SimulationTemplateLink], List[ansys.speos.core.kernel.scene.SceneLink], List[ansys.speos.core.kernel.job.JobLink], List[ansys.speos.core.kernel.part.PartLink], List[ansys.speos.core.kernel.body.BodyLink], List[ansys.speos.core.kernel.face.FaceLink]]\n\nList of Link objects corresponding to the keys - Empty if no objects corresponds to the keys.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.__repr__",
        "title": "SpeosClient > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "SpeosClient.__repr__()\n\nRepresent the client as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/client/SpeosClient",
        "href": "api/ansys/speos/core/kernel/client/SpeosClient.html#SpeosClient.close",
        "title": "SpeosClient > Method detail > close",
        "section": "Method detail > close",
        "text": "SpeosClient.close()\n\nClose the channel.\n\nNotes\n\nIf an instance of the Speos Service was started using\nPyPIM, this instance will be deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/index",
        "href": "api/ansys/speos/core/kernel/body/index.html#the-bodypy-module",
        "title": "The body.py module",
        "section": "The body.py module",
        "text": "The body.py module\nbody.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/index",
        "href": "api/ansys/speos/core/kernel/body/index.html#summary",
        "title": "The body.py module > Summary",
        "section": "Summary",
        "text": "BodyLink\nLink object for a body in database.\nBodyStub\nDatabase interactions for body.\nProtoBody\nBody protobuf class : ansys.api.speos.part.v1.body_pb2.Body\nSummary\nBodyLink\nBodyStub\nProtoBody"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/index",
        "href": "api/ansys/speos/core/kernel/body/index.html#description",
        "title": "The body.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/index",
        "href": "api/ansys/speos/core/kernel/body/index.html#module-detail",
        "title": "The body.py module > Module detail",
        "section": "Module detail",
        "text": "Body protobuf class : ansys.api.speos.part.v1.body_pb2.Body\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/body/index",
        "href": "api/ansys/speos/core/kernel/body/index.html#body.ProtoBody",
        "title": "The body.py module > Module detail > ProtoBody",
        "section": "Module detail > ProtoBody",
        "text": "body.ProtoBody\n\nBody protobuf class : ansys.api.speos.part.v1.body_pb2.Body\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/index",
        "href": "api/ansys/speos/core/source/index.html#the-sourcepy-module",
        "title": "The source.py module",
        "section": "The source.py module",
        "text": "The source.py module\nsource.py"
    },
    {
        "objectID": "api/ansys/speos/core/source/index",
        "href": "api/ansys/speos/core/source/index.html#summary",
        "title": "The source.py module > Summary",
        "section": "Summary",
        "text": "BaseSource\nSuper Class for all sources.\nSourceLuminaire\nLuminaireSource.\nSourceRayFile\nRayFile Source.\nSourceSurface\nType of Source : Surface.\nSummary\nBaseSource\nSourceLuminaire\nSourceRayFile\nSourceSurface"
    },
    {
        "objectID": "api/ansys/speos/core/source/index",
        "href": "api/ansys/speos/core/source/index.html#description",
        "title": "The source.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Source.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#sourcerayfile",
        "title": "SourceRayFile",
        "section": "SourceRayFile",
        "text": "Bases: BaseSource\nRayFile Source.\nBy default, flux and spectrum from ray file are selected.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, {}.\nUses default values when True.\nproject (SourceRayFile.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\ndefault_values (bool)\nSourceRayFile\nSourceRayFile\nBaseSource\nansys.speos.core.project.Project\npython:str\npython:str\n\"\"\nOptional\nMapping\npython:str\npython:str\n{}"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#ansys.speos.core.source.SourceRayFile",
        "title": "SourceRayFile > SourceRayFile > SourceRayFile",
        "section": "SourceRayFile > SourceRayFile",
        "text": "class ansys.speos.core.source.SourceRayFile(project, name, description='', metadata=None, source_instance=None, default_values=True)\n\nBases: BaseSource\n\nRayFile Source.\n\nBy default, flux and spectrum from ray file are selected.\n\nParameters\n\nproject\n\nansys.speos.core.project.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]]\n\nMetadata of the feature.\nBy default, {}.\n\ndefault_values\n\nbool\n\nUses default values when True.\n\nParameters\n\nproject (SourceRayFile.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\nsource_instance (Optional[ansys.speos.core.kernel.scene.ProtoScene.SourceInstance])\n\ndefault_values (bool)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#overview",
        "title": "SourceRayFile > Overview",
        "section": "Overview",
        "text": "set_ray_file_uri\nSet ray file.\nset_flux_from_ray_file\nTake flux from ray file provided.\nset_flux_luminous\nSet luminous flux.\nset_flux_radiant\nSet radiant flux.\nset_spectrum_from_ray_file\nTake spectrum from ray file provided.\nset_spectrum\nSet spectrum of the Source.\nset_axis_system\nSet position of the source.\nset_exit_geometries\nSet exit geometries.\nOverview\nset_ray_file_uri\nset_flux_from_ray_file\nset_flux_luminous\nset_flux_radiant\nset_spectrum_from_ray_file\nset_spectrum\nset_axis_system\nset_exit_geometries"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#import-detail",
        "title": "SourceRayFile > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#method-detail",
        "title": "SourceRayFile > Method detail",
        "section": "Method detail",
        "text": "Set ray file.\nRayfile format file uri (.ray or .tm25ray files expected).\nRayFile source.\nTake flux from ray file provided.\nRayFile source.\nSet luminous flux.\nLuminous flux in lumens.\nBy default, 683.0.\nRayFile source.\nSet radiant flux.\nRadiant flux in watts.\nBy default, 1.0.\nRayFile source.\nTake spectrum from ray file provided.\nRayFile source.\nSet spectrum of the Source.\nSpectrum.\nSet position of the source.\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\nRayFile Source.\nSet exit geometries.\nExit Geometries that will use this rayfile source.\nBy default, [].\nRayFile Source.\nMethod detail\npython:str\nansys.speos.core.source.SourceRayFile\nansys.speos.core.source.SourceRayFile\npython:float\n683.0\nansys.speos.core.source.SourceRayFile\npython:float\n1.0\nansys.speos.core.source.SourceRayFile\nansys.speos.core.source.SourceRayFile\nansys.speos.core.spectrum.Spectrum\nOptional\nList\npython:float\n[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\nansys.speos.core.source.SourceRayFile\nList\nansys.speos.core.geo_ref.GeoRef\n[]\nansys.speos.core.source.SourceRayFile"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_ray_file_uri",
        "title": "SourceRayFile > Method detail > set_ray_file_uri",
        "section": "Method detail > set_ray_file_uri",
        "text": "SourceRayFile.set_ray_file_uri(uri)\n\nSet ray file.\n\nParameters\n\nuri\n\npython:str\n\nRayfile format file uri (.ray or .tm25ray files expected).\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_flux_from_ray_file",
        "title": "SourceRayFile > Method detail > set_flux_from_ray_file",
        "section": "Method detail > set_flux_from_ray_file",
        "text": "SourceRayFile.set_flux_from_ray_file()\n\nTake flux from ray file provided.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_flux_luminous",
        "title": "SourceRayFile > Method detail > set_flux_luminous",
        "section": "Method detail > set_flux_luminous",
        "text": "SourceRayFile.set_flux_luminous(value=683)\n\nSet luminous flux.\n\nParameters\n\nvalue\n\npython:float\n\nLuminous flux in lumens.\nBy default, 683.0.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_flux_radiant",
        "title": "SourceRayFile > Method detail > set_flux_radiant",
        "section": "Method detail > set_flux_radiant",
        "text": "SourceRayFile.set_flux_radiant(value=1)\n\nSet radiant flux.\n\nParameters\n\nvalue\n\npython:float\n\nRadiant flux in watts.\nBy default, 1.0.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_spectrum_from_ray_file",
        "title": "SourceRayFile > Method detail > set_spectrum_from_ray_file",
        "section": "Method detail > set_spectrum_from_ray_file",
        "text": "SourceRayFile.set_spectrum_from_ray_file()\n\nTake spectrum from ray file provided.\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_spectrum",
        "title": "SourceRayFile > Method detail > set_spectrum",
        "section": "Method detail > set_spectrum",
        "text": "SourceRayFile.set_spectrum()\n\nSet spectrum of the Source.\n\nReturns\n\nansys.speos.core.spectrum.Spectrum\n\nSpectrum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_axis_system",
        "title": "SourceRayFile > Method detail > set_axis_system",
        "section": "Method detail > set_axis_system",
        "text": "SourceRayFile.set_axis_system(axis_system=None)\n\nSet position of the source.\n\nParameters\n\naxis_system\n\nOptional[List[python:float]]\n\nPosition of the source [Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz].\nBy default, [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1].\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile Source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/source/SourceRayFile",
        "href": "api/ansys/speos/core/source/SourceRayFile.html#SourceRayFile.set_exit_geometries",
        "title": "SourceRayFile > Method detail > set_exit_geometries",
        "section": "Method detail > set_exit_geometries",
        "text": "SourceRayFile.set_exit_geometries(exit_geometries=None)\n\nSet exit geometries.\n\nParameters\n\nexit_geometries\n\nList[ansys.speos.core.geo_ref.GeoRef]\n\nExit Geometries that will use this rayfile source.\nBy default, [].\n\nReturns\n\nansys.speos.core.source.SourceRayFile\n\nRayFile Source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/index",
        "href": "api/ansys/speos/core/kernel/index.html#the-kernel-package",
        "title": "The kernel package",
        "section": "The kernel package",
        "text": "The kernel package\nkernel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/index",
        "href": "api/ansys/speos/core/kernel/index.html#summary",
        "title": "The kernel package > Summary",
        "section": "Summary",
        "text": "body\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nclient\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\ncrud\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nface\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nintensity_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\njob\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\npart\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nproto_message_utils\nModule with utility elements for protobuf messages from Speos RPC server.\nscene\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nsensor_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nsimulation_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nsop_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nsource_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nspectrum\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nvop_template\nProvides a wrapped abstraction of the gRPC proto API definition and stubs.\nSummary\nbody\nclient\ncrud\nface\nintensity_template\njob\npart\nproto_message_utils\nscene\nsensor_template\nsimulation_template\nsop_template\nsource_template\nspectrum\nvop_template"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/index",
        "href": "api/ansys/speos/core/kernel/index.html#description",
        "title": "The kernel package > Description",
        "section": "Description",
        "text": "PySpeos Kernel module gathers low-level interactions and internal operations of the project.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/index",
        "href": "api/ansys/speos/core/kernel/intensity_template/index.html#the-intensity_templatepy-module",
        "title": "The intensity_template.py module",
        "section": "The intensity_template.py module",
        "text": "The intensity_template.py module\nintensity_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/index",
        "href": "api/ansys/speos/core/kernel/intensity_template/index.html#summary",
        "title": "The intensity_template.py module > Summary",
        "section": "Summary",
        "text": "IntensityTemplateLink\nLink object for intensity template in database.\nIntensityTemplateStub\nDatabase interactions for intensity templates.\nProtoIntensityTemplate\nIntensityTemplate protobuf class : ansys.api.speos.intensity.v1.intensity_pb2.IntensityTemplate\nSummary\nIntensityTemplateLink\nIntensityTemplateStub\nProtoIntensityTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/index",
        "href": "api/ansys/speos/core/kernel/intensity_template/index.html#description",
        "title": "The intensity_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/index",
        "href": "api/ansys/speos/core/kernel/intensity_template/index.html#module-detail",
        "title": "The intensity_template.py module > Module detail",
        "section": "Module detail",
        "text": "IntensityTemplate protobuf class : ansys.api.speos.intensity.v1.intensity_pb2.IntensityTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/index",
        "href": "api/ansys/speos/core/kernel/intensity_template/index.html#intensity_template.ProtoIntensityTemplate",
        "title": "The intensity_template.py module > Module detail > ProtoIntensityTemplate",
        "section": "Module detail > ProtoIntensityTemplate",
        "text": "intensity_template.ProtoIntensityTemplate\n\nIntensityTemplate protobuf class : ansys.api.speos.intensity.v1.intensity_pb2.IntensityTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#lightpathfinder",
        "title": "LightPathFinder",
        "section": "LightPathFinder",
        "text": "Define an interface to read LPF files.\nLPF files contain a set of simulated rays including their intersections and properties.\nSpeos Session (connected to Speos gRPC server).\nPath to the LPF file to be opened.\nspeos (ansys.speos.core.project.Speos)\npath (str)\nLightPathFinder\nLightPathFinder\nansys.speos.core.speos.Speos\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#ansys.speos.core.lxp.LightPathFinder",
        "title": "LightPathFinder > LightPathFinder > LightPathFinder",
        "section": "LightPathFinder > LightPathFinder",
        "text": "class ansys.speos.core.lxp.LightPathFinder(speos, path)\n\nDefine an interface to read LPF files.\n\nLPF files contain a set of simulated rays including their intersections and properties.\n\nParameters\n\nspeos\n\nansys.speos.core.speos.Speos\n\nSpeos Session (connected to Speos gRPC server).\n\npath\n\npython:str\n\nPath to the LPF file to be opened.\n\nParameters\n\nspeos (ansys.speos.core.project.Speos)\n\npath (str)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#overview",
        "title": "LightPathFinder > Overview",
        "section": "Overview",
        "text": "filter_by_face_ids\nFilter ray paths based on face IDs and populates filtered_rays property.\nfilter_by_body_ids\nFilter ray paths based on body IDs and populates filtered_rays property.\nfilter_error_rays\nFilter ray paths and only shows rays in error.\nremove_error_rays\nFilter rays and only shows rays not in error.\npreview\nPreview LPF file with pyvista.\nnb_traces\nNumber of light paths within LPF data set.\nnb_xmps\nNumber of sensors involved within LPF data set.\nhas_sensor_contributions\nDefine if a LPF file contains information regarding the sensor contribution.\nsensor_names\nList of involved sensor names.\nrays\nList ray paths within LPF file.\nfiltered_rays\nList of filtered ray paths.\nclient\nSpeos instance client\n__str__\nCreate string representation of LightPathFinder.\nOverview\nfilter_by_face_ids\nfilter_by_body_ids\nfilter_error_rays\nremove_error_rays\npreview\nnb_traces\nnb_xmps\nhas_sensor_contributions\nsensor_names\nrays\nfiltered_rays\nclient\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#import-detail",
        "title": "LightPathFinder > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#property-detail",
        "title": "LightPathFinder > Property detail",
        "section": "Property detail",
        "text": "Number of light paths within LPF data set.\nNumber of sensors involved within LPF data set.\nDefine if a LPF file contains information regarding the sensor contribution.\nList of involved sensor names.\nList ray paths within LPF file.\nList of filtered ray paths.\nProperty detail"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.nb_traces",
        "title": "LightPathFinder > Property detail > nb_traces",
        "section": "Property detail > nb_traces",
        "text": "property LightPathFinder.nb_traces: int\n\nNumber of light paths within LPF data set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.nb_xmps",
        "title": "LightPathFinder > Property detail > nb_xmps",
        "section": "Property detail > nb_xmps",
        "text": "property LightPathFinder.nb_xmps: int\n\nNumber of sensors involved within LPF data set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.has_sensor_contributions",
        "title": "LightPathFinder > Property detail > has_sensor_contributions",
        "section": "Property detail > has_sensor_contributions",
        "text": "property LightPathFinder.has_sensor_contributions: bool\n\nDefine if a LPF file contains information regarding the sensor contribution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.sensor_names",
        "title": "LightPathFinder > Property detail > sensor_names",
        "section": "Property detail > sensor_names",
        "text": "property LightPathFinder.sensor_names: list[str]\n\nList of involved sensor names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.rays",
        "title": "LightPathFinder > Property detail > rays",
        "section": "Property detail > rays",
        "text": "property LightPathFinder.rays: list[RayPath]\n\nList ray paths within LPF file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.filtered_rays",
        "title": "LightPathFinder > Property detail > filtered_rays",
        "section": "Property detail > filtered_rays",
        "text": "property LightPathFinder.filtered_rays: list[RayPath]\n\nList of filtered ray paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#attribute-detail",
        "title": "LightPathFinder > Attribute detail",
        "section": "Attribute detail",
        "text": "Speos instance client\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.client",
        "title": "LightPathFinder > Attribute detail > client",
        "section": "Attribute detail > client",
        "text": "LightPathFinder.client\n\nSpeos instance client\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#method-detail",
        "title": "LightPathFinder > Method detail",
        "section": "Method detail",
        "text": "Create string representation of LightPathFinder.\nFilter ray paths based on face IDs and populates filtered_rays property.\nList of face IDs.\nDefine if a new filter is created or an existing filter is filtered.\nLightPathFinder Instance.\nFilter ray paths based on body IDs and populates filtered_rays property.\nList of body IDs.\nDefine if a new filter is created or an existing filter is filtered.\nLightPathFinder Instance.\nFilter ray paths and only shows rays in error.\nLightPathFinder Instance.\nFilter rays and only shows rays not in error.\nLightPathFinder Instance.\nPreview LPF file with pyvista.\nNumber of rays to be visualized.\nLength of last ray.\nBoolean to decide if filtered rays or all rays should be shown.\nSpeos Project/Geometry to be added to pyvista visualisation.\nLightPathFinder Instance.\nMethod detail\npython:list\npython:int\nansys.speos.core.lxp.LightPathFinder\npython:list\npython:int\nansys.speos.core.lxp.LightPathFinder\nansys.speos.core.lxp.LightPathFinder\nansys.speos.core.lxp.LightPathFinder\npython:int\npython:float\nansys.speos.core.project.Project\nansys.speos.core.lxp.LightPathFinder"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.__str__",
        "title": "LightPathFinder > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "LightPathFinder.__str__()\n\nCreate string representation of LightPathFinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.filter_by_face_ids",
        "title": "LightPathFinder > Method detail > filter_by_face_ids",
        "section": "Method detail > filter_by_face_ids",
        "text": "LightPathFinder.filter_by_face_ids(options, new=True)\n\nFilter ray paths based on face IDs and populates filtered_rays property.\n\nParameters\n\noptions\n\npython:list[python:int]\n\nList of face IDs.\n\nnew\n\nbool\n\nDefine if a new filter is created or an existing filter is filtered.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.filter_by_body_ids",
        "title": "LightPathFinder > Method detail > filter_by_body_ids",
        "section": "Method detail > filter_by_body_ids",
        "text": "LightPathFinder.filter_by_body_ids(options, new=True)\n\nFilter ray paths based on body IDs and populates filtered_rays property.\n\nParameters\n\noptions\n\npython:list[python:int]\n\nList of body IDs.\n\nnew\n\nbool\n\nDefine if a new filter is created or an existing filter is filtered.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.filter_error_rays",
        "title": "LightPathFinder > Method detail > filter_error_rays",
        "section": "Method detail > filter_error_rays",
        "text": "LightPathFinder.filter_error_rays()\n\nFilter ray paths and only shows rays in error.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.remove_error_rays",
        "title": "LightPathFinder > Method detail > remove_error_rays",
        "section": "Method detail > remove_error_rays",
        "text": "LightPathFinder.remove_error_rays()\n\nFilter rays and only shows rays not in error.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/lxp/LightPathFinder",
        "href": "api/ansys/speos/core/lxp/LightPathFinder.html#LightPathFinder.preview",
        "title": "LightPathFinder > Method detail > preview",
        "section": "Method detail > preview",
        "text": "LightPathFinder.preview(nb_ray=100, max_ray_length=50.0, ray_filter=False, project=None)\n\nPreview LPF file with pyvista.\n\nParameters\n\nnb_ray\n\npython:int\n\nNumber of rays to be visualized.\n\nmax_ray_length\n\npython:float\n\nLength of last ray.\n\nray_filter\n\nbool\n\nBoolean to decide if filtered rays or all rays should be shown.\n\nproject\n\nansys.speos.core.project.Project\n\nSpeos Project/Geometry to be added to pyvista visualisation.\n\nReturns\n\nansys.speos.core.lxp.LightPathFinder\n\nLightPathFinder Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#intensitytemplatelink",
        "title": "IntensityTemplateLink",
        "section": "IntensityTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for intensity template in database.\nDatabase to link to.\nKey of the body in the database.\nkey (str)\nIntensityTemplateLink\nIntensityTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.intensity_template.IntensityTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#ansys.speos.core.kernel.intensity_template.IntensityTemplateLink",
        "title": "IntensityTemplateLink > IntensityTemplateLink > IntensityTemplateLink",
        "section": "IntensityTemplateLink > IntensityTemplateLink",
        "text": "class ansys.speos.core.kernel.intensity_template.IntensityTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for intensity template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.intensity_template.IntensityTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the body in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.speos.core.kernel.intensity_template import ProtoIntensityTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> int_t_db = speos.client.intensity_templates()\n>>> int_t_message = ProtoIntensityTemplate(name=\"Cos_3_170\")\n>>> int_t_message.cos.N = 3.0\n>>> int_t_message.cos.total_angle = 170\n>>> int_t_link = int_t_db.create(message=int_t_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#overview",
        "title": "IntensityTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\nget_library_type_info\nRetrieve information about intensity template in case of library type.\n__str__\nReturn the string representation of the intensity_template.\nOverview\nget\nset\ndelete\nget_library_type_info\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#import-detail",
        "title": "IntensityTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#method-detail",
        "title": "IntensityTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the intensity_template.\nGet the datamodel from database.\nIntensityTemplate datamodel.\nChange datamodel in database.\nNew IntensityTemplate datamodel.\nRemove datamodel from database.\nRetrieve information about intensity template in case of library type.\nInformation about intensity template, like flux value.\nMethod detail\nintensity_template.IntensityTemplate\nintensity_template.IntensityTemplate\nansys.api.speos.intensity.v1.intensity_pb2.GetLibraryTypeInfo_Response"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#IntensityTemplateLink.__str__",
        "title": "IntensityTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "IntensityTemplateLink.__str__()\n\nReturn the string representation of the intensity_template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#IntensityTemplateLink.get",
        "title": "IntensityTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "IntensityTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nintensity_template.IntensityTemplate\n\nIntensityTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#IntensityTemplateLink.set",
        "title": "IntensityTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "IntensityTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nintensity_template.IntensityTemplate\n\nNew IntensityTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#IntensityTemplateLink.delete",
        "title": "IntensityTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "IntensityTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink",
        "href": "api/ansys/speos/core/kernel/intensity_template/IntensityTemplateLink.html#IntensityTemplateLink.get_library_type_info",
        "title": "IntensityTemplateLink > Method detail > get_library_type_info",
        "section": "Method detail > get_library_type_info",
        "text": "IntensityTemplateLink.get_library_type_info()\n\nRetrieve information about intensity template in case of library type.\n\nReturns\n\nansys.api.speos.intensity.v1.intensity_pb2.GetLibraryTypeInfo_Response\n\nInformation about intensity template, like flux value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosFormatter",
        "href": "api/ansys/speos/core/logger/PySpeosFormatter.html#pyspeosformatter",
        "title": "PySpeosFormatter",
        "section": "PySpeosFormatter",
        "text": "Bases: logging.Formatter\nProvides the customized Formatter class for overwriting default format styles.\nPySpeosFormatter\nPySpeosFormatter\nlogging.Formatter\nFormatter"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosFormatter",
        "href": "api/ansys/speos/core/logger/PySpeosFormatter.html#ansys.speos.core.logger.PySpeosFormatter",
        "title": "PySpeosFormatter > PySpeosFormatter > PySpeosFormatter",
        "section": "PySpeosFormatter > PySpeosFormatter",
        "text": "class ansys.speos.core.logger.PySpeosFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides the customized Formatter class for overwriting default format styles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/logger/PySpeosFormatter",
        "href": "api/ansys/speos/core/logger/PySpeosFormatter.html#import-detail",
        "title": "PySpeosFormatter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#scenestub",
        "title": "SceneStub",
        "section": "SceneStub",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudStub\nDatabase interactions for scenes.\nChannel to use for the stub.\nThe best way to get a SceneStub is to retrieve it from SpeosClient via scenes() method.\nLike in the following example:\nSceneStub\nSceneStub\nansys.speos.core.kernel.crud.CrudStub\ngrpc.Channel"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#ansys.speos.core.kernel.scene.SceneStub",
        "title": "SceneStub > SceneStub > SceneStub",
        "section": "SceneStub > SceneStub",
        "text": "class ansys.speos.core.kernel.scene.SceneStub(channel)\n\nBases: ansys.speos.core.kernel.crud.CrudStub\n\nDatabase interactions for scenes.\n\nParameters\n\nchannel\n\ngrpc.Channel\n\nChannel to use for the stub.\n\nExamples\n\nThe best way to get a SceneStub is to retrieve it from SpeosClient via scenes() method.\nLike in the following example:\n\n>>> from ansys.speos.core.speos import Speos\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sce_db = speos.client.scenes()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#overview",
        "title": "SceneStub > Overview",
        "section": "Overview",
        "text": "create\nCreate a new entry.\nread\nGet an existing entry.\nupdate\nChange an existing entry.\ndelete\nRemove an existing entry.\nlist\nList existing entries.\nOverview\ncreate\nread\nupdate\ndelete\nlist"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#import-detail",
        "title": "SceneStub > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#method-detail",
        "title": "SceneStub > Method detail",
        "section": "Method detail",
        "text": "Create a new entry.\nDatamodel for the new entry.\nLink object created.\nGet an existing entry.\nLink object to read.\nDatamodel of the entry.\nChange an existing entry.\nLink object to update.\nNew datamodel for the entry.\nRemove an existing entry.\nLink object to delete.\nList existing entries.\nLink objects.\nMethod detail\nscene.Scene\nansys.speos.core.kernel.scene.SceneLink\nansys.speos.core.kernel.scene.SceneLink\nscene.Scene\nansys.speos.core.kernel.scene.SceneLink\nscene.Scene\nansys.speos.core.kernel.scene.SceneLink\nList\nansys.speos.core.kernel.scene.SceneLink"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#SceneStub.create",
        "title": "SceneStub > Method detail > create",
        "section": "Method detail > create",
        "text": "SceneStub.create(message=None)\n\nCreate a new entry.\n\nParameters\n\nmessage\n\nscene.Scene, optional.\n\nDatamodel for the new entry.\n\nReturns\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#SceneStub.read",
        "title": "SceneStub > Method detail > read",
        "section": "Method detail > read",
        "text": "SceneStub.read(ref)\n\nGet an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to read.\n\nReturns\n\nscene.Scene\n\nDatamodel of the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#SceneStub.update",
        "title": "SceneStub > Method detail > update",
        "section": "Method detail > update",
        "text": "SceneStub.update(ref, data)\n\nChange an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to update.\n\ndata\n\nscene.Scene\n\nNew datamodel for the entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#SceneStub.delete",
        "title": "SceneStub > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SceneStub.delete(ref)\n\nRemove an existing entry.\n\nParameters\n\nref\n\nansys.speos.core.kernel.scene.SceneLink\n\nLink object to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/scene/SceneStub",
        "href": "api/ansys/speos/core/kernel/scene/SceneStub.html#SceneStub.list",
        "title": "SceneStub > Method detail > list",
        "section": "Method detail > list",
        "text": "SceneStub.list()\n\nList existing entries.\n\nReturns\n\nList[ansys.speos.core.kernel.scene.SceneLink]\n\nLink objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/index",
        "href": "api/ansys/speos/core/kernel/vop_template/index.html#the-vop_templatepy-module",
        "title": "The vop_template.py module",
        "section": "The vop_template.py module",
        "text": "The vop_template.py module\nvop_template.py"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/index",
        "href": "api/ansys/speos/core/kernel/vop_template/index.html#summary",
        "title": "The vop_template.py module > Summary",
        "section": "Summary",
        "text": "VOPTemplateLink\nLink object for a Volume Optical Property (VOP) template in database.\nVOPTemplateStub\nDatabase interactions for Volume Optical Properties templates.\nProtoVOPTemplate\nVOPTemplate protobuf class : ansys.api.speos.vop.v1.vop_pb2.VOPTemplate\nSummary\nVOPTemplateLink\nVOPTemplateStub\nProtoVOPTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/index",
        "href": "api/ansys/speos/core/kernel/vop_template/index.html#description",
        "title": "The vop_template.py module > Description",
        "section": "Description",
        "text": "Provides a wrapped abstraction of the gRPC proto API definition and stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/index",
        "href": "api/ansys/speos/core/kernel/vop_template/index.html#module-detail",
        "title": "The vop_template.py module > Module detail",
        "section": "Module detail",
        "text": "VOPTemplate protobuf class : ansys.api.speos.vop.v1.vop_pb2.VOPTemplate\nModule detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/vop_template/index",
        "href": "api/ansys/speos/core/kernel/vop_template/index.html#vop_template.ProtoVOPTemplate",
        "title": "The vop_template.py module > Module detail > ProtoVOPTemplate",
        "section": "Module detail > ProtoVOPTemplate",
        "text": "vop_template.ProtoVOPTemplate\n\nVOPTemplate protobuf class : ansys.api.speos.vop.v1.vop_pb2.VOPTemplate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#how-to-create-a-part",
        "title": "Examples > How to create a part",
        "section": "How to create a part",
        "text": "This tutorial demonstrates how to create a part.\nHow to create a part"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#what-is-a-part",
        "title": "Examples > How to create a part > What is a part?",
        "section": "What is a part?",
        "text": "A part is either a volume or a face type bodies that are defined by a number of mesh triangles.\nThen a material optical property can be then applied to a part (like bodies, faces).\nWhat is a part?"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-connection-with-speos-rpc-server",
        "title": "Examples > How to create a part > Create connection with speos rpc server",
        "section": "Create connection with speos rpc server",
        "text": "Create connection with speos rpc server"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#new-project",
        "title": "Examples > How to create a part > New Project",
        "section": "New Project",
        "text": "The only way to create an optical property, is to create it from a project.\nNew Project"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create",
        "title": "Examples > How to create a part > Create",
        "section": "Create",
        "text": "Before creating a body, a Root part needs to be created and committed.\nCreate"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-bodies-in-root-part",
        "title": "Examples > How to create a part > Create bodies in root part.",
        "section": "Create bodies in root part.",
        "text": "A body can either a volume or face type. Both use the method named “create_body”.\nCreate bodies in root part."
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-faces-inside-a-body",
        "title": "Examples > How to create a part > Create faces inside a body.",
        "section": "Create faces inside a body.",
        "text": "A body can have one (example, surface/open-volume type of body) or multiple faces (close-volume type of body).\nEach face is then defined by a number of triangles/facets.\nEach triangle/facet is defined by vertices and vertice normals.\nCreate faces inside a body."
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-bodies-in-sub-part",
        "title": "Examples > How to create a part > Create bodies in sub part.",
        "section": "Create bodies in sub part.",
        "text": "Part can also be created under a sub-part.\nThe location sub-part can be defined using set_axis_system method.\nCreate bodies in sub part."
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-body-and-faces-in-sub-part-body",
        "title": "Examples > How to create a part > Create body and faces in sub part body",
        "section": "Create body and faces in sub part body",
        "text": "Create body and faces in sub part body"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#create-sub-parts-in-sub-part",
        "title": "Examples > How to create a part > Create sub parts in sub part",
        "section": "Create sub parts in sub part",
        "text": "Create sub parts in sub part"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#read",
        "title": "Examples > How to create a part > Read",
        "section": "Read",
        "text": "Read"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#find-with-exact-name",
        "title": "Examples > How to create a part > Find with exact name",
        "section": "Find with exact name",
        "text": "Find the root part\nFind a specific body in root part\nFind a specific face of a body in root part\nFind a sub part\nFind a specific body in sub part\nFind a specific face of a body in sub part\nFind with exact name"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#find-with-approximation-name",
        "title": "Examples > How to create a part > Find with approximation name",
        "section": "Find with approximation name",
        "text": "Find all bodies in root part\nFind all faces inside body called “TheBodyB1”\nIf you want to retrieve several kind of geometry features at a certain level, give feature_type=Part\nall the geometry features at root part level:\nall the geometry features at second level: e.g.:\nTheBodyB1’s all faces\nTheSubPartSP1’s all bodies\nTheSubPartSP1’s all sub part\nFind with approximation name"
    },
    {
        "objectID": "examples/core/part",
        "href": "examples/core/part.html#delete",
        "title": "Examples > How to create a part > Delete",
        "section": "Delete",
        "text": "Delete"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#docker-containers",
        "title": "Docker containers",
        "section": "Docker containers",
        "text": "Docker containers"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#what-is-docker",
        "title": "Docker containers > What is Docker?",
        "section": "What is Docker?",
        "text": "Docker is an open platform for developing, shipping, and running apps in a\ncontainerized way.\nContainers are standard units of software that package the code and all its dependencies\nso that the app runs quickly and reliably across different computing environments.\nEnsure that Docker is installed on the machine where the Speos service is running. Otherwise,\nsee Install Docker Engine in the Docker documentation.\nWhat is Docker?"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#select-your-docker-container",
        "title": "Docker containers > Select your Docker container",
        "section": "Select your Docker container",
        "text": "Currently, the Speos service backend is delivered as a Linux Docker container.\nSelect the kind of Docker container you want to build:\nBuild a Windows Docker container for the Speos service\nand use it from PySpeos.\nGo to Getting started\nSelect your Docker container"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/index",
        "href": "api/ansys/speos/core/intensity/index.html#the-intensitypy-module",
        "title": "The intensity.py module",
        "section": "The intensity.py module",
        "text": "The intensity.py module\nintensity.py"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/index",
        "href": "api/ansys/speos/core/intensity/index.html#summary",
        "title": "The intensity.py module > Summary",
        "section": "Summary",
        "text": "Intensity\nSpeos feature : Intensity.\nSummary\nIntensity"
    },
    {
        "objectID": "api/ansys/speos/core/intensity/index",
        "href": "api/ansys/speos/core/intensity/index.html#description",
        "title": "The intensity.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with Speos feature: Intensity.\nDescription"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#simulationtemplatelink",
        "title": "SimulationTemplateLink",
        "section": "SimulationTemplateLink",
        "text": "Bases: ansys.speos.core.kernel.crud.CrudItem\nLink object for simulation template in database.\nDatabase to link to.\nKey of the simulation_template in the database.\nkey (str)\nSimulationTemplateLink\nSimulationTemplateLink\nansys.speos.core.kernel.crud.CrudItem\nansys.speos.core.kernel.simulation_template.SimulationTemplateStub\npython:str"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#ansys.speos.core.kernel.simulation_template.SimulationTemplateLink",
        "title": "SimulationTemplateLink > SimulationTemplateLink > SimulationTemplateLink",
        "section": "SimulationTemplateLink > SimulationTemplateLink",
        "text": "class ansys.speos.core.kernel.simulation_template.SimulationTemplateLink(db, key)\n\nBases: ansys.speos.core.kernel.crud.CrudItem\n\nLink object for simulation template in database.\n\nParameters\n\ndb\n\nansys.speos.core.kernel.simulation_template.SimulationTemplateStub\n\nDatabase to link to.\n\nkey\n\npython:str\n\nKey of the simulation_template in the database.\n\nParameters\n\nkey (str)\n\nExamples\n\n>>> from ansys.speos.core.speos import Speos\n>>> from ansys.api.speos.simulation.v1 import simulation_template_pb2\n>>> from ansys.speos.core.kernel.simulation_template import ProtoSimulationTemplate\n>>> speos = Speos(host=\"localhost\", port=50098)\n>>> sim_t_db = speos.client.simulation_templates()\n>>> sim_t_message = ProtoSimulationTemplate(name=\"Direct\")\n>>> sim_t_message.direct_mc_simulation_template.geom_distance_tolerance = 0.01\n>>> sim_t_message.direct_mc_simulation_template.max_impact = 100\n>>> sim_t_message.direct_mc_simulation_template.weight.minimum_energy_percentage = 0.005\n>>> sim_t_message.direct_mc_simulation_template.colorimetric_standard = (\n...     simulation_template_pb2.CIE_1931\n... )\n>>> sim_t_message.direct_mc_simulation_template.dispersion = True\n>>> sim_t_link = sim_t_db.create(message=sim_t_message)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#overview",
        "title": "SimulationTemplateLink > Overview",
        "section": "Overview",
        "text": "get\nGet the datamodel from database.\nset\nChange datamodel in database.\ndelete\nRemove datamodel from database.\n__str__\nReturn the string representation of the simulation_template.\nOverview\nget\nset\ndelete\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#import-detail",
        "title": "SimulationTemplateLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#method-detail",
        "title": "SimulationTemplateLink > Method detail",
        "section": "Method detail",
        "text": "Return the string representation of the simulation_template.\nGet the datamodel from database.\nSimulationTemplate datamodel.\nChange datamodel in database.\nNew simulation_template datamodel.\nRemove datamodel from database.\nMethod detail\nsimulation_template.SimulationTemplate\nsimulation_template.SimulationTemplate"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#SimulationTemplateLink.__str__",
        "title": "SimulationTemplateLink > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "SimulationTemplateLink.__str__()\n\nReturn the string representation of the simulation_template.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#SimulationTemplateLink.get",
        "title": "SimulationTemplateLink > Method detail > get",
        "section": "Method detail > get",
        "text": "SimulationTemplateLink.get()\n\nGet the datamodel from database.\n\nReturns\n\nsimulation_template.SimulationTemplate\n\nSimulationTemplate datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#SimulationTemplateLink.set",
        "title": "SimulationTemplateLink > Method detail > set",
        "section": "Method detail > set",
        "text": "SimulationTemplateLink.set(data)\n\nChange datamodel in database.\n\nParameters\n\ndata\n\nsimulation_template.SimulationTemplate\n\nNew simulation_template datamodel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink",
        "href": "api/ansys/speos/core/kernel/simulation_template/SimulationTemplateLink.html#SimulationTemplateLink.delete",
        "title": "SimulationTemplateLink > Method detail > delete",
        "section": "Method detail > delete",
        "text": "SimulationTemplateLink.delete()\n\nRemove datamodel from database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#use-an-existing-service",
        "title": "Use an existing service",
        "section": "Use an existing service",
        "text": "If a Speos service is already running, PySpeos can be used to connect to it.\nInformation to know for a successful connection are the host and also the port.\nUse an existing service"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#establish-the-connection",
        "title": "Use an existing service > Establish the connection",
        "section": "Establish the connection",
        "text": "From Python, establish a connection to the existing Speos service by creating a Speos object:\nIf no error messages are received, your connection is established successfully.\nEstablish the connection\nSpeos"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#verify-the-connection",
        "title": "Use an existing service > Verify the connection",
        "section": "Verify the connection",
        "text": "If you want to verify that the connection is successful, request the status of the client\nconnection inside your Speos object:\nGo to Getting started\nVerify the connection\nSpeos"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#optprop",
        "title": "OptProp",
        "section": "OptProp",
        "text": "Speos feature: optical property.\nBy default, a mirror 100% is chosen as surface optical property, without any volume optical property.\nBy default, the optical property is applied to no geometry.\nProject that will own the feature.\nName of the feature.\nDescription of the feature.\nBy default, \"\".\nMetadata of the feature.\nBy default, None.\nproject (OptProp.__init__.project)\nname (str)\ndescription (str)\nmetadata (Optional[Mapping[str, str]])\nOptProp\nOptProp\nproject.Project\npython:str\npython:str\noptional\n\"\"\nOptional\nMapping\npython:str\npython:str\noptional\nNone"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#ansys.speos.core.opt_prop.OptProp",
        "title": "OptProp > OptProp > OptProp",
        "section": "OptProp > OptProp",
        "text": "class ansys.speos.core.opt_prop.OptProp(project, name, description='', metadata=None)\n\nSpeos feature: optical property.\n\nBy default, a mirror 100% is chosen as surface optical property, without any volume optical property.\nBy default, the optical property is applied to no geometry.\n\nParameters\n\nproject\n\nproject.Project\n\nProject that will own the feature.\n\nname\n\npython:str\n\nName of the feature.\n\ndescription\n\npython:str, optional\n\nDescription of the feature.\nBy default, \"\".\n\nmetadata\n\nOptional[Mapping[python:str, python:str]], optional\n\nMetadata of the feature.\nBy default, None.\n\nParameters\n\nproject (OptProp.__init__.project)\n\nname (str)\n\ndescription (str)\n\nmetadata (Optional[Mapping[str, str]])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#overview",
        "title": "OptProp > Overview",
        "section": "Overview",
        "text": "set_surface_mirror\nPerfect specular surface.\nset_surface_opticalpolished\nTransparent or perfectly polished material (glass, plastic).\nset_surface_library\nBased on surface optical properties file.\nset_volume_none\nNo volume optical property.\nset_volume_opaque\nNon transparent material.\nset_volume_optic\nTransparent colorless material without bulk scattering.\nset_volume_library\nBased on *.material file.\nset_geometries\nSelect geometries on which the optical properties will be applied.\nget\nGet dictionary corresponding to the project - read only.\ncommit\nSave feature: send the local data to the speos server database.\nreset\nReset feature: override local data by the one from the speos server database.\ndelete\nDelete feature: delete data from the speos server database.\nsop_template_link\nLink object for the sop template in database.\nvop_template_link\nLink object for the vop template in database.\n__str__\nReturn the string representation of the optical property.\nOverview\nset_surface_mirror\nset_surface_opticalpolished\nset_surface_library\nset_volume_none\nset_volume_opaque\nset_volume_optic\nset_volume_library\nset_geometries\nget\ncommit\nreset\ndelete\nsop_template_link\nvop_template_link\n__str__"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#import-detail",
        "title": "OptProp > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#attribute-detail",
        "title": "OptProp > Attribute detail",
        "section": "Attribute detail",
        "text": "Link object for the sop template in database.\nLink object for the vop template in database.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.sop_template_link",
        "title": "OptProp > Attribute detail > sop_template_link",
        "section": "Attribute detail > sop_template_link",
        "text": "OptProp.sop_template_link = None\n\nLink object for the sop template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.vop_template_link",
        "title": "OptProp > Attribute detail > vop_template_link",
        "section": "Attribute detail > vop_template_link",
        "text": "OptProp.vop_template_link = None\n\nLink object for the vop template in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#method-detail",
        "title": "OptProp > Method detail",
        "section": "Method detail",
        "text": "Perfect specular surface.\nReflectance, expected from 0. to 100. in %.\nBy default, 100.\nOptical property.\nTransparent or perfectly polished material (glass, plastic).\nOptical property.\nBased on surface optical properties file.\nSurface optical properties file, *.scattering, *.bsdf, *.brdf, *.coated, …\nOptical property.\nNo volume optical property.\nOptical property.\nNon transparent material.\nOptical property.\nTransparent colorless material without bulk scattering.\nRefractive index.\nBy default, 1.5.\nAbsorption coefficient value. mm-1.\nBy default, 0.\nAbbe number.\nBy default, None, means no constringence.\nOptical property.\nBased on *.material file.\n*.material file\nOptical property.\nSelect geometries on which the optical properties will be applied.\nList of geometries. Giving an empty list means “All geometries”\nBy default, None, means “no geometry”.\nOptical property.\nGet dictionary corresponding to the project - read only.\nReturn the string representation of the optical property.\nSave feature: send the local data to the speos server database.\nOptical Property feature.\nReset feature: override local data by the one from the speos server database.\nOptProp feature.\nDelete feature: delete data from the speos server database.\nThe local data are still available\nOptProp feature.\nMethod detail\npython:float\n100\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.opt_prop.OptProp\npython:str\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.opt_prop.OptProp\npython:float\n1.5\npython:float\n0\npython:float\noptional\nNone\nansys.speos.core.opt_prop.OptProp\npython:str\nansys.speos.core.opt_prop.OptProp\nList\nansys.speos.core.geo_ref.GeoRef\noptional\nNone\nansys.speos.core.opt_prop.OptProp\npython:str\npython:dict\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.opt_prop.OptProp\nansys.speos.core.opt_prop.OptProp"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_surface_mirror",
        "title": "OptProp > Method detail > set_surface_mirror",
        "section": "Method detail > set_surface_mirror",
        "text": "OptProp.set_surface_mirror(reflectance=100)\n\nPerfect specular surface.\n\nParameters\n\nreflectance\n\npython:float\n\nReflectance, expected from 0. to 100. in %.\nBy default, 100.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_surface_opticalpolished",
        "title": "OptProp > Method detail > set_surface_opticalpolished",
        "section": "Method detail > set_surface_opticalpolished",
        "text": "OptProp.set_surface_opticalpolished()\n\nTransparent or perfectly polished material (glass, plastic).\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_surface_library",
        "title": "OptProp > Method detail > set_surface_library",
        "section": "Method detail > set_surface_library",
        "text": "OptProp.set_surface_library(path)\n\nBased on surface optical properties file.\n\nParameters\n\npath\n\npython:str\n\nSurface optical properties file, *.scattering, *.bsdf, *.brdf, *.coated, …\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_volume_none",
        "title": "OptProp > Method detail > set_volume_none",
        "section": "Method detail > set_volume_none",
        "text": "OptProp.set_volume_none()\n\nNo volume optical property.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_volume_opaque",
        "title": "OptProp > Method detail > set_volume_opaque",
        "section": "Method detail > set_volume_opaque",
        "text": "OptProp.set_volume_opaque()\n\nNon transparent material.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_volume_optic",
        "title": "OptProp > Method detail > set_volume_optic",
        "section": "Method detail > set_volume_optic",
        "text": "OptProp.set_volume_optic(index=1.5, absorption=0, constringence=None)\n\nTransparent colorless material without bulk scattering.\n\nParameters\n\nindex\n\npython:float\n\nRefractive index.\nBy default, 1.5.\n\nabsorption\n\npython:float\n\nAbsorption coefficient value. mm-1.\nBy default, 0.\n\nconstringence\n\npython:float, optional\n\nAbbe number.\nBy default, None, means no constringence.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_volume_library",
        "title": "OptProp > Method detail > set_volume_library",
        "section": "Method detail > set_volume_library",
        "text": "OptProp.set_volume_library(path)\n\nBased on *.material file.\n\nParameters\n\npath\n\npython:str\n\n*.material file\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.set_geometries",
        "title": "OptProp > Method detail > set_geometries",
        "section": "Method detail > set_geometries",
        "text": "OptProp.set_geometries(geometries=None)\n\nSelect geometries on which the optical properties will be applied.\n\nParameters\n\ngeometries\n\nList[ansys.speos.core.geo_ref.GeoRef], optional\n\nList of geometries. Giving an empty list means “All geometries”\nBy default, None, means “no geometry”.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.get",
        "title": "OptProp > Method detail > get",
        "section": "Method detail > get",
        "text": "OptProp.get(key='')\n\nGet dictionary corresponding to the project - read only.\n\nParameters\n\nkey: str\n\n\n\nReturns\n\npython:str | python:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.__str__",
        "title": "OptProp > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "OptProp.__str__()\n\nReturn the string representation of the optical property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.commit",
        "title": "OptProp > Method detail > commit",
        "section": "Method detail > commit",
        "text": "OptProp.commit()\n\nSave feature: send the local data to the speos server database.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptical Property feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.reset",
        "title": "OptProp > Method detail > reset",
        "section": "Method detail > reset",
        "text": "OptProp.reset()\n\nReset feature: override local data by the one from the speos server database.\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/opt_prop/OptProp",
        "href": "api/ansys/speos/core/opt_prop/OptProp.html#OptProp.delete",
        "title": "OptProp > Method detail > delete",
        "section": "Method detail > delete",
        "text": "OptProp.delete()\n\nDelete feature: delete data from the speos server database.\n\nThe local data are still available\n\nReturns\n\nansys.speos.core.opt_prop.OptProp\n\nOptProp feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/speos/core/part/index",
        "href": "api/ansys/speos/core/part/index.html#the-partpy-module",
        "title": "The part.py module",
        "section": "The part.py module",
        "text": "The part.py module\npart.py"
    },
    {
        "objectID": "api/ansys/speos/core/part/index",
        "href": "api/ansys/speos/core/part/index.html#summary",
        "title": "The part.py module > Summary",
        "section": "Summary",
        "text": "Part\nFeature : Part.\nSummary\nPart"
    },
    {
        "objectID": "api/ansys/speos/core/part/index",
        "href": "api/ansys/speos/core/part/index.html#description",
        "title": "The part.py module > Description",
        "section": "Description",
        "text": "Provides a way to interact with feature: Part.\nDescription"
    }
]